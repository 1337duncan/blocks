{
    "id": 0,
    "name": "@airtable/blocks",
    "kind": 0,
    "flags": {},
    "children": [
        {
            "id": 10480,
            "name": "\"src/ui/icon_config\"",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/icon_config.ts",
            "children": [
                {
                    "id": 10484,
                    "name": "IconName",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "List of all icon names. If you need to render an icon use the {@link Icon|Icon component}.",
                        "text": "[[ Story id=\"icon--example\" title=\"Icon example\" height=\"576px\"]]\n"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/icon_config.ts",
                            "line": 170,
                            "character": 20
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "number"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "filter"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "left"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "overflow"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "right"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "grid"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "code"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "form"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "link"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "menu"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "ol"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "select"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "time"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "ul"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "video"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "text"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "view"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "edit"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "checkbox"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "radio"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "collapse"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "paint"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "help"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "hide"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "show"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "italic"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "bold"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "x"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "underline"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "caret"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "search"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "android"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "apple"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "ascending"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "attachment"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "autonumber"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "barcode"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "bell"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "blocks"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "bolt"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "book"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "calendar"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "chart"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "chat"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "check"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "checkboxChecked"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "checkboxUnchecked"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "checklist"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "chevronDown"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "chevronLeft"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "chevronRight"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "chevronUp"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "clipboard"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "cog"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "collapseSidebar"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "count"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "count1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "cube"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "day"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "dayAuto"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "dedent"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "descending"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "dollar"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "down"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "download"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "dragHandle"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "drive"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "duplicate"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "envelope"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "envelope1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "expand"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "expand1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "expandSidebar"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "feed"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "file"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "flag"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "formula"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "fullscreen"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "gallery"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "gantt"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "gift"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "grid1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "group"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "heart"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "hide1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "history"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "home"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "hyperlink"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "hyperlinkCancel"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "indent"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "info"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "kanban"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "laptop"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "lightbulb"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "link1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "lock"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "logout"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "lookup"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "mapPin"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "markdown"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "minus"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "mobile"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "multicollaborator"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "multiselect"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "paragraph"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "paragraph1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "pause"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "percent"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "personal"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "phone"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "pivot"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "play"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "plus"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "plusFilled"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "premium"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "print"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "public"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "publish"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "quote"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "quote1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "radioSelected"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "redo"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "redo1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "richText"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "rollup"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "rollup1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "rowHeightSmall"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "rowHeightMedium"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "rowHeightLarge"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "rowHeightExtraLarge"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "selectCaret"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "settings"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "shapes"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "share"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "share1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "show1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "slack"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "smiley"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "sort"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "stack"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "star"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "strikethrough"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "switcher"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "tabs"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "team"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "teamLocked"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "thumbsUp"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "toggle"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "trash"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "twitter"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "undo"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "up"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "upload"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "warning"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "windows"
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [10484]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/icon_config.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 1025,
            "name": "@airtable/blocks/models: Abstract models",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/watchable.ts",
            "comment": {},
            "children": [
                {
                    "id": 1075,
                    "name": "AbstractModel",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Abstract superclass for all models. You won't use this class directly.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "models/advanced/AbstractModel\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 1076,
                            "name": "DataType",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 1077,
                            "name": "WatchableKey",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {},
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        }
                    ],
                    "children": [
                        {
                            "id": 1088,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 1089,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ]
                        },
                        {
                            "id": 1094,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 1095,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ]
                        },
                        {
                            "id": 1100,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A string representation of the model for use in debugging."
                            },
                            "signatures": [
                                {
                                    "id": 1101,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "A string representation of the model for use in debugging."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ]
                        },
                        {
                            "id": 1128,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatch keys watched with `.watch`.",
                                "text": "Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"
                            },
                            "signatures": [
                                {
                                    "id": 1129,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatch keys watched with `.watch`.",
                                        "text": "Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 1130,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to unwatch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "typeParameter",
                                                        "name": "WatchableKey",
                                                        "constraint": {
                                                            "type": "intrinsic",
                                                            "name": "string"
                                                        }
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "typeParameter",
                                                                "name": "WatchableKey",
                                                                "constraint": {
                                                                    "type": "intrinsic",
                                                                    "name": "string"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 1131,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the function passed to `.watch` for these keys"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 1132,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 1133,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 1134,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 1135,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "typeParameter",
                                                                        "name": "WatchableKey",
                                                                        "constraint": {
                                                                            "type": "intrinsic",
                                                                            "name": "string"
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    "id": 1136,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 113,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 1137,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the context that was passed to `.watch` for this `callback`\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "typeParameter",
                                                "name": "WatchableKey",
                                                "constraint": {
                                                    "type": "intrinsic",
                                                    "name": "string"
                                                }
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 1060
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 111,
                                    "character": 11
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 1060
                            }
                        },
                        {
                            "id": 1118,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get notified of changes to the model.",
                                "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"
                            },
                            "signatures": [
                                {
                                    "id": 1119,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get notified of changes to the model.",
                                        "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 1120,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to watch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "typeParameter",
                                                        "name": "WatchableKey",
                                                        "constraint": {
                                                            "type": "intrinsic",
                                                            "name": "string"
                                                        }
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "typeParameter",
                                                                "name": "WatchableKey",
                                                                "constraint": {
                                                                    "type": "intrinsic",
                                                                    "name": "string"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 1121,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "a function to call when those keys change"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 1122,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 1123,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 1124,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 1125,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "typeParameter",
                                                                        "name": "WatchableKey",
                                                                        "constraint": {
                                                                            "type": "intrinsic",
                                                                            "name": "string"
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    "id": 1126,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 66,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 1127,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "an optional context for `this` in `callback`.\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "typeParameter",
                                                "name": "WatchableKey",
                                                "constraint": {
                                                    "type": "intrinsic",
                                                    "name": "string"
                                                }
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 1050
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 64,
                                    "character": 9
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 1050
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [1088, 1094]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [1100, 1128, 1118]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/abstract_model.ts",
                            "line": 11,
                            "character": 19
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Watchable",
                            "id": 1026,
                            "typeArguments": [
                                {
                                    "type": "typeParameter",
                                    "name": "WatchableKey",
                                    "constraint": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ]
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AbstractModelWithAsyncData",
                            "id": 1143
                        },
                        {
                            "type": "reference",
                            "name": "Field",
                            "id": 1340
                        },
                        {
                            "type": "reference",
                            "name": "View",
                            "id": 1973
                        },
                        {
                            "type": "reference",
                            "name": "Record",
                            "id": 2296
                        },
                        {
                            "type": "reference",
                            "name": "Base",
                            "id": 2549
                        },
                        {
                            "type": "reference",
                            "name": "Session",
                            "id": 2676
                        },
                        {
                            "type": "reference",
                            "name": "Table",
                            "id": 14669
                        }
                    ]
                },
                {
                    "id": 1143,
                    "name": "AbstractModelWithAsyncData",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Abstract superclass for all block SDK models that need to fetch async data.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "models/advanced/AbstractModelWithAsyncData\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 1144,
                            "name": "DataType",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 1145,
                            "name": "WatchableKey",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {},
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        }
                    ],
                    "children": [
                        {
                            "id": 1186,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 1187,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.id",
                                        "id": 1088
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.id",
                                "id": 1088
                            }
                        },
                        {
                            "id": 1168,
                            "name": "isDataLoaded",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "getSignature": [
                                {
                                    "id": 1169,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 91,
                                    "character": 20
                                }
                            ]
                        },
                        {
                            "id": 1192,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 1193,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.isDeleted",
                                        "id": 1094
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.isDeleted",
                                "id": 1094
                            }
                        },
                        {
                            "id": 1176,
                            "name": "loadDataAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Will cause all the async data to be fetched and retained. Every call to\n`loadDataAsync` should have a matching call to `unloadData`.",
                                "text": "Returns a Promise that will resolve once the data is loaded.\n"
                            },
                            "signatures": [
                                {
                                    "id": 1177,
                                    "name": "loadDataAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Will cause all the async data to be fetched and retained. Every call to\n`loadDataAsync` should have a matching call to `unloadData`.",
                                        "text": "Returns a Promise that will resolve once the data is loaded.\n"
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 121,
                                    "character": 23
                                }
                            ]
                        },
                        {
                            "id": 1198,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A string representation of the model for use in debugging."
                            },
                            "signatures": [
                                {
                                    "id": 1199,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "A string representation of the model for use in debugging."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.toString",
                                        "id": 1100
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.toString",
                                "id": 1100
                            }
                        },
                        {
                            "id": 1178,
                            "name": "unloadData",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "signatures": [
                                {
                                    "id": 1179,
                                    "name": "unloadData",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "void"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 155,
                                    "character": 14
                                }
                            ]
                        },
                        {
                            "id": 1163,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatching a key that needs to load data asynchronously will automatically\ncause the data to be released. Once the data is available, the callback\nwill be called.",
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": "\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1164,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatching a key that needs to load data asynchronously will automatically\ncause the data to be released. Once the data is available, the callback\nwill be called.",
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": "\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1165,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "typeParameter",
                                                        "name": "WatchableKey",
                                                        "constraint": {
                                                            "type": "intrinsic",
                                                            "name": "string"
                                                        }
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "typeParameter",
                                                                "name": "WatchableKey",
                                                                "constraint": {
                                                                    "type": "intrinsic",
                                                                    "name": "string"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 1166,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 1167,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "typeParameter",
                                                "name": "WatchableKey",
                                                "constraint": {
                                                    "type": "intrinsic",
                                                    "name": "string"
                                                }
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 1060
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 73,
                                    "character": 11
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 1060
                            }
                        },
                        {
                            "id": 1158,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Watching a key that needs to load data asynchronously will automatically\ncause the data to be fetched. Once the data is available, the callback\nwill be called.",
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": "\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1159,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Watching a key that needs to load data asynchronously will automatically\ncause the data to be fetched. Once the data is available, the callback\nwill be called.",
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": "\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1160,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "typeParameter",
                                                        "name": "WatchableKey",
                                                        "constraint": {
                                                            "type": "intrinsic",
                                                            "name": "string"
                                                        }
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "typeParameter",
                                                                "name": "WatchableKey",
                                                                "constraint": {
                                                                    "type": "intrinsic",
                                                                    "name": "string"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 1161,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 1162,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "typeParameter",
                                                "name": "WatchableKey",
                                                "constraint": {
                                                    "type": "intrinsic",
                                                    "name": "string"
                                                }
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 1050
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 48,
                                    "character": 9
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 1050
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [1186, 1168, 1192]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [1176, 1198, 1178, 1163, 1158]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/abstract_model_with_async_data.ts",
                            "line": 12,
                            "character": 32
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AbstractModel",
                            "id": 1075,
                            "typeArguments": [
                                {
                                    "type": "typeParameter",
                                    "name": "DataType"
                                },
                                {
                                    "type": "typeParameter",
                                    "name": "WatchableKey",
                                    "constraint": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ]
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "ViewMetadataQueryResult",
                            "id": 1874
                        },
                        {
                            "type": "reference",
                            "name": "Cursor",
                            "id": 2832
                        },
                        {
                            "type": "reference",
                            "name": "RecordQueryResult",
                            "id": 14914
                        }
                    ]
                },
                {
                    "id": 1026,
                    "name": "Watchable",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Abstract superclass for watchable models. All watchable models expose `watch`\nand `unwatch` methods that allow consumers to subscribe to changes to that model.",
                        "text": "This class should not be used directly.\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "models/advanced/Watchable\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 1027,
                            "name": "WatchableKey",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {},
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        }
                    ],
                    "children": [
                        {
                            "id": 1060,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatch keys watched with `.watch`.",
                                "text": "Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"
                            },
                            "signatures": [
                                {
                                    "id": 1061,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatch keys watched with `.watch`.",
                                        "text": "Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 1062,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to unwatch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "typeParameter",
                                                        "name": "WatchableKey",
                                                        "constraint": {
                                                            "type": "intrinsic",
                                                            "name": "string"
                                                        }
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "typeParameter",
                                                                "name": "WatchableKey",
                                                                "constraint": {
                                                                    "type": "intrinsic",
                                                                    "name": "string"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 1063,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the function passed to `.watch` for these keys"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 1064,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 1065,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 1066,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 1067,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "typeParameter",
                                                                        "name": "WatchableKey",
                                                                        "constraint": {
                                                                            "type": "intrinsic",
                                                                            "name": "string"
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    "id": 1068,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 113,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 1069,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the context that was passed to `.watch` for this `callback`\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "typeParameter",
                                                "name": "WatchableKey",
                                                "constraint": {
                                                    "type": "intrinsic",
                                                    "name": "string"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 111,
                                    "character": 11
                                }
                            ]
                        },
                        {
                            "id": 1050,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get notified of changes to the model.",
                                "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"
                            },
                            "signatures": [
                                {
                                    "id": 1051,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get notified of changes to the model.",
                                        "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 1052,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to watch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "typeParameter",
                                                        "name": "WatchableKey",
                                                        "constraint": {
                                                            "type": "intrinsic",
                                                            "name": "string"
                                                        }
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "typeParameter",
                                                                "name": "WatchableKey",
                                                                "constraint": {
                                                                    "type": "intrinsic",
                                                                    "name": "string"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 1053,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "a function to call when those keys change"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 1054,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 1055,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 1056,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 1057,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "typeParameter",
                                                                        "name": "WatchableKey",
                                                                        "constraint": {
                                                                            "type": "intrinsic",
                                                                            "name": "string"
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    "id": 1058,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 66,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 1059,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "an optional context for `this` in `callback`.\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "typeParameter",
                                                "name": "WatchableKey",
                                                "constraint": {
                                                    "type": "intrinsic",
                                                    "name": "string"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 64,
                                    "character": 9
                                }
                            ]
                        }
                    ],
                    "groups": [
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [1060, 1050]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/watchable.ts",
                            "line": 13,
                            "character": 15
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AbstractModel",
                            "id": 1075
                        },
                        {
                            "type": "reference",
                            "name": "GlobalConfig",
                            "id": 1221
                        },
                        {
                            "type": "reference",
                            "name": "Viewport",
                            "id": 2937
                        },
                        {
                            "type": "reference",
                            "name": "SettingsButton",
                            "id": 14539
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [1075, 1143, 1026]
                }
            ],
            "sources": [
                {
                    "fileName": "src/watchable.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 584,
            "name": "@airtable/blocks/models: Aggregators",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/types/aggregators.ts",
            "comment": {},
            "children": [
                {
                    "id": 1312,
                    "name": "Aggregator",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Aggregators can be used to compute aggregates for cell values.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {aggregators} from '@airtable/blocks/models';\n\n// To get a list of aggregators supported for a specific field:\nconst fieldAggregators = myField.availableAggregators;\n\n// To compute the total attachment size of an attachment field:\nconst aggregator = aggregators.totalAttachmentSize;\nconst value = aggregator.aggregate(myRecords, myAttachmentField);\nconst valueAsString = aggregate.aggregateToString(myRecords, myAttachmentField);\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "models/Aggregator\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 1314,
                            "name": "displayName",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A user friendly name for this aggregator that can be displayed to users."
                            },
                            "sources": [
                                {
                                    "fileName": "src/models/aggregators.ts",
                                    "line": 30,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        },
                        {
                            "id": 1313,
                            "name": "key",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A unique key for this aggregator that can be used to identify it in code."
                            },
                            "sources": [
                                {
                                    "fileName": "src/models/aggregators.ts",
                                    "line": 28,
                                    "character": 7
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "AggregatorKey",
                                "id": 585
                            }
                        },
                        {
                            "id": 1315,
                            "name": "shortDisplayName",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A short user friendly name for this aggregator that can be displayed to users."
                            },
                            "sources": [
                                {
                                    "fileName": "src/models/aggregators.ts",
                                    "line": 32,
                                    "character": 20
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        },
                        {
                            "id": 1316,
                            "name": "aggregate",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Aggregates the value of `field` in each of `records` to produce a single value."
                            },
                            "signatures": [
                                {
                                    "id": 1317,
                                    "name": "aggregate",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Aggregates the value of `field` in each of `records` to produce a single value."
                                    },
                                    "parameters": [
                                        {
                                            "id": 1318,
                                            "name": "records",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "Array",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 2296
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 1319,
                                            "name": "field",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "Field",
                                                "id": 1340
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "unknown"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/aggregators.ts",
                                    "line": 38,
                                    "character": 13
                                }
                            ]
                        },
                        {
                            "id": 1320,
                            "name": "aggregateToString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Aggregates the value of `field` in each of `records` to produce a single value, formatted as a string."
                            },
                            "signatures": [
                                {
                                    "id": 1321,
                                    "name": "aggregateToString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Aggregates the value of `field` in each of `records` to produce a single value, formatted as a string."
                                    },
                                    "parameters": [
                                        {
                                            "id": 1322,
                                            "name": "records",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "Array",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 2296
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 1323,
                                            "name": "field",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "Field",
                                                "id": 1340
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/aggregators.ts",
                                    "line": 40,
                                    "character": 21
                                }
                            ]
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [1314, 1313, 1315]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [1316, 1320]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/aggregators.ts",
                            "line": 26,
                            "character": 27
                        }
                    ]
                },
                {
                    "id": 585,
                    "name": "AggregatorKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/types/aggregators.ts",
                            "line": 4,
                            "character": 25
                        }
                    ],
                    "type": {
                        "type": "intrinsic",
                        "name": "string"
                    }
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [1312]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [585]
                }
            ],
            "sources": [
                {
                    "fileName": "src/types/aggregators.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 691,
            "name": "@airtable/blocks/models: Base",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/types/collaborator.ts",
            "comment": {},
            "children": [
                {
                    "id": 2549,
                    "name": "Base",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Model class representing a base.",
                        "text": "If you want the base model to automatically recalculate whenever the base schema changes, try the\n{@link useBase} hook. Alternatively, you can manually subscribe to changes with\n{@link useWatchable} (recommended) or [Base#watch](/developers/blocks/api/models/Base#watch).\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {base} from '@airtable/blocks';\n\nconsole.log('The name of your base is', base.name);\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "models/Base\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 2570,
                            "name": "activeCollaborators",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The users who have access to this base.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {base} from '@airtable/blocks';\nconsole.log(base.activeCollaborators[0].email);\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 2571,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The users who have access to this base.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {base} from '@airtable/blocks';\nconsole.log(base.activeCollaborators[0].email);\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "CollaboratorData",
                                                "id": 692
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/base.ts",
                                    "line": 138,
                                    "character": 27
                                }
                            ]
                        },
                        {
                            "id": 2608,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 2609,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.id",
                                        "id": 1088
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.id",
                                "id": 1088
                            }
                        },
                        {
                            "id": 2612,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 2613,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.isDeleted",
                                        "id": 1094
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.isDeleted",
                                "id": 1094
                            }
                        },
                        {
                            "id": 2566,
                            "name": "name",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The name of the base.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {base} from '@airtable/blocks';\nconsole.log('The name of your base is', base.name);\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 2567,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The name of the base.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {base} from '@airtable/blocks';\nconsole.log('The name of your base is', base.name);\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/base.ts",
                                    "line": 102,
                                    "character": 12
                                }
                            ]
                        },
                        {
                            "id": 2568,
                            "name": "tables",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The tables in this base. Can be watched to know when tables are created, deleted, or reordered in the base.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {base} from '@airtable/blocks';\nconsole.log(`You have ${base.tables.length} tables`);\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 2569,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The tables in this base. Can be watched to know when tables are created, deleted, or reordered in the base.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {base} from '@airtable/blocks';\nconsole.log(`You have ${base.tables.length} tables`);\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Table",
                                                "id": 14669
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/base.ts",
                                    "line": 114,
                                    "character": 14
                                }
                            ]
                        },
                        {
                            "id": 2575,
                            "name": "getCollaboratorById",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The user matching the given ID. Throws if that user does not exist\nor does not have access to this base. Use {@link getCollaboratorByIdIfExists}\ninstead if you are unsure whether a collaborator with the given ID exists\nand has access to this base."
                            },
                            "signatures": [
                                {
                                    "id": 2576,
                                    "name": "getCollaboratorById",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The user matching the given ID. Throws if that user does not exist\nor does not have access to this base. Use {@link getCollaboratorByIdIfExists}\ninstead if you are unsure whether a collaborator with the given ID exists\nand has access to this base."
                                    },
                                    "parameters": [
                                        {
                                            "id": 2577,
                                            "name": "collaboratorId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The ID of the user.\n"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "UserId",
                                                "id": 697
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "CollaboratorData",
                                        "id": 692
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/base.ts",
                                    "line": 161,
                                    "character": 23
                                }
                            ]
                        },
                        {
                            "id": 2572,
                            "name": "getCollaboratorByIdIfExists",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The user matching the given ID, or `null` if that user does not exist or does not have access\nto this base."
                            },
                            "signatures": [
                                {
                                    "id": 2573,
                                    "name": "getCollaboratorByIdIfExists",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The user matching the given ID, or `null` if that user does not exist or does not have access\nto this base."
                                    },
                                    "parameters": [
                                        {
                                            "id": 2574,
                                            "name": "collaboratorId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The ID of the user.\n"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "UserId",
                                                "id": 697
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "CollaboratorData",
                                                "id": 692
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/base.ts",
                                    "line": 149,
                                    "character": 31
                                }
                            ]
                        },
                        {
                            "id": 2586,
                            "name": "getTableById",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The table matching the given ID. Throws if that table does not exist in this base. Use\n{@link getTableByIdIfExists} instead if you are unsure whether a table exists with the given\nID."
                            },
                            "signatures": [
                                {
                                    "id": 2587,
                                    "name": "getTableById",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The table matching the given ID. Throws if that table does not exist in this base. Use\n{@link getTableByIdIfExists} instead if you are unsure whether a table exists with the given\nID."
                                    },
                                    "parameters": [
                                        {
                                            "id": 2588,
                                            "name": "tableId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The ID of the table.\n"
                                            },
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Table",
                                        "id": 14669
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/base.ts",
                                    "line": 220,
                                    "character": 16
                                }
                            ]
                        },
                        {
                            "id": 2583,
                            "name": "getTableByIdIfExists",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The table matching the given ID, or `null` if that table does not exist in this base."
                            },
                            "signatures": [
                                {
                                    "id": 2584,
                                    "name": "getTableByIdIfExists",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The table matching the given ID, or `null` if that table does not exist in this base."
                                    },
                                    "parameters": [
                                        {
                                            "id": 2585,
                                            "name": "tableId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The ID of the table.\n"
                                            },
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Table",
                                                "id": 14669
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/base.ts",
                                    "line": 197,
                                    "character": 24
                                }
                            ]
                        },
                        {
                            "id": 2592,
                            "name": "getTableByName",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The table matching the given name. Throws if no table exists with that name in this base. Use\n{@link getTableByNameIfExists} instead if you are unsure whether a table exists with the\ngiven name."
                            },
                            "signatures": [
                                {
                                    "id": 2593,
                                    "name": "getTableByName",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The table matching the given name. Throws if no table exists with that name in this base. Use\n{@link getTableByNameIfExists} instead if you are unsure whether a table exists with the\ngiven name."
                                    },
                                    "parameters": [
                                        {
                                            "id": 2594,
                                            "name": "tableName",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The name of the table you're looking for.\n"
                                            },
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Table",
                                        "id": 14669
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/base.ts",
                                    "line": 247,
                                    "character": 18
                                }
                            ]
                        },
                        {
                            "id": 2589,
                            "name": "getTableByNameIfExists",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The table matching the given name, or `null` if no table exists with that name in this base."
                            },
                            "signatures": [
                                {
                                    "id": 2590,
                                    "name": "getTableByNameIfExists",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The table matching the given name, or `null` if no table exists with that name in this base."
                                    },
                                    "parameters": [
                                        {
                                            "id": 2591,
                                            "name": "tableName",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The name of the table you're looking for.\n"
                                            },
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Table",
                                                "id": 14669
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/base.ts",
                                    "line": 232,
                                    "character": 26
                                }
                            ]
                        },
                        {
                            "id": 2618,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A string representation of the model for use in debugging."
                            },
                            "signatures": [
                                {
                                    "id": 2619,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "A string representation of the model for use in debugging."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.toString",
                                        "id": 1100
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.toString",
                                "id": 1100
                            }
                        },
                        {
                            "id": 2646,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatch keys watched with `.watch`.",
                                "text": "Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2647,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatch keys watched with `.watch`.",
                                        "text": "Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2648,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to unwatch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableBaseKey",
                                                        "id": 2662
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableBaseKey",
                                                                "id": 2662
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2649,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the function passed to `.watch` for these keys"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 2650,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 2651,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 2652,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2653,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableBaseKey",
                                                                        "id": 2662
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2654,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 113,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 2655,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the context that was passed to `.watch` for this `callback`\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableBaseKey",
                                                "id": 2662
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 1060
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 111,
                                    "character": 11
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 1060
                            }
                        },
                        {
                            "id": 2636,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get notified of changes to the model.",
                                "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2637,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get notified of changes to the model.",
                                        "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2638,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to watch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableBaseKey",
                                                        "id": 2662
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableBaseKey",
                                                                "id": 2662
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2639,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "a function to call when those keys change"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 2640,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 2641,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 2642,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2643,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableBaseKey",
                                                                        "id": 2662
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2644,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 66,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 2645,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "an optional context for `this` in `callback`.\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableBaseKey",
                                                "id": 2662
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 1050
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 64,
                                    "character": 9
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 1050
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [2570, 2608, 2612, 2566, 2568]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [2575, 2572, 2586, 2583, 2592, 2589, 2618, 2646, 2636]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/base.ts",
                            "line": 64,
                            "character": 10
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AbstractModel",
                            "id": 1075,
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "BaseData"
                                },
                                {
                                    "type": "reference",
                                    "name": "WatchableBaseKey",
                                    "id": 2662
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 692,
                    "name": "CollaboratorData",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "An object representing a collaborator. You should not create these objects from scratch, but\nshould instead grab them from base data."
                    },
                    "children": [
                        {
                            "id": 694,
                            "name": "email",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The email address of the collaborator."
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/collaborator.ts",
                                    "line": 14,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        },
                        {
                            "id": 693,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The user ID of the collaborator."
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/collaborator.ts",
                                    "line": 12,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "UserId",
                                "id": 697
                            }
                        },
                        {
                            "id": 695,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The name of the collaborator."
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/collaborator.ts",
                                    "line": 16,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 696,
                            "name": "profilePicUrl",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The URL of the collaborator's profile picture."
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/collaborator.ts",
                                    "line": 18,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [694, 693, 695, 696]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/types/collaborator.ts",
                            "line": 10,
                            "character": 33
                        }
                    ]
                },
                {
                    "id": 718,
                    "name": "BaseId",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/types/base.ts",
                            "line": 10,
                            "character": 18
                        }
                    ],
                    "type": {
                        "type": "intrinsic",
                        "name": "string"
                    }
                },
                {
                    "id": 697,
                    "name": "UserId",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/types/collaborator.ts",
                            "line": 4,
                            "character": 18
                        }
                    ],
                    "type": {
                        "type": "intrinsic",
                        "name": "string"
                    }
                },
                {
                    "id": 2662,
                    "name": "WatchableBaseKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Any key in base that can be watched:\n- `name`: the name of the base\n- `tables`: the order of tables in the base\n- `collaborators`: all the collaborators in the base\n- `schema`: the base schema (essentially everything except for record data)"
                    },
                    "sources": [
                        {
                            "fileName": "src/models/base.ts",
                            "line": 40,
                            "character": 21
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "name"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "tables"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "collaborators"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "schema"
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [2549]
                },
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [692]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [718, 697, 2662]
                }
            ],
            "sources": [
                {
                    "fileName": "src/types/collaborator.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 2826,
            "name": "@airtable/blocks/models: Cursor",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/models/cursor.ts",
            "comment": {},
            "children": [
                {
                    "id": 2832,
                    "name": "Cursor",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Model class containing information about the state of the user's current interactions in\nAirtable - specifically, their active table, active view, selected records and selected fields.\nAlso allows you to set the active table and active view.",
                        "text": "Selected records and fields are not loaded by default and the cursor must be loaded with\n{@link useLoadable} to access them.\n\n```js\nimport {cursor} from '@airtable/blocks';\nimport {useWatchable} from '@airtable/blocks/ui';\n\n function ActiveTableAndView() {\n     // re-render whenever the active table or view changes\n     useWatchable(cursor, ['activeTableId', 'activeViewId']);\n\n     return (\n         <div>\n             Active table: {cursor.activeTableId)}\n             Active view: {cursor.activeViewId}\n         </div>\n     );\n }\n```\n\n```js\nimport {cursor} from '@airtable/blocks';\nimport {useLoadable, useWatchable} from '@airtable/blocks/ui';\n\n function SelectedRecordAndFieldIds() {\n     // load selected records and fields\n     useLoadable(cursor);\n\n     // re-render whenever the list of selected records or fields changes\n     useWatchable(cursor, ['selectedRecordIds', 'selectedFieldIds']);\n\n     return (\n         <div>\n             Selected records: {cursor.selectedRecordIds.join(', ')}\n             Selected fields: {cursor.selectedFieldIds.join(', ')}\n         </div>\n     );\n }\n```\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "models/Cursor\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 2861,
                            "name": "activeTableId",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The currently active table ID. Can be null when the active table has changed and is not yet\nloaded.",
                                "text": "Can be watched.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 2862,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The currently active table ID. Can be null when the active table has changed and is not yet\nloaded.",
                                        "text": "Can be watched.\n"
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "TableId",
                                                "id": 685
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/cursor.ts",
                                    "line": 214,
                                    "character": 21
                                }
                            ]
                        },
                        {
                            "id": 2863,
                            "name": "activeViewId",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The currently active view ID. This will always be a view belonging to `activeTableId`. Can be\nnull when the active view has changed and is not yet loaded.",
                                "text": "Can be watched.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 2864,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The currently active view ID. This will always be a view belonging to `activeTableId`. Can be\nnull when the active view has changed and is not yet loaded.",
                                        "text": "Can be watched.\n"
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "ViewId",
                                                "id": 663
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/cursor.ts",
                                    "line": 223,
                                    "character": 20
                                }
                            ]
                        },
                        {
                            "id": 2901,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 2902,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.id",
                                        "id": 1088
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.id",
                                "id": 1088
                            }
                        },
                        {
                            "id": 2893,
                            "name": "isDataLoaded",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "getSignature": [
                                {
                                    "id": 2894,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.isDataLoaded",
                                        "id": 1168
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 91,
                                    "character": 20
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.isDataLoaded",
                                "id": 1168
                            }
                        },
                        {
                            "id": 2905,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 2906,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.isDeleted",
                                        "id": 1094
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.isDeleted",
                                "id": 1094
                            }
                        },
                        {
                            "id": 2856,
                            "name": "selectedFieldIds",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The field IDs of all currently selected fields, or an empty array if no fields are selected.",
                                "text": "Not loaded by default: you must load cursor data with `useLoadable(cursor)` (recommended) or\n`cursor.loadDataAsync()` before use.\n\nCan be watched.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 2857,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The field IDs of all currently selected fields, or an empty array if no fields are selected.",
                                        "text": "Not loaded by default: you must load cursor data with `useLoadable(cursor)` (recommended) or\n`cursor.loadDataAsync()` before use.\n\nCan be watched.\n"
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "RecordId",
                                                "id": 644
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/cursor.ts",
                                    "line": 179,
                                    "character": 24
                                }
                            ]
                        },
                        {
                            "id": 2854,
                            "name": "selectedRecordIds",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The record IDs of all currently selected records, or an empty array if no records are selected.",
                                "text": "Not loaded by default. You must load cursor data with `useLoadable(cursor)` (recommended) or\n`cursor.loadDataAsync()` before use.\n\nCan be watched.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 2855,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The record IDs of all currently selected records, or an empty array if no records are selected.",
                                        "text": "Not loaded by default. You must load cursor data with `useLoadable(cursor)` (recommended) or\n`cursor.loadDataAsync()` before use.\n\nCan be watched.\n"
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "RecordId",
                                                "id": 644
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/cursor.ts",
                                    "line": 163,
                                    "character": 25
                                }
                            ]
                        },
                        {
                            "id": 2858,
                            "name": "isRecordSelected",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Checks whether a given record is selected.",
                                "text": "Selected records are not loaded by default. You must load cursor data with\n`useLoadable(cursor)` (recommended) or `cursor.loadDataAsync()` before use.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2859,
                                    "name": "isRecordSelected",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Checks whether a given record is selected.",
                                        "text": "Selected records are not loaded by default. You must load cursor data with\n`useLoadable(cursor)` (recommended) or `cursor.loadDataAsync()` before use.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2860,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The record or record ID to check for.\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 2296
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "string"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/cursor.ts",
                                    "line": 195,
                                    "character": 20
                                }
                            ]
                        },
                        {
                            "id": 2895,
                            "name": "loadDataAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Will cause all the async data to be fetched and retained. Every call to\n`loadDataAsync` should have a matching call to `unloadData`.",
                                "text": "Returns a Promise that will resolve once the data is loaded.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2896,
                                    "name": "loadDataAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Will cause all the async data to be fetched and retained. Every call to\n`loadDataAsync` should have a matching call to `unloadData`.",
                                        "text": "Returns a Promise that will resolve once the data is loaded.\n"
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.loadDataAsync",
                                        "id": 1176
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 121,
                                    "character": 23
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.loadDataAsync",
                                "id": 1176
                            }
                        },
                        {
                            "id": 2865,
                            "name": "setActiveTable",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Sets the specified table to active in the Airtable UI. If the blocks pane is fullscreen, the\ntable will still be set as active, but the blocks pane will continue to be displayed\nfullscreen."
                            },
                            "signatures": [
                                {
                                    "id": 2866,
                                    "name": "setActiveTable",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Sets the specified table to active in the Airtable UI. If the blocks pane is fullscreen, the\ntable will still be set as active, but the blocks pane will continue to be displayed\nfullscreen."
                                    },
                                    "parameters": [
                                        {
                                            "id": 2867,
                                            "name": "tableOrTableId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The target table or table ID to set as active in the Airtable main page.\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Table",
                                                        "id": 14669
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "TableId",
                                                        "id": 685
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "void"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/cursor.ts",
                                    "line": 233,
                                    "character": 18
                                }
                            ]
                        },
                        {
                            "id": 2868,
                            "name": "setActiveView",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Sets the specified view (and corresponding table) to active in the Airtable UI. If the blocks\npane is fullscreen, the view will still be set as active, but the blocks pane will continue\nto be displayed fullscreen."
                            },
                            "signatures": [
                                {
                                    "id": 2869,
                                    "name": "setActiveView",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Sets the specified view (and corresponding table) to active in the Airtable UI. If the blocks\npane is fullscreen, the view will still be set as active, but the blocks pane will continue\nto be displayed fullscreen."
                                    },
                                    "parameters": [
                                        {
                                            "id": 2870,
                                            "name": "tableOrTableId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The table or table ID that the target view belongs to."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Table",
                                                        "id": 14669
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "TableId",
                                                        "id": 685
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2871,
                                            "name": "viewOrViewId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The target view or view ID to set as active in the Airtable main page.\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "View",
                                                        "id": 1973
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ViewId",
                                                        "id": 663
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "void"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/cursor.ts",
                                    "line": 245,
                                    "character": 17
                                }
                            ]
                        },
                        {
                            "id": 2911,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A string representation of the model for use in debugging."
                            },
                            "signatures": [
                                {
                                    "id": 2912,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "A string representation of the model for use in debugging."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.toString",
                                        "id": 1100
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.toString",
                                "id": 1100
                            }
                        },
                        {
                            "id": 2897,
                            "name": "unloadData",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "signatures": [
                                {
                                    "id": 2898,
                                    "name": "unloadData",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "void"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.unloadData",
                                        "id": 1178
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 155,
                                    "character": 14
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.unloadData",
                                "id": 1178
                            }
                        },
                        {
                            "id": 2888,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatching a key that needs to load data asynchronously will automatically\ncause the data to be released. Once the data is available, the callback\nwill be called.",
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": "\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2889,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatching a key that needs to load data asynchronously will automatically\ncause the data to be released. Once the data is available, the callback\nwill be called.",
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": "\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2890,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableCursorKey",
                                                        "id": 2935
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableCursorKey",
                                                                "id": 2935
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2891,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 2892,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableCursorKey",
                                                "id": 2935
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 1060
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.unwatch",
                                        "id": 1163
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 73,
                                    "character": 11
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 1060
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.unwatch",
                                "id": 1163
                            }
                        },
                        {
                            "id": 2883,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Watching a key that needs to load data asynchronously will automatically\ncause the data to be fetched. Once the data is available, the callback\nwill be called.",
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": "\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2884,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Watching a key that needs to load data asynchronously will automatically\ncause the data to be fetched. Once the data is available, the callback\nwill be called.",
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": "\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2885,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableCursorKey",
                                                        "id": 2935
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableCursorKey",
                                                                "id": 2935
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2886,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 2887,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableCursorKey",
                                                "id": 2935
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 1050
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.watch",
                                        "id": 1158
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 48,
                                    "character": 9
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 1050
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.watch",
                                "id": 1158
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [2861, 2863, 2901, 2893, 2905, 2856, 2854]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [2858, 2895, 2865, 2868, 2911, 2897, 2888, 2883]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/cursor.ts",
                            "line": 89,
                            "character": 12
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AbstractModelWithAsyncData",
                            "id": 1143,
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "CursorData"
                                },
                                {
                                    "type": "reference",
                                    "name": "WatchableCursorKey",
                                    "id": 2935
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 2935,
                    "name": "WatchableCursorKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Watchable keys in {@link Cursor}.\n- `selectedRecordIds`\n- `selectedFieldIds`\n- `activeTableId`\n- `activeViewId`\n- `isDataLoaded`"
                    },
                    "sources": [
                        {
                            "fileName": "src/models/cursor.ts",
                            "line": 31,
                            "character": 23
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "isDataLoaded"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "selectedRecordIds"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "selectedFieldIds"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "activeTableId"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "activeViewId"
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [2832]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [2935]
                }
            ],
            "sources": [
                {
                    "fileName": "src/models/cursor.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 590,
            "name": "@airtable/blocks/models: Field",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/types/field.ts",
            "comment": {},
            "children": [
                {
                    "id": 591,
                    "name": "FieldType",
                    "kind": 4,
                    "kindString": "Enumeration",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "An enum of Airtable's field types",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {FieldType} from '@airtable/blocks/models';\nconst numberFields = myTable.fields.filter(field => (\n    field.type === FieldType.NUMBER\n));\n```\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 614,
                            "name": "AUTO_NUMBER",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Automatically incremented unique counter for each record.",
                                "text": "**Field options**\n\nn/a\n\n**Cell read format**\n```js\nnumber\n```\n\n**Cell write format**\n\nn/a\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 672,
                                    "character": 15
                                }
                            ],
                            "defaultValue": "\"autoNumber\""
                        },
                        {
                            "id": 615,
                            "name": "BARCODE",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Use the Airtable iOS or Android app to scan barcodes.",
                                "text": "**Field options**\n\nn/a\n\n**Cell read format**\n```js\n{\n    // the text value of the barcode\n    text: string,\n    // the type of barcode\n    type?: string,\n}\n```\n\n**Cell write format**\n\nn/a\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 694,
                                    "character": 11
                                }
                            ],
                            "defaultValue": "\"barcode\""
                        },
                        {
                            "id": 608,
                            "name": "CHECKBOX",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A checkbox.",
                                "text": "This field is \"true\" when checked and otherwise empty.\n\n\n**Field options**\n\n```js\n{\n    // an icon name\n    icon: string,\n    // the color of the check box\n    color: Color,\n}\n```\n\n**Cell read format**\n```js\nboolean\n```\n\n**Cell write format**\n```js\nboolean\n```\n\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 518,
                                    "character": 12
                                }
                            ],
                            "defaultValue": "\"checkbox\""
                        },
                        {
                            "id": 612,
                            "name": "COUNT",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Count the number of linked records.",
                                "text": "**Field options**\n```js\n{\n   // is the field currently valid (e.g. false if the linked record\n   // field has been changed to a different field type)\n   isValid: boolean,\n   // the linked record field in this table that we're counting\n   recordLinkFieldId: FieldId,\n}\n```\n\n**Cell read format**\n```js\nnumber\n```\n\n**Cell write format**\n\nn/a\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 639,
                                    "character": 9
                                }
                            ],
                            "defaultValue": "\"count\""
                        },
                        {
                            "id": 610,
                            "name": "CREATED_TIME",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The time the record was created in UTC.",
                                "text": "When reading from a \"Created time\" field, the cell value will always be an\n[ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) formatted date time\n\n**Field options**\n```js\n{\n    result: {\n        type: 'date' | 'dateTime',\n        // See DATE and DATE_TIME for detailed field options\n        options: DateOrDateTimeFieldOptions,\n    },\n}\n```\n\n**Cell read format**\n```js\nstring\n```\n\n**Cell write format**\n\nn/a\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 578,
                                    "character": 16
                                }
                            ],
                            "defaultValue": "\"createdTime\""
                        },
                        {
                            "id": 598,
                            "name": "CURRENCY",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "An amount of a currency.",
                                "text": "**Field options**\n```js\n{\n    precision: number,\n    symbol: string,\n}\n```\n\n**Cell read format**\n```js\nnumber\n```\n\n**Cell write format**\n```js\nnumber\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 157,
                                    "character": 12
                                }
                            ],
                            "defaultValue": "\"currency\""
                        },
                        {
                            "id": 604,
                            "name": "DATE",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A date.",
                                "text": "When reading from and writing to a date field, the cell value will always be an\n[ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) formatted date.\n\nThe date format string follows the moment.js structure documented\n[here](https://momentjs.com/docs/#/parsing/string-format/)\n\n**Field options**\n```js\n{\n    dateFormat: {\n        name: 'local' | 'friendly' | 'us' | 'european' | 'iso',\n        format: string,\n    }\n}\n```\n\n**Cell read format**\n```js\nstring\n```\n\n**Cell write format**\n```js\nDate | string\n```\n\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 374,
                                    "character": 8
                                }
                            ],
                            "defaultValue": "\"date\""
                        },
                        {
                            "id": 605,
                            "name": "DATE_TIME",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A date field configured to also include a time.",
                                "text": "When reading from and writing to a date time field, the cell value will always be an\n[ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) formatted date time.\n\nThe date and time format strings follow the moment.js structure documented\n[here](https://momentjs.com/docs/#/parsing/string-format/)\n\n**Field options**\n```js\n{\n    dateFormat: {\n        name: 'local' | 'friendly' | 'us' | 'european' | 'iso',\n        format: string,\n    },\n    timeFormat: {\n        name: '12hour' | '24hour',\n        format: string,\n    },\n    timeZone: 'utc' | 'client',\n}\n```\n\n**Cell read format**\n```js\nstring\n```\n\n**Cell write format**\n```js\nDate | string\n```\n\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 410,
                                    "character": 13
                                }
                            ],
                            "defaultValue": "\"dateTime\""
                        },
                        {
                            "id": 618,
                            "name": "DURATION",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A duration of time in seconds.",
                                "text": "The `durationFormat` string follows the moment.js structure documented\n[here](https://momentjs.com/docs/#/parsing/string-format/).\n\n**Field options**\n```js\n{\n    durationFormat: string,\n}\n```\n\n**Cell read format**\n```js\nnumber\n```\n\n**Cell write format**\n```js\nnumber\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 748,
                                    "character": 12
                                }
                            ],
                            "defaultValue": "\"duration\""
                        },
                        {
                            "id": 593,
                            "name": "EMAIL",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A valid email address (e.g. andrew@example.com).",
                                "text": "**Field options**\n\nn/a\n\n**Cell read format**\n```js\nstring\n```\n\n**Cell write format**\n```js\nstring\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 54,
                                    "character": 9
                                }
                            ],
                            "defaultValue": "\"email\""
                        },
                        {
                            "id": 609,
                            "name": "FORMULA",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Compute a value in each record based on other fields in the same record.",
                                "text": "**Field options**\n```js\n{\n    // false if the formula contains an error\n    isValid: boolean,\n    // the other fields in the record that are used in the formula\n    referencedFieldIds: Array<FieldId>,\n    // the resulting field type and options returned by the formula\n    result: {\n        // the field type of the formula result\n        type: string,\n        // that types options\n        options?: any,\n    },\n}\n```\n\n**Cell read format**\n\nCheck `options.result` to know the resulting field type.\n```js\nany\n```\n\n**Cell write format**\n\nn/a\n\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 551,
                                    "character": 11
                                }
                            ],
                            "defaultValue": "\"formula\""
                        },
                        {
                            "id": 619,
                            "name": "LAST_MODIFIED_TIME",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Shows the date and time that a record was most recently modified in any editable field or\njust in specific editable fields.",
                                "text": "When reading from a \"Last modified time\" field, the cell value will always be an\n[ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) formatted date time\n\n**Field options**\n```js\n{\n    // false if the formula contains an error\n    isValid: boolean,\n    // the fields to check the last modified time of\n    referencedFieldIds: Array<FieldId>,\n    // the cell value result type\n    result: {\n        type: 'date' | 'dateTime',\n        // See DATE and DATE_TIME for detailed field options\n        options: DateOrDateTimeFieldOptions,\n    },\n}\n```\n\n**Cell read format**\n```js\nstring\n```\n\n**Cell write format**\n\nn/a\n\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 782,
                                    "character": 22
                                }
                            ],
                            "defaultValue": "\"lastModifiedTime\""
                        },
                        {
                            "id": 595,
                            "name": "MULTILINE_TEXT",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A long text field that can span multiple lines. May contain \"mention tokens\",\ne.g. `<airtable:mention id=\"menE1i9oBaGX3DseR\">@Alex</airtable:mention>`",
                                "text": "**Field options**\n\nn/a\n\n**Cell read format**\n```js\nstring\n```\n\n**Cell write format**\n```js\nstring\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 91,
                                    "character": 18
                                }
                            ],
                            "defaultValue": "\"multilineText\""
                        },
                        {
                            "id": 607,
                            "name": "MULTIPLE_ATTACHMENTS",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Attachments allow you to add images, documents, or other files which can then be viewed or downloaded.",
                                "text": "When updating an existing attachment cell value, the specified array will\noverwrite the current cell value. If you want to add a new attachment without\ndeleting the current attachments, you can spread the current cell value like so:\n```js\nconst newAttachmentUrl = 'example.com/cute-cats.jpeg';\nmyTable.updateRecordAsync(myRecord, {\n    'myAttachmentField': [\n        ...myRecord.getCellValue('myAttachmentField'),\n        { url: newAttachmentUrl }\n    ]\n})\n```\n\nSimilarly, you can clear the current cell value by passing an empty array, or\nremove specific attachments by passing a filtered array of the current cell\nvalue.\n\nNote: when you pass an existing attachment, you must pass the full attachment\nobject. New attachments only require the `url` property.\n\n**Field options**\n\nn/a\n\n**Cell read format**\n```js\nArray<{\n    // unique attachment id\n    id: string,\n    // url, e.g. \"https://dl.airtable.com/foo.jpg\"\n    url: string,\n    // filename, e.g. \"foo.jpg\"\n    filename: string,\n    // file size, in bytes\n    size?: number,\n    // content type, e.g. \"image/jpeg\"\n    type?: string,\n    // thumbnails if available\n    thumbnails?: {\n        small?: {\n            url: string,\n            width: number,\n            height: number,\n        },\n        large?: {\n            url: string,\n            width: number,\n            height: number,\n        },\n        full?: {\n            url: string,\n            width: number,\n            height: number,\n        },\n    },\n}>\n```\n\n**Cell write format**\n```js\nArray<{ url: string }>\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 489,
                                    "character": 24
                                }
                            ],
                            "defaultValue": "\"multipleAttachments\""
                        },
                        {
                            "id": 602,
                            "name": "MULTIPLE_COLLABORATORS",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A collaborator field lets you add collaborators to your records. Collaborators can optionally\nbe notified when they're added. A multiple collaborator field has been configured to\nreference any number of collaborators.",
                                "text": "Similar to MULTIPLE_ATTACHMENTS and MULTIPLE_COLLABORATORS, this array-type field\nwill override the current cell value when being updated. Be sure to spread the current\ncell value if you want to keep the currently selected collaborators.\n\n**Field Options**\n```js\n{\n    choices: Array<{\n        id: string,\n        email: string,\n        name?: string,\n        profilePicUrl?: string,\n    }>,\n}\n```\n\n**Cell read format**\n```js\nArray<{\n    id: string,\n    email: string,\n    name?: string,\n    profilePicUrl?: string,\n}>\n```\nThe currently selected collaborators.\n\n**Cell write format**\n```js\nArray<{ id: string }>\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 293,
                                    "character": 26
                                }
                            ],
                            "defaultValue": "\"multipleCollaborators\""
                        },
                        {
                            "id": 613,
                            "name": "MULTIPLE_LOOKUP_VALUES",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Lookup a field on linked records.",
                                "text": "**Field options**\n\nUNSTABLE\n\n**Cell read format**\n\nUNSTABLE\n\n**Cell write format**\n\nn/a\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 655,
                                    "character": 26
                                }
                            ],
                            "defaultValue": "\"multipleLookupValues\""
                        },
                        {
                            "id": 603,
                            "name": "MULTIPLE_RECORD_LINKS",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Link to another record.",
                                "text": "When updating an existing linked record cell value, the specified array will\noverwrite the current cell value. If you want to add a new linked record without\ndeleting the current linked records, you can spread the current cell value like so:\n```js\nconst newForeginRecordIdToLink = 'recXXXXXXXXXXXXXX';\nmyTable.updateRecordAsync(myRecord, {\n    'myLinkedRecordField': [\n        ...myRecord.getCellValue('myLinkedRecordField'),\n        { id: newForeignRecordIdToLink }\n    ]\n})\n```\n\nSimilarly, you can clear the current cell value by passing an empty array, or\nremove specific linked records by passing a filtered array of the current cell\nvalue.\n\n**Field options**\n```js\n{\n    // The ID of the table this field links to\n    linkedTableId: TableId,\n    // The ID of the field in the linked table that links back\n    // to this one\n    inverseLinkFieldId?: FieldId,\n    // The ID of the view in the linked table to use when showing\n    // a list of records to select from\n    viewIdForRecordSelection?: ViewId,\n}\n```\n\n**Cell read format**\n```js\nArray<{\n    id: RecordId,\n    name: string,\n}>\n```\nThe currently linked record IDs and their primary cell values from the linked table.\n\n**Cell write format**\n```js\nArray<{ id: RecordId }>\n```\n\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 343,
                                    "character": 25
                                }
                            ],
                            "defaultValue": "\"multipleRecordLinks\""
                        },
                        {
                            "id": 600,
                            "name": "MULTIPLE_SELECTS",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Multiple select allows you to select one or more predefined options from a dropdown",
                                "text": "Similar to MULTIPLE_ATTACHMENTS and MULTIPLE_COLLABORATORS, this array-type field\nwill override the current cell value when being updated. Be sure to spread the current\ncell value if you want to keep the currently selected choices.\n\n**Field Options**\n```js\n{\n    choices: Array<{\n        id: string,\n        name: string,\n        color?: Color,\n    }>,\n}\n```\n\n**Cell read format**\n```js\nArray<{\n    id: string,\n    name: string,\n    color?: Color,\n}>\n```\nThe currently selected choices.\n\n**Cell write format**\n```js\nArray<{id: string} | {name: string}>\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 220,
                                    "character": 20
                                }
                            ],
                            "defaultValue": "\"multipleSelects\""
                        },
                        {
                            "id": 596,
                            "name": "NUMBER",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A number.",
                                "text": "The `precision` option indicates the number of digits shown to the right of\nthe decimal point for this field.\n\n**Field options**\n```js\n{ precision: number }\n```\n\n**Cell read format**\n```js\nnumber\n```\n\n**Cell write format**\n```js\nnumber\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 113,
                                    "character": 10
                                }
                            ],
                            "defaultValue": "\"number\""
                        },
                        {
                            "id": 597,
                            "name": "PERCENT",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A percentage.",
                                "text": "When reading from and writing to a \"Percent\" field, the cell value is a decimal.\nFor example, 0 is 0%, 0.5 is 50%, and 1 is 100%.\n\n**Field options**\n```js\n{ precision: number }\n```\n\n**Cell read format**\n```js\nnumber\n```\n\n**Cell write format**\n```js\nnumber\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 135,
                                    "character": 11
                                }
                            ],
                            "defaultValue": "\"percent\""
                        },
                        {
                            "id": 606,
                            "name": "PHONE_NUMBER",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A telephone number (e.g. (415) 555-9876).",
                                "text": "**Cell read format**\n```js\nstring\n```\n\n**Field options**\nNone\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 422,
                                    "character": 16
                                }
                            ],
                            "defaultValue": "\"phoneNumber\""
                        },
                        {
                            "id": 616,
                            "name": "RATING",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A rating (e.g. stars out of 5)",
                                "text": "**Field options**\n```js\n{\n    // the icon name used to display the rating\n    icon: string,\n    // the maximum value for the rating\n    max: number,\n    // the color of selected icons\n    color: Color,\n}\n```\n\n**Cell read format**\n```js\nnumber\n```\n\n**Cell write format**\n\nn/a\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 719,
                                    "character": 10
                                }
                            ],
                            "defaultValue": "\"rating\""
                        },
                        {
                            "id": 611,
                            "name": "ROLLUP",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A rollup allows you to summarize data from records that are linked to this table.",
                                "text": "**Field options**\n```js\n{\n    // false if the formula contains an error\n    isValid: boolean,\n    // the linked record field in this table that this field is\n    // summarizing.\n    recordLinkFieldId: FieldId,\n    // the field id in the linked table that this field is summarizing.\n    fieldIdInLinkedTable: FieldId,\n    // the other fields in the record that are used in the formula\n    referencedFieldIds: Array<FieldId>,\n    // the resulting field type and options returned by the formula\n    result: {\n        // the field type of the formula result\n        type: string,\n        // that types options\n        options?: any,\n    },\n}\n```\n\n**Cell read format**\nCheck `options.result` to know the resulting field type.\n```js\nany\n```\n\n**Cell write format**\n\nn/a\n\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 615,
                                    "character": 10
                                }
                            ],
                            "defaultValue": "\"rollup\""
                        },
                        {
                            "id": 601,
                            "name": "SINGLE_COLLABORATOR",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A collaborator field lets you add collaborators to your records. Collaborators can optionally\nbe notified when they're added. A single collaborator field has been configured to only\nreference one collaborator.",
                                "text": "**Field Options**\n```js\n{\n    choices: Array<{\n        id: string,\n        email: string,\n        name?: string,\n        profilePicUrl?: string,\n    }>,\n}\n```\n\n**Cell read format**\n```js\n{\n    id: string,\n    email: string,\n    name?: string,\n    profilePicUrl?: string,\n}\n```\nThe currently selected collaborator.\n\n**Cell write format**\n```js\n{ id: string }\n```\n\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 255,
                                    "character": 23
                                }
                            ],
                            "defaultValue": "\"singleCollaborator\""
                        },
                        {
                            "id": 592,
                            "name": "SINGLE_LINE_TEXT",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A single line of text.",
                                "text": "**Field options**\n\nn/a\n\n**Cell read format**\n```js\nstring\n```\n\n**Cell write format**\n```js\nstring\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 36,
                                    "character": 20
                                }
                            ],
                            "defaultValue": "\"singleLineText\""
                        },
                        {
                            "id": 599,
                            "name": "SINGLE_SELECT",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Single select allows you to select a single option from predefined options in a dropdown.",
                                "text": "**Field options**\n```js\n{\n    choices: Array<{\n        id: string,\n        name: string,\n        color?: Color,\n    }>,\n}\n```\n\n**Cell read format**\n```js\n{\n    id: string,\n    name: string,\n    color?: Color\n}\n```\n\n**Cell write format**\n```js\n{ id: string } | { name: string }\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 186,
                                    "character": 17
                                }
                            ],
                            "defaultValue": "\"singleSelect\""
                        },
                        {
                            "id": 594,
                            "name": "URL",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A valid URL (e.g. airtable.com or https://airtable.com/universe).",
                                "text": "**Field options**\n\nn/a\n\n**Cell read format**\n```js\nstring\n```\n\n**Cell write format**\n```js\nstring\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 72,
                                    "character": 7
                                }
                            ],
                            "defaultValue": "\"url\""
                        }
                    ],
                    "groups": [
                        {
                            "title": "Enumeration members",
                            "kind": 16,
                            "children": [
                                614,
                                615,
                                608,
                                612,
                                610,
                                598,
                                604,
                                605,
                                618,
                                593,
                                609,
                                619,
                                595,
                                607,
                                602,
                                613,
                                603,
                                600,
                                596,
                                597,
                                606,
                                616,
                                611,
                                601,
                                592,
                                599,
                                594
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/types/field.ts",
                            "line": 18,
                            "character": 21
                        }
                    ]
                },
                {
                    "id": 1340,
                    "name": "Field",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Model class representing a field in a table.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {base} from '@airtable/blocks';\n\nconst table = base.getTableByName('Table 1');\nconst field = table.getFieldByName('Name');\nconsole.log('The type of this field is', field.type);\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "models/Field\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 1370,
                            "name": "availableAggregators",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A list of available aggregators given this field's configuration.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst fieldAggregators = myField.availableAggregators;\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 1371,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "A list of available aggregators given this field's configuration.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst fieldAggregators = myField.availableAggregators;\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Aggregator",
                                                "id": 1312
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/field.ts",
                                    "line": 195,
                                    "character": 28
                                }
                            ]
                        },
                        {
                            "id": 1368,
                            "name": "description",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The description of the field, if it has one. Can be watched.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myField.description);\n// => 'This is my field'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 1369,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The description of the field, if it has one. Can be watched.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myField.description);\n// => 'This is my field'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/field.ts",
                                    "line": 184,
                                    "character": 19
                                }
                            ]
                        },
                        {
                            "id": 1387,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 1388,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.id",
                                        "id": 1088
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.id",
                                "id": 1088
                            }
                        },
                        {
                            "id": 1364,
                            "name": "isComputed",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if this field is computed, `false` otherwise. A field is\n\"computed\" if it's value is not set by user input (e.g. autoNumber, formula,\netc.). Can be watched",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(mySingleLineTextField.isComputed);\n// => false\nconsole.log(myAutoNumberField.isComputed);\n// => true\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 1365,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if this field is computed, `false` otherwise. A field is\n\"computed\" if it's value is not set by user input (e.g. autoNumber, formula,\netc.). Can be watched",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(mySingleLineTextField.isComputed);\n// => false\nconsole.log(myAutoNumberField.isComputed);\n// => true\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/field.ts",
                                    "line": 163,
                                    "character": 18
                                }
                            ]
                        },
                        {
                            "id": 1391,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 1392,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.isDeleted",
                                        "id": 1094
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.isDeleted",
                                "id": 1094
                            }
                        },
                        {
                            "id": 1366,
                            "name": "isPrimaryField",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if this field is its parent table's primary field, `false` otherwise.\nShould never change because the primary field of a table cannot change."
                            },
                            "getSignature": [
                                {
                                    "id": 1367,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if this field is its parent table's primary field, `false` otherwise.\nShould never change because the primary field of a table cannot change."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/field.ts",
                                    "line": 171,
                                    "character": 22
                                }
                            ]
                        },
                        {
                            "id": 1355,
                            "name": "name",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The name of the field. Can be watched.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myField.name);\n// => 'Name'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 1356,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The name of the field. Can be watched.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myField.name);\n// => 'Name'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/field.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ]
                        },
                        {
                            "id": 1359,
                            "name": "options",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The configuration options of the field. The structure of the field's\noptions depend on the field's type. Can be watched.",
                                "tags": [
                                    {
                                        "tag": "see",
                                        "text": "{@link FieldType}"
                                    },
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {FieldType} from '@airtable/blocks/models';\n\nif (myField.type === FieldType.CURRENCY) {\n    console.log(myField.options.symbol);\n    // => '$'\n}\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 1360,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The configuration options of the field. The structure of the field's\noptions depend on the field's type. Can be watched.",
                                        "tags": [
                                            {
                                                "tag": "see",
                                                "text": "{@link FieldType}"
                                            },
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {FieldType} from '@airtable/blocks/models';\n\nif (myField.type === FieldType.CURRENCY) {\n    console.log(myField.options.symbol);\n    // => '$'\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 1361,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {},
                                                    "indexSignature": [
                                                        {
                                                            "id": 1362,
                                                            "name": "__index",
                                                            "kind": 8192,
                                                            "kindString": "Index signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 1363,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "string"
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/models/field.ts",
                                                            "line": 137,
                                                            "character": 18
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/field.ts",
                                    "line": 137,
                                    "character": 15
                                }
                            ]
                        },
                        {
                            "id": 1357,
                            "name": "type",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The type of the field. Can be watched.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myField.type);\n// => 'singleLineText'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 1358,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The type of the field. Can be watched.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myField.type);\n// => 'singleLineText'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "FieldType",
                                        "id": 591
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/field.ts",
                                    "line": 104,
                                    "character": 12
                                }
                            ]
                        },
                        {
                            "id": 1375,
                            "name": "convertStringToCellValue",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Attempt to parse a given string and return a valid cell value for the field's current config.\nReturns `null` if unable to parse the given string.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst inputString = '42';\nconst cellValue = myNumberField.convertStringToCellValue(inputString);\nconsole.log(cellValue === 42);\n// => true\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1376,
                                    "name": "convertStringToCellValue",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Attempt to parse a given string and return a valid cell value for the field's current config.\nReturns `null` if unable to parse the given string.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst inputString = '42';\nconst cellValue = myNumberField.convertStringToCellValue(inputString);\nconsole.log(cellValue === 42);\n// => true\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1377,
                                            "name": "string",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The string to parse."
                                            },
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "unknown"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/field.ts",
                                    "line": 246,
                                    "character": 28
                                }
                            ]
                        },
                        {
                            "id": 1372,
                            "name": "isAggregatorAvailable",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Checks if the given aggregator is available for this field.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {aggregators} from '@airtable/blocks/models';\nconst aggregator = aggregators.totalAttachmentSize;\n\n// Using an aggregator object\nconsole.log(myAttachmentField.isAggregatorAvailable(aggregator));\n// => true\n\n// Using an aggregator key\nconsole.log(myTextField.isAggregatorAvailable('totalAttachmentSize'));\n// => false\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1373,
                                    "name": "isAggregatorAvailable",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Checks if the given aggregator is available for this field.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {aggregators} from '@airtable/blocks/models';\nconst aggregator = aggregators.totalAttachmentSize;\n\n// Using an aggregator object\nconsole.log(myAttachmentField.isAggregatorAvailable(aggregator));\n// => true\n\n// Using an aggregator key\nconsole.log(myTextField.isAggregatorAvailable('totalAttachmentSize'));\n// => false\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1374,
                                            "name": "aggregator",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The aggregator object or aggregator key."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Aggregator",
                                                        "id": 1312
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "AggregatorKey",
                                                        "id": 585
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/field.ts",
                                    "line": 223,
                                    "character": 25
                                }
                            ]
                        },
                        {
                            "id": 1397,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A string representation of the model for use in debugging."
                            },
                            "signatures": [
                                {
                                    "id": 1398,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "A string representation of the model for use in debugging."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.toString",
                                        "id": 1100
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.toString",
                                "id": 1100
                            }
                        },
                        {
                            "id": 1425,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatch keys watched with `.watch`.",
                                "text": "Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"
                            },
                            "signatures": [
                                {
                                    "id": 1426,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatch keys watched with `.watch`.",
                                        "text": "Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 1427,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to unwatch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableFieldKey",
                                                        "id": 1441
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableFieldKey",
                                                                "id": 1441
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 1428,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the function passed to `.watch` for these keys"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 1429,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 1430,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 1431,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 1432,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableFieldKey",
                                                                        "id": 1441
                                                                    }
                                                                },
                                                                {
                                                                    "id": 1433,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 113,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 1434,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the context that was passed to `.watch` for this `callback`\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableFieldKey",
                                                "id": 1441
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 1060
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 111,
                                    "character": 11
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 1060
                            }
                        },
                        {
                            "id": 1415,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get notified of changes to the model.",
                                "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"
                            },
                            "signatures": [
                                {
                                    "id": 1416,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get notified of changes to the model.",
                                        "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 1417,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to watch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableFieldKey",
                                                        "id": 1441
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableFieldKey",
                                                                "id": 1441
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 1418,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "a function to call when those keys change"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 1419,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 1420,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 1421,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 1422,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableFieldKey",
                                                                        "id": 1441
                                                                    }
                                                                },
                                                                {
                                                                    "id": 1423,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 66,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 1424,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "an optional context for `this` in `callback`.\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableFieldKey",
                                                "id": 1441
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 1050
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 64,
                                    "character": 9
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 1050
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [1370, 1368, 1387, 1364, 1391, 1366, 1355, 1359, 1357]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [1375, 1372, 1397, 1425, 1415]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/field.ts",
                            "line": 44,
                            "character": 11
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AbstractModel",
                            "id": 1075,
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "FieldData"
                                },
                                {
                                    "type": "reference",
                                    "name": "WatchableFieldKey",
                                    "id": 1441
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 635,
                    "name": "FieldId",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/types/field.ts",
                            "line": 3,
                            "character": 19
                        }
                    ],
                    "type": {
                        "type": "intrinsic",
                        "name": "string"
                    }
                },
                {
                    "id": 1441,
                    "name": "WatchableFieldKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "All the watchable keys in a field.\n- `name`\n- `type`\n- `options`\n- `isComputed`\n- `description`"
                    },
                    "sources": [
                        {
                            "fileName": "src/models/field.ts",
                            "line": 29,
                            "character": 29
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "name"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "type"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "options"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "isComputed"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "description"
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Enumerations",
                    "kind": 4,
                    "children": [591]
                },
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [1340]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [635, 1441]
                }
            ],
            "sources": [
                {
                    "fileName": "src/types/field.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 638,
            "name": "@airtable/blocks/models: Record",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/types/record.ts",
            "comment": {},
            "children": [
                {
                    "id": 2296,
                    "name": "Record",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Model class representing a record in a table.",
                        "text": "Do not instantiate. You can get instances of this class by calling `table.selectRecords`\nor `view.selectRecords` and using the resulting {@link RecordQueryResult}.\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "models/Record\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 2346,
                            "name": "commentCount",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The number of comments on this record.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst commentCount = myRecord.commentCount;\nconst isSingular = commentCount === 1;\nconsole.log(\n    `This record has ${commentCount} comment${isSingular ? '' : 's'}`\n);\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 2347,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The number of comments on this record.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst commentCount = myRecord.commentCount;\nconst isSingular = commentCount === 1;\nconsole.log(\n    `This record has ${commentCount} comment${isSingular ? '' : 's'}`\n);\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record.ts",
                                    "line": 360,
                                    "character": 20
                                }
                            ]
                        },
                        {
                            "id": 2348,
                            "name": "createdTime",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The created time of this record.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(`\n    This record was created at ${myRecord.createdTime.toISOString()}\n`);\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 2349,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The created time of this record.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(`\n    This record was created at ${myRecord.createdTime.toISOString()}\n`);\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Date"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record.ts",
                                    "line": 373,
                                    "character": 19
                                }
                            ]
                        },
                        {
                            "id": 2358,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 2359,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.id",
                                        "id": 1088
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.id",
                                "id": 1088
                            }
                        },
                        {
                            "id": 2362,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 2363,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.isDeleted",
                                        "id": 1094
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.isDeleted",
                                "id": 1094
                            }
                        },
                        {
                            "id": 2342,
                            "name": "primaryCellValue",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The primary cell value in this record.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myRecord.primaryCellValue);\n// => 'primary cell value'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 2343,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The primary cell value in this record.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myRecord.primaryCellValue);\n// => 'primary cell value'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "unknown"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record.ts",
                                    "line": 333,
                                    "character": 24
                                }
                            ]
                        },
                        {
                            "id": 2344,
                            "name": "primaryCellValueAsString",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The primary cell value in this record, formatted as a `string`.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myRecord.primaryCellValueAsString);\n// => '42'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 2345,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The primary cell value in this record, formatted as a `string`.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myRecord.primaryCellValueAsString);\n// => '42'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record.ts",
                                    "line": 345,
                                    "character": 32
                                }
                            ]
                        },
                        {
                            "id": 2340,
                            "name": "url",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The URL for the record. You can visit this URL in the browser to be taken to the record in the Airtable UI.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myRecord.url);\n// => 'https://airtable.com/tblxxxxxxxxxxxxxx/recxxxxxxxxxxxxxx'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 2341,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The URL for the record. You can visit this URL in the browser to be taken to the record in the Airtable UI.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myRecord.url);\n// => 'https://airtable.com/tblxxxxxxxxxxxxxx/recxxxxxxxxxxxxxx'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record.ts",
                                    "line": 318,
                                    "character": 11
                                }
                            ]
                        },
                        {
                            "id": 2326,
                            "name": "getAttachmentClientUrlFromCellValueUrl",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Returns a URL that is suitable for rendering an attachment on the current client.\nThe URL that is returned will only work for the current user.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport React from 'react';\n\nfunction RecordAttachments(props) {\n    const {record, attachmentField} = props;\n    const attachmentCellValue = record.getCellValue(attachmentField);\n    if (attachmentCellValue === null) {\n        return null;\n    }\n    return (\n        <div>\n            {attachmentCellValue.map(attachmentObj => {\n                const clientUrl =\n                    record.getAttachmentClientUrlFromCellValueUrl(\n                        attachmentObj.id,\n                        attachmentObj.url\n                    );\n                return (\n                    <img key={attachmentObj.id} src={clientUrl} width={200} />\n                );\n            })}\n        </div>\n    );\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2327,
                                    "name": "getAttachmentClientUrlFromCellValueUrl",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Returns a URL that is suitable for rendering an attachment on the current client.\nThe URL that is returned will only work for the current user.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport React from 'react';\n\nfunction RecordAttachments(props) {\n    const {record, attachmentField} = props;\n    const attachmentCellValue = record.getCellValue(attachmentField);\n    if (attachmentCellValue === null) {\n        return null;\n    }\n    return (\n        <div>\n            {attachmentCellValue.map(attachmentObj => {\n                const clientUrl =\n                    record.getAttachmentClientUrlFromCellValueUrl(\n                        attachmentObj.id,\n                        attachmentObj.url\n                    );\n                return (\n                    <img key={attachmentObj.id} src={clientUrl} width={200} />\n                );\n            })}\n        </div>\n    );\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2328,
                                            "name": "attachmentId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The ID of the attachment."
                                            },
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        },
                                        {
                                            "id": 2329,
                                            "name": "attachmentUrl",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The attachment's URL (which is not suitable for rendering on the client)."
                                            },
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record.ts",
                                    "line": 257,
                                    "character": 42
                                }
                            ]
                        },
                        {
                            "id": 2320,
                            "name": "getCellValue",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Gets the cell value of the given field for this record.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst cellValue = myRecord.getCellValue(mySingleLineTextField);\nconsole.log(cellValue);\n// => 'cell value'\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2321,
                                    "name": "getCellValue",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Gets the cell value of the given field for this record.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst cellValue = myRecord.getCellValue(mySingleLineTextField);\nconsole.log(cellValue);\n// => 'cell value'\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2322,
                                            "name": "fieldOrFieldIdOrFieldName",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The field (or field ID or field name) whose cell value you'd like to get."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Field",
                                                        "id": 1340
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "FieldId",
                                                        "id": 635
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "string"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "unknown"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record.ts",
                                    "line": 137,
                                    "character": 16
                                }
                            ]
                        },
                        {
                            "id": 2323,
                            "name": "getCellValueAsString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Gets the cell value of the given field for this record, formatted as a `string`.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst stringValue = myRecord.getCellValueAsString(myNumberField);\nconsole.log(stringValue);\n// => '42'\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2324,
                                    "name": "getCellValueAsString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Gets the cell value of the given field for this record, formatted as a `string`.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst stringValue = myRecord.getCellValueAsString(myNumberField);\nconsole.log(stringValue);\n// => '42'\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2325,
                                            "name": "fieldOrFieldIdOrFieldName",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The field (or field ID or field name) whose cell value you'd like to get."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Field",
                                                        "id": 1340
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "FieldId",
                                                        "id": 635
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "string"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record.ts",
                                    "line": 205,
                                    "character": 24
                                }
                            ]
                        },
                        {
                            "id": 2333,
                            "name": "getColorHexInView",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Gets the CSS hex string for this record in a given view, or null if the record has no color\nin that view.",
                                "text": "Can be watched with the 'colorInView:${ViewId}' key.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2334,
                                    "name": "getColorHexInView",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Gets the CSS hex string for this record in a given view, or null if the record has no color\nin that view.",
                                        "text": "Can be watched with the 'colorInView:${ViewId}' key.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2335,
                                            "name": "viewOrViewIdOrViewName",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The view (or view ID or view name) to use for record coloring.\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "View",
                                                        "id": 1973
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "string"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record.ts",
                                    "line": 287,
                                    "character": 21
                                }
                            ]
                        },
                        {
                            "id": 2330,
                            "name": "getColorInView",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Gets the color of this record in a given view, or null if the record has no color in that\nview.",
                                "text": "Can be watched with the 'colorInView:${ViewId}' key.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2331,
                                    "name": "getColorInView",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Gets the color of this record in a given view, or null if the record has no color in that\nview.",
                                        "text": "Can be watched with the 'colorInView:${ViewId}' key.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2332,
                                            "name": "viewOrViewIdOrViewName",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The view (or view ID or view name) to use for record coloring.\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "View",
                                                        "id": 1973
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ViewId",
                                                        "id": 663
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "string"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Color",
                                                "id": 556
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record.ts",
                                    "line": 274,
                                    "character": 18
                                }
                            ]
                        },
                        {
                            "id": 2336,
                            "name": "selectLinkedRecordsFromCell",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Select records referenced in a `multipleRecordLinks` cell value. Returns a query result\ncontaining the records in the given `multipleRecordLinks` field.\nSee {@link RecordQueryResult} for more."
                            },
                            "signatures": [
                                {
                                    "id": 2337,
                                    "name": "selectLinkedRecordsFromCell",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Select records referenced in a `multipleRecordLinks` cell value. Returns a query result\ncontaining the records in the given `multipleRecordLinks` field.\nSee {@link RecordQueryResult} for more."
                                    },
                                    "parameters": [
                                        {
                                            "id": 2338,
                                            "name": "fieldOrFieldIdOrFieldName",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The `multipleRecordLinks` field (or field ID or field name) to use."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Field",
                                                        "id": 1340
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "FieldId",
                                                        "id": 635
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "string"
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2339,
                                            "name": "opts",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "Options for the query, such as sorts and fields.\n"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "RecordQueryResultOpts",
                                                "id": 14904
                                            },
                                            "defaultValue": " {}"
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "LinkedRecordsQueryResult",
                                        "id": 2063
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record.ts",
                                    "line": 302,
                                    "character": 31
                                }
                            ]
                        },
                        {
                            "id": 2368,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A string representation of the model for use in debugging."
                            },
                            "signatures": [
                                {
                                    "id": 2369,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "A string representation of the model for use in debugging."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.toString",
                                        "id": 1100
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.toString",
                                "id": 1100
                            }
                        },
                        {
                            "id": 2396,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatch keys watched with `.watch`.",
                                "text": "Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2397,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatch keys watched with `.watch`.",
                                        "text": "Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2398,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to unwatch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableRecordKey",
                                                        "id": 2414
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableRecordKey",
                                                                "id": 2414
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2399,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the function passed to `.watch` for these keys"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 2400,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 2401,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 2402,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2403,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableRecordKey",
                                                                        "id": 2414
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2404,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 113,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 2405,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the context that was passed to `.watch` for this `callback`\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableRecordKey",
                                                "id": 2414
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 1060
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 111,
                                    "character": 11
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 1060
                            }
                        },
                        {
                            "id": 2386,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get notified of changes to the model.",
                                "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2387,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get notified of changes to the model.",
                                        "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2388,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to watch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableRecordKey",
                                                        "id": 2414
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableRecordKey",
                                                                "id": 2414
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2389,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "a function to call when those keys change"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 2390,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 2391,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 2392,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2393,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableRecordKey",
                                                                        "id": 2414
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2394,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 66,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 2395,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "an optional context for `this` in `callback`.\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableRecordKey",
                                                "id": 2414
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 1050
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 64,
                                    "character": 9
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 1050
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [2346, 2348, 2358, 2362, 2342, 2344, 2340]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [2326, 2320, 2323, 2333, 2330, 2336, 2368, 2396, 2386]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/record.ts",
                            "line": 50,
                            "character": 12
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AbstractModel",
                            "id": 1075,
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "RecordData"
                                },
                                {
                                    "type": "reference",
                                    "name": "WatchableRecordKey",
                                    "id": 2414
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 645,
                    "name": "RecordDef",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/types/record.ts",
                            "line": 9,
                            "character": 21
                        }
                    ],
                    "type": {
                        "type": "reference",
                        "name": "ObjectMap",
                        "typeArguments": [
                            {
                                "type": "reference",
                                "name": "FieldId",
                                "id": 635
                            },
                            {
                                "type": "intrinsic",
                                "name": "unknown"
                            }
                        ]
                    }
                },
                {
                    "id": 644,
                    "name": "RecordId",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/types/record.ts",
                            "line": 6,
                            "character": 20
                        }
                    ],
                    "type": {
                        "type": "intrinsic",
                        "name": "string"
                    }
                },
                {
                    "id": 2414,
                    "name": "WatchableRecordKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Any key within record that can be watched:\n- `'primaryCellValue'`\n- `'commentCount'`\n- `'cellValues'`\n- `'cellValueInField:' + someFieldId`\n- `'colorInView:' + someViewId`"
                    },
                    "sources": [
                        {
                            "fileName": "src/models/record.ts",
                            "line": 40,
                            "character": 23
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "stringLiteral",
                                        "value": "primaryCellValue"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "commentCount"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "cellValues"
                                    }
                                ]
                            },
                            {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [2296]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [645, 644, 2414]
                }
            ],
            "sources": [
                {
                    "fileName": "src/types/record.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 1514,
            "name": "@airtable/blocks/models: Record Coloring",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/models/record_coloring.ts",
            "comment": {},
            "children": [
                {
                    "id": 1517,
                    "name": "BySelectFieldRecordColorMode",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {},
                    "children": [
                        {
                            "id": 1519,
                            "name": "selectField",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/models/record_coloring.ts",
                                    "line": 44,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Field",
                                "id": 1340
                            }
                        },
                        {
                            "id": 1518,
                            "name": "type",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/models/record_coloring.ts",
                                    "line": 42,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "bySelectField"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [1519, 1518]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/record_coloring.ts",
                            "line": 40,
                            "character": 38
                        }
                    ]
                },
                {
                    "id": 1520,
                    "name": "ByViewRecordColorMode",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {},
                    "children": [
                        {
                            "id": 1521,
                            "name": "type",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/models/record_coloring.ts",
                                    "line": 50,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "byView"
                            }
                        },
                        {
                            "id": 1522,
                            "name": "view",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/models/record_coloring.ts",
                                    "line": 52,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "View",
                                "id": 1973
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [1521, 1522]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/record_coloring.ts",
                            "line": 48,
                            "character": 31
                        }
                    ]
                },
                {
                    "id": 1515,
                    "name": "NoRecordColorMode",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {},
                    "children": [
                        {
                            "id": 1516,
                            "name": "type",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/models/record_coloring.ts",
                                    "line": 36,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "none"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [1516]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/record_coloring.ts",
                            "line": 34,
                            "character": 27
                        }
                    ]
                },
                {
                    "id": 1528,
                    "name": "RecordColorMode",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/models/record_coloring.ts",
                            "line": 56,
                            "character": 27
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "reference",
                                "name": "NoRecordColorMode",
                                "id": 1515
                            },
                            {
                                "type": "reference",
                                "name": "BySelectFieldRecordColorMode",
                                "id": 1517
                            },
                            {
                                "type": "reference",
                                "name": "ByViewRecordColorMode",
                                "id": 1520
                            }
                        ]
                    }
                },
                {
                    "id": 1529,
                    "name": "modes",
                    "kind": 2097152,
                    "kindString": "Object literal",
                    "flags": {
                        "isExported": true,
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "Record coloring config creators.",
                        "tags": [
                            {
                                "tag": "alias",
                                "text": "recordColoring.modes"
                            },
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {recordColoring} from '@airtable/blocks/models';\nimport {useRecords} from '@airtable/blocks/ui';\n\n// no record coloring:\nconst recordColorMode = recordColoring.modes.none();\n// color by select field:\nconst recordColorMode = recordColoring.modes.bySelectField(someSelectField);\n// color from view:\nconst recordColorMode = recordColoring.modes.byView(someView);\n\n// with useRecords:\nconst queryResult = useRecords(table, { recordColorMode })\n\n// with a query result:\nconst queryResult = table.selectRecords({ recordColorMode });\n```\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 1532,
                            "name": "bySelectField",
                            "kind": 64,
                            "kindString": "Function",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Returns a {@link RecordColorMode} that colors records by the specified Select field.",
                                "tags": [
                                    {
                                        "tag": "alias",
                                        "text": "recordColoring.modes.bySelectField"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1533,
                                    "name": "bySelectField",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Returns a {@link RecordColorMode} that colors records by the specified Select field.",
                                        "tags": [
                                            {
                                                "tag": "alias",
                                                "text": "recordColoring.modes.bySelectField"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1534,
                                            "name": "selectField",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "\n"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "Field",
                                                "id": 1340
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "BySelectFieldRecordColorMode",
                                        "id": 1517
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_coloring.ts",
                                    "line": 101,
                                    "character": 17
                                }
                            ]
                        },
                        {
                            "id": 1535,
                            "name": "byView",
                            "kind": 64,
                            "kindString": "Function",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Returns a {@link RecordColorMode} that colors records by the specified View.",
                                "tags": [
                                    {
                                        "tag": "alias",
                                        "text": "recordColoring.modes.byView"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1536,
                                    "name": "byView",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Returns a {@link RecordColorMode} that colors records by the specified View.",
                                        "tags": [
                                            {
                                                "tag": "alias",
                                                "text": "recordColoring.modes.byView"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1537,
                                            "name": "view",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "\n"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "View",
                                                "id": 1973
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "ByViewRecordColorMode",
                                        "id": 1520
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_coloring.ts",
                                    "line": 113,
                                    "character": 10
                                }
                            ]
                        },
                        {
                            "id": 1530,
                            "name": "none",
                            "kind": 64,
                            "kindString": "Function",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Returns a {@link RecordColorMode} that represents no record coloring.",
                                "tags": [
                                    {
                                        "tag": "alias",
                                        "text": "recordColoring.modes.none\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1531,
                                    "name": "none",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Returns a {@link RecordColorMode} that represents no record coloring.",
                                        "tags": [
                                            {
                                                "tag": "alias",
                                                "text": "recordColoring.modes.none\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "NoRecordColorMode",
                                        "id": 1515
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_coloring.ts",
                                    "line": 90,
                                    "character": 8
                                }
                            ]
                        }
                    ],
                    "groups": [
                        {
                            "title": "Functions",
                            "kind": 64,
                            "children": [1532, 1535, 1530]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/record_coloring.ts",
                            "line": 84,
                            "character": 18
                        }
                    ],
                    "type": {
                        "type": "intrinsic",
                        "name": "object"
                    }
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [1517, 1520, 1515]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [1528]
                },
                {
                    "title": "Object literals",
                    "kind": 2097152,
                    "children": [1529]
                }
            ],
            "sources": [
                {
                    "fileName": "src/models/record_coloring.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 1643,
            "name": "@airtable/blocks/models: RecordQueryResult",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/models/table_or_view_query_result.ts",
            "comment": {},
            "children": [
                {
                    "id": 2063,
                    "name": "LinkedRecordsQueryResult",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Represents a set of records from a LinkedRecord cell value. See {@link RecordQueryResult} for main\ndocumentation.",
                        "text": "Do not instantiate. You can get instances of this class by calling\n`record.getLinkedRecordsFromCell`.\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "models/query results/LinkedRecordsQueryResult\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 2192,
                            "name": "DataType",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 2104,
                            "name": "fields",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The fields that were used to create this LinkedRecordsQueryResult."
                            },
                            "getSignature": [
                                {
                                    "id": 2105,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The fields that were used to create this LinkedRecordsQueryResult."
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Array",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Field",
                                                        "id": 1340
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.fields",
                                        "id": 14921
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/linked_records_query_result.ts",
                                    "line": 220,
                                    "character": 14
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "RecordQueryResult.fields",
                                "id": 14921
                            }
                        },
                        {
                            "id": 2253,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 2254,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.id",
                                        "id": 1088
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.id",
                                "id": 1088
                            }
                        },
                        {
                            "id": 2247,
                            "name": "isDataLoaded",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "getSignature": [
                                {
                                    "id": 2248,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.isDataLoaded",
                                        "id": 1168
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 91,
                                    "character": 20
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.isDataLoaded",
                                "id": 1168
                            }
                        },
                        {
                            "id": 2259,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 2260,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.isDeleted",
                                        "id": 1094
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.isDeleted",
                                "id": 1094
                            }
                        },
                        {
                            "id": 2096,
                            "name": "isValid",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Is the query result currently valid? This value always starts as 'true',\nbut can become false if the field config changes to link to a different\ntable or a type other than MULTIPLE_RECORD_LINKS. Once `isValid` has\nbecome false, it will never become true again. Many fields will throw on\nattempting to access them, and watches will no longer fire."
                            },
                            "getSignature": [
                                {
                                    "id": 2097,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Is the query result currently valid? This value always starts as 'true',\nbut can become false if the field config changes to link to a different\ntable or a type other than MULTIPLE_RECORD_LINKS. Once `isValid` has\nbecome false, it will never become true again. Many fields will throw on\nattempting to access them, and watches will no longer fire."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/linked_records_query_result.ts",
                                    "line": 164,
                                    "character": 15
                                }
                            ]
                        },
                        {
                            "id": 2100,
                            "name": "recordIds",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Ordered array of all the linked record ids. Watchable."
                            },
                            "getSignature": [
                                {
                                    "id": 2101,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Ordered array of all the linked record ids. Watchable."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.recordIds",
                                        "id": 14917
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/linked_records_query_result.ts",
                                    "line": 183,
                                    "character": 17
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "RecordQueryResult.recordIds",
                                "id": 14917
                            }
                        },
                        {
                            "id": 2102,
                            "name": "records",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Ordered array of all the linked records. Watchable."
                            },
                            "getSignature": [
                                {
                                    "id": 2103,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Ordered array of all the linked records. Watchable."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Record",
                                                "id": 2296
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.records",
                                        "id": 14949
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/linked_records_query_result.ts",
                                    "line": 203,
                                    "character": 15
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "RecordQueryResult.records",
                                "id": 14949
                            }
                        },
                        {
                            "id": 2216,
                            "name": "getRecordById",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get a specific record in the query result, or throws if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`."
                            },
                            "signatures": [
                                {
                                    "id": 2217,
                                    "name": "getRecordById",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get a specific record in the query result, or throws if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`."
                                    },
                                    "parameters": [
                                        {
                                            "id": 2218,
                                            "name": "recordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the ID of the {@link Record} you want\n"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "RecordId",
                                                "id": 644
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Record",
                                        "id": 2296
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.getRecordById",
                                        "id": 14954
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 479,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "RecordQueryResult.getRecordById",
                                "id": 14954
                            }
                        },
                        {
                            "id": 2213,
                            "name": "getRecordByIdIfExists",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get a specific record in the query result, or null if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`."
                            },
                            "signatures": [
                                {
                                    "id": 2214,
                                    "name": "getRecordByIdIfExists",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get a specific record in the query result, or null if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`."
                                    },
                                    "parameters": [
                                        {
                                            "id": 2215,
                                            "name": "recordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the ID of the {@link Record} you want\n"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "RecordId",
                                                "id": 644
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Record",
                                                "id": 2296
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.getRecordByIdIfExists",
                                        "id": 14951
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 464,
                                    "character": 25
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "RecordQueryResult.getRecordByIdIfExists",
                                "id": 14951
                            }
                        },
                        {
                            "id": 2225,
                            "name": "getRecordColor",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get the {@link Color} of a specific record in the query result. Returns null if the record\nhas no color in this query result. Throws if the record isn't in the RecordQueryResult. Watch\nwith the `'recordColors'` and `'recordIds` keys."
                            },
                            "signatures": [
                                {
                                    "id": 2226,
                                    "name": "getRecordColor",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get the {@link Color} of a specific record in the query result. Returns null if the record\nhas no color in this query result. Throws if the record isn't in the RecordQueryResult. Watch\nwith the `'recordColors'` and `'recordIds` keys."
                                    },
                                    "parameters": [
                                        {
                                            "id": 2227,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the record or record ID you want the color of.\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 644
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 2296
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Color",
                                                "id": 556
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.getRecordColor",
                                        "id": 14963
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 515,
                                    "character": 18
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "RecordQueryResult.getRecordColor",
                                "id": 14963
                            }
                        },
                        {
                            "id": 2222,
                            "name": "hasRecord",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Check to see if a particular record or record id is present in this query result. Returns\nfalse if the record has been deleted or is filtered out."
                            },
                            "signatures": [
                                {
                                    "id": 2223,
                                    "name": "hasRecord",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Check to see if a particular record or record id is present in this query result. Returns\nfalse if the record has been deleted or is filtered out."
                                    },
                                    "parameters": [
                                        {
                                            "id": 2224,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the record or record id to check the presence of\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 644
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 2296
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.hasRecord",
                                        "id": 14960
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 502,
                                    "character": 13
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "RecordQueryResult.hasRecord",
                                "id": 14960
                            }
                        },
                        {
                            "id": 2116,
                            "name": "loadDataAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": ""
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2117,
                                    "name": "loadDataAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": ""
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.loadDataAsync",
                                        "id": 1176
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/linked_records_query_result.ts",
                                    "line": 283,
                                    "character": 23
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.loadDataAsync",
                                "id": 1176
                            }
                        },
                        {
                            "id": 2265,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A string representation of the model for use in debugging."
                            },
                            "signatures": [
                                {
                                    "id": 2266,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "A string representation of the model for use in debugging."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.toString",
                                        "id": 1100
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.toString",
                                "id": 1100
                            }
                        },
                        {
                            "id": 2249,
                            "name": "unloadData",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "signatures": [
                                {
                                    "id": 2250,
                                    "name": "unloadData",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "void"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.unloadData",
                                        "id": 1178
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 155,
                                    "character": 14
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.unloadData",
                                "id": 1178
                            }
                        },
                        {
                            "id": 2111,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": ""
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2112,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": ""
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2113,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableRecordQueryResultKey",
                                                        "id": 15044
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableRecordQueryResultKey",
                                                                "id": 15044
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2114,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 2115,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableRecordQueryResultKey",
                                                "id": 15044
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.unwatch",
                                        "id": 14973
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/linked_records_query_result.ts",
                                    "line": 257,
                                    "character": 11
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "RecordQueryResult.unwatch",
                                "id": 14973
                            }
                        },
                        {
                            "id": 2106,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": ""
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2107,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": ""
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2108,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableRecordQueryResultKey",
                                                        "id": 15044
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableRecordQueryResultKey",
                                                                "id": 15044
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2109,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 2110,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableRecordQueryResultKey",
                                                "id": 15044
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.watch",
                                        "id": 14968
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/linked_records_query_result.ts",
                                    "line": 229,
                                    "character": 9
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "RecordQueryResult.watch",
                                "id": 14968
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [2104, 2253, 2247, 2259, 2096, 2100, 2102]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [2216, 2213, 2225, 2222, 2116, 2265, 2249, 2111, 2106]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/linked_records_query_result.ts",
                            "line": 56,
                            "character": 30
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "RecordQueryResult",
                            "id": 14914
                        }
                    ]
                },
                {
                    "id": 14914,
                    "name": "RecordQueryResult",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A RecordQueryResult represents a set of records. It's a little bit like a one-off View in Airtable: it\ncontains a bunch of records, filtered to a useful subset of the records in the table. Those\nrecords can be sorted according to your specification, and they can be colored by a select field\nor using the color from a view. Just like a view, you can either have all the fields in a table\navailable, or you can just ask for the fields that are relevant to you. There are two types of\nQueryResult:",
                        "text": "- {@link TableOrViewQueryResult} is the most common, and is a query result filtered to all the\n  records in a specific {@link Table} or {@link View}. You can get one of these with\n  `table.selectRecords()` or `view.selectRecords()`.\n- {@link LinkedRecordsQueryResult} is a query result of all the records in a particular\n  {@link https://support.airtable.com/hc/en-us/articles/206452848-Linked-record-fields linked record cell}.\n  You can get one of these with `record.selectLinkedRecordsFromCell(someField)`.\n\nOnce you've got a query result, you need to load it before you can start working with it -\nblocks don't load record data by default. We recommend using {@link useRecords},\n{@link useRecordIds}, {@link useRecordById} or {@link useLoadable} to handle this.\n\nIf you're not using a query result in a React component, you can manually load the data and\nunload it when you're finished:\n\n```js\nasync function fetchRecordsAndDoSomethingAsync(myTable) {\n    // query for all the records in \"myTable\"\n    const queryResult = myTable.selectRecords();\n\n    // load the data in the query result:\n    await queryResult.loadDataAsync();\n\n    // work with the data in the query result\n    doSomething(queryResult);\n\n    // when you're done, unload the data:\n    queryResult.unloadData();\n}\n```\n\nWhilst loaded, a query result will automatically keep up to date with what's in Airtable:\nrecords will get added or removed, the order will change, cell values will be updated, etc.\nAgain, if you're writing a React component then our hooks will look after that for you. If not,\nyou can get notified of these changes with `.watch()`.\n\nWhen calling a `.select*` method, you can pass in a number of options to control the sort order,\nfields loaded and coloring mode of records: see {@link RecordQueryResultOpts} for examples.\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "models/query results/RecordQueryResult\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 14915,
                            "name": "DataType",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 14921,
                            "name": "fields",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The fields that were used to create this QueryResult.\nNull if fields were not specified, which means the QueryResult\nwill load all fields in the table."
                            },
                            "getSignature": [
                                {
                                    "id": 14922,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The fields that were used to create this QueryResult.\nNull if fields were not specified, which means the QueryResult\nwill load all fields in the table."
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Array",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Field",
                                                        "id": 1340
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 291,
                                    "character": 14
                                }
                            ]
                        },
                        {
                            "id": 15007,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 15008,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.id",
                                        "id": 1088
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.id",
                                "id": 1088
                            }
                        },
                        {
                            "id": 14995,
                            "name": "isDataLoaded",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "getSignature": [
                                {
                                    "id": 14996,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.isDataLoaded",
                                        "id": 1168
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 91,
                                    "character": 20
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.isDataLoaded",
                                "id": 1168
                            }
                        },
                        {
                            "id": 15013,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 15014,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.isDeleted",
                                        "id": 1094
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.isDeleted",
                                "id": 1094
                            }
                        },
                        {
                            "id": 14917,
                            "name": "recordIds",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The record IDs in this QueryResult.\nThrows if data is not loaded yet.\nCan be watched."
                            },
                            "getSignature": [
                                {
                                    "id": 14918,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The record IDs in this QueryResult.\nThrows if data is not loaded yet.\nCan be watched."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "RecordId",
                                                "id": 644
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 274,
                                    "character": 17
                                }
                            ]
                        },
                        {
                            "id": 14949,
                            "name": "records",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The records in this RecordQueryResult.\nThrows if data is not loaded yet.\nCan be watched."
                            },
                            "getSignature": [
                                {
                                    "id": 14950,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The records in this RecordQueryResult.\nThrows if data is not loaded yet.\nCan be watched."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Record",
                                                "id": 2296
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 448,
                                    "character": 15
                                }
                            ]
                        },
                        {
                            "id": 14954,
                            "name": "getRecordById",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get a specific record in the query result, or throws if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`."
                            },
                            "signatures": [
                                {
                                    "id": 14955,
                                    "name": "getRecordById",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get a specific record in the query result, or throws if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`."
                                    },
                                    "parameters": [
                                        {
                                            "id": 14956,
                                            "name": "recordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the ID of the {@link Record} you want\n"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "RecordId",
                                                "id": 644
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Record",
                                        "id": 2296
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 479,
                                    "character": 17
                                }
                            ]
                        },
                        {
                            "id": 14951,
                            "name": "getRecordByIdIfExists",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get a specific record in the query result, or null if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`."
                            },
                            "signatures": [
                                {
                                    "id": 14952,
                                    "name": "getRecordByIdIfExists",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get a specific record in the query result, or null if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`."
                                    },
                                    "parameters": [
                                        {
                                            "id": 14953,
                                            "name": "recordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the ID of the {@link Record} you want\n"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "RecordId",
                                                "id": 644
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Record",
                                                "id": 2296
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 464,
                                    "character": 25
                                }
                            ]
                        },
                        {
                            "id": 14963,
                            "name": "getRecordColor",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get the {@link Color} of a specific record in the query result. Returns null if the record\nhas no color in this query result. Throws if the record isn't in the RecordQueryResult. Watch\nwith the `'recordColors'` and `'recordIds` keys."
                            },
                            "signatures": [
                                {
                                    "id": 14964,
                                    "name": "getRecordColor",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get the {@link Color} of a specific record in the query result. Returns null if the record\nhas no color in this query result. Throws if the record isn't in the RecordQueryResult. Watch\nwith the `'recordColors'` and `'recordIds` keys."
                                    },
                                    "parameters": [
                                        {
                                            "id": 14965,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the record or record ID you want the color of.\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 644
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 2296
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Color",
                                                "id": 556
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 515,
                                    "character": 18
                                }
                            ]
                        },
                        {
                            "id": 14960,
                            "name": "hasRecord",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Check to see if a particular record or record id is present in this query result. Returns\nfalse if the record has been deleted or is filtered out."
                            },
                            "signatures": [
                                {
                                    "id": 14961,
                                    "name": "hasRecord",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Check to see if a particular record or record id is present in this query result. Returns\nfalse if the record has been deleted or is filtered out."
                                    },
                                    "parameters": [
                                        {
                                            "id": 14962,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the record or record id to check the presence of\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 644
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 2296
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 502,
                                    "character": 13
                                }
                            ]
                        },
                        {
                            "id": 15001,
                            "name": "loadDataAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Will cause all the async data to be fetched and retained. Every call to\n`loadDataAsync` should have a matching call to `unloadData`.",
                                "text": "Returns a Promise that will resolve once the data is loaded.\n"
                            },
                            "signatures": [
                                {
                                    "id": 15002,
                                    "name": "loadDataAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Will cause all the async data to be fetched and retained. Every call to\n`loadDataAsync` should have a matching call to `unloadData`.",
                                        "text": "Returns a Promise that will resolve once the data is loaded.\n"
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.loadDataAsync",
                                        "id": 1176
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 121,
                                    "character": 23
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.loadDataAsync",
                                "id": 1176
                            }
                        },
                        {
                            "id": 15019,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A string representation of the model for use in debugging."
                            },
                            "signatures": [
                                {
                                    "id": 15020,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "A string representation of the model for use in debugging."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.toString",
                                        "id": 1100
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.toString",
                                "id": 1100
                            }
                        },
                        {
                            "id": 15003,
                            "name": "unloadData",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "signatures": [
                                {
                                    "id": 15004,
                                    "name": "unloadData",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "void"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.unloadData",
                                        "id": 1178
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 155,
                                    "character": 14
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.unloadData",
                                "id": 1178
                            }
                        },
                        {
                            "id": 14973,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatch keys watched with `.watch`.",
                                "text": "Should be called with the same arguments given to `.watch`.\n\nUnwatching a key that needs to load data asynchronously will automatically\ncause the data to be unloaded.\n\nReturns the array of keys that were unwatched\n"
                            },
                            "signatures": [
                                {
                                    "id": 14974,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatch keys watched with `.watch`.",
                                        "text": "Should be called with the same arguments given to `.watch`.\n\nUnwatching a key that needs to load data asynchronously will automatically\ncause the data to be unloaded.\n\nReturns the array of keys that were unwatched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 14975,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to unwatch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableRecordQueryResultKey",
                                                        "id": 15044
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableRecordQueryResultKey",
                                                                "id": 15044
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 14976,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the function passed to `.watch` for these keys"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 14977,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the context that was passed to `.watch` for this `callback`\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableRecordQueryResultKey",
                                                "id": 15044
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.unwatch",
                                        "id": 1163
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 600,
                                    "character": 11
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.unwatch",
                                "id": 1163
                            }
                        },
                        {
                            "id": 14968,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get notified of changes to the query result.",
                                "text": "Watchable keys are:\n- `'records'`\n- `'recordIds'`\n- `'cellValues'`\n- `'recordColors'`\n- `'isDataLoaded'`\n- `'cellValuesInField:' + someFieldId`\n\nEvery call to `.watch` should have a matching call to `.unwatch`.\n\nWatching a key that needs to load data asynchronously will automatically\ncause the data to be fetched. Once the data is available, the `callback`\nwill be called.\n\nReturns the array of keys that were watched.\n"
                            },
                            "signatures": [
                                {
                                    "id": 14969,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get notified of changes to the query result.",
                                        "text": "Watchable keys are:\n- `'records'`\n- `'recordIds'`\n- `'cellValues'`\n- `'recordColors'`\n- `'isDataLoaded'`\n- `'cellValuesInField:' + someFieldId`\n\nEvery call to `.watch` should have a matching call to `.unwatch`.\n\nWatching a key that needs to load data asynchronously will automatically\ncause the data to be fetched. Once the data is available, the `callback`\nwill be called.\n\nReturns the array of keys that were watched.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 14970,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to watch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableRecordQueryResultKey",
                                                        "id": 15044
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableRecordQueryResultKey",
                                                                "id": 15044
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 14971,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "a function to call when those keys change"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 14972,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "an optional context for `this` in `callback`.\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableRecordQueryResultKey",
                                                "id": 15044
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.watch",
                                        "id": 1158
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 572,
                                    "character": 9
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.watch",
                                "id": 1158
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [14921, 15007, 14995, 15013, 14917, 14949]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [
                                14954,
                                14951,
                                14963,
                                14960,
                                15001,
                                15019,
                                15003,
                                14973,
                                14968
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/record_query_result.ts",
                            "line": 261,
                            "character": 23
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AbstractModelWithAsyncData",
                            "id": 1143,
                            "typeArguments": [
                                {
                                    "type": "typeParameter",
                                    "name": "DataType"
                                },
                                {
                                    "type": "reference",
                                    "name": "WatchableRecordQueryResultKey",
                                    "id": 15044
                                }
                            ]
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TableOrViewQueryResult",
                            "id": 1646
                        },
                        {
                            "type": "reference",
                            "name": "LinkedRecordsQueryResult",
                            "id": 2063
                        }
                    ]
                },
                {
                    "id": 1646,
                    "name": "TableOrViewQueryResult",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Represents a set of records directly from a view or table. See {@link RecordQueryResult} for main\ndocumentation.",
                        "text": "Do not instantiate. You can get instances of this class by calling\n`table.selectRecords` or `view.selectRecords`.\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "models/query results/TableOrViewQueryResult\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 1694,
                            "name": "fields",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The fields that were used to create this RecordQueryResult.\nNull if fields were not specified, which means the RecordQueryResult\nwill load all fields in the table."
                            },
                            "getSignature": [
                                {
                                    "id": 1695,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The fields that were used to create this RecordQueryResult.\nNull if fields were not specified, which means the RecordQueryResult\nwill load all fields in the table."
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Array",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Field",
                                                        "id": 1340
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.fields",
                                        "id": 14921
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table_or_view_query_result.ts",
                                    "line": 239,
                                    "character": 14
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "RecordQueryResult.fields",
                                "id": 14921
                            }
                        },
                        {
                            "id": 1836,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 1837,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.id",
                                        "id": 1088
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.id",
                                "id": 1088
                            }
                        },
                        {
                            "id": 1832,
                            "name": "isDataLoaded",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "getSignature": [
                                {
                                    "id": 1833,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.isDataLoaded",
                                        "id": 1168
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 91,
                                    "character": 20
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.isDataLoaded",
                                "id": 1168
                            }
                        },
                        {
                            "id": 1840,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 1841,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.isDeleted",
                                        "id": 1094
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.isDeleted",
                                "id": 1094
                            }
                        },
                        {
                            "id": 1687,
                            "name": "recordIds",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The record IDs in this RecordQueryResult.\nThrows if data is not loaded yet.\nCan be watched."
                            },
                            "getSignature": [
                                {
                                    "id": 1688,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The record IDs in this RecordQueryResult.\nThrows if data is not loaded yet.\nCan be watched."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.recordIds",
                                        "id": 14917
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table_or_view_query_result.ts",
                                    "line": 208,
                                    "character": 17
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "RecordQueryResult.recordIds",
                                "id": 14917
                            }
                        },
                        {
                            "id": 1796,
                            "name": "records",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The records in this RecordQueryResult.\nThrows if data is not loaded yet.\nCan be watched."
                            },
                            "getSignature": [
                                {
                                    "id": 1797,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The records in this RecordQueryResult.\nThrows if data is not loaded yet.\nCan be watched."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Record",
                                                "id": 2296
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.records",
                                        "id": 14949
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 448,
                                    "character": 15
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "RecordQueryResult.records",
                                "id": 14949
                            }
                        },
                        {
                            "id": 1801,
                            "name": "getRecordById",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get a specific record in the query result, or throws if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`."
                            },
                            "signatures": [
                                {
                                    "id": 1802,
                                    "name": "getRecordById",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get a specific record in the query result, or throws if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`."
                                    },
                                    "parameters": [
                                        {
                                            "id": 1803,
                                            "name": "recordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the ID of the {@link Record} you want\n"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "RecordId",
                                                "id": 644
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Record",
                                        "id": 2296
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.getRecordById",
                                        "id": 14954
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 479,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "RecordQueryResult.getRecordById",
                                "id": 14954
                            }
                        },
                        {
                            "id": 1798,
                            "name": "getRecordByIdIfExists",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get a specific record in the query result, or null if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`."
                            },
                            "signatures": [
                                {
                                    "id": 1799,
                                    "name": "getRecordByIdIfExists",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get a specific record in the query result, or null if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`."
                                    },
                                    "parameters": [
                                        {
                                            "id": 1800,
                                            "name": "recordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the ID of the {@link Record} you want\n"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "RecordId",
                                                "id": 644
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Record",
                                                "id": 2296
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.getRecordByIdIfExists",
                                        "id": 14951
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 464,
                                    "character": 25
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "RecordQueryResult.getRecordByIdIfExists",
                                "id": 14951
                            }
                        },
                        {
                            "id": 1810,
                            "name": "getRecordColor",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get the {@link Color} of a specific record in the query result. Returns null if the record\nhas no color in this query result. Throws if the record isn't in the RecordQueryResult. Watch\nwith the `'recordColors'` and `'recordIds` keys."
                            },
                            "signatures": [
                                {
                                    "id": 1811,
                                    "name": "getRecordColor",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get the {@link Color} of a specific record in the query result. Returns null if the record\nhas no color in this query result. Throws if the record isn't in the RecordQueryResult. Watch\nwith the `'recordColors'` and `'recordIds` keys."
                                    },
                                    "parameters": [
                                        {
                                            "id": 1812,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the record or record ID you want the color of.\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 644
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 2296
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Color",
                                                "id": 556
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.getRecordColor",
                                        "id": 14963
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 515,
                                    "character": 18
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "RecordQueryResult.getRecordColor",
                                "id": 14963
                            }
                        },
                        {
                            "id": 1807,
                            "name": "hasRecord",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Check to see if a particular record or record id is present in this query result. Returns\nfalse if the record has been deleted or is filtered out."
                            },
                            "signatures": [
                                {
                                    "id": 1808,
                                    "name": "hasRecord",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Check to see if a particular record or record id is present in this query result. Returns\nfalse if the record has been deleted or is filtered out."
                                    },
                                    "parameters": [
                                        {
                                            "id": 1809,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the record or record id to check the presence of\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 644
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 2296
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.hasRecord",
                                        "id": 14960
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 502,
                                    "character": 13
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "RecordQueryResult.hasRecord",
                                "id": 14960
                            }
                        },
                        {
                            "id": 1720,
                            "name": "loadDataAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": ""
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1721,
                                    "name": "loadDataAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": ""
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.loadDataAsync",
                                        "id": 1176
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table_or_view_query_result.ts",
                                    "line": 389,
                                    "character": 23
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.loadDataAsync",
                                "id": 1176
                            }
                        },
                        {
                            "id": 1844,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A string representation of the model for use in debugging."
                            },
                            "signatures": [
                                {
                                    "id": 1845,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "A string representation of the model for use in debugging."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.toString",
                                        "id": 1100
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.toString",
                                "id": 1100
                            }
                        },
                        {
                            "id": 1724,
                            "name": "unloadData",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": ""
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1725,
                                    "name": "unloadData",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": ""
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "void"
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.unloadData",
                                        "id": 1178
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table_or_view_query_result.ts",
                                    "line": 481,
                                    "character": 14
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.unloadData",
                                "id": 1178
                            }
                        },
                        {
                            "id": 1715,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": ""
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1716,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": ""
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1717,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableRecordQueryResultKey",
                                                        "id": 15044
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableRecordQueryResultKey",
                                                                "id": 15044
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 1718,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 1719,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableRecordQueryResultKey",
                                                "id": 15044
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.unwatch",
                                        "id": 14973
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table_or_view_query_result.ts",
                                    "line": 354,
                                    "character": 11
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "RecordQueryResult.unwatch",
                                "id": 14973
                            }
                        },
                        {
                            "id": 1710,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": ""
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1711,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": ""
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1712,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableRecordQueryResultKey",
                                                        "id": 15044
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableRecordQueryResultKey",
                                                                "id": 15044
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 1713,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 1714,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableRecordQueryResultKey",
                                                "id": 15044
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.watch",
                                        "id": 14968
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table_or_view_query_result.ts",
                                    "line": 307,
                                    "character": 9
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "RecordQueryResult.watch",
                                "id": 14968
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [1694, 1836, 1832, 1840, 1687, 1796]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [1801, 1798, 1810, 1807, 1720, 1844, 1724, 1715, 1710]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/table_or_view_query_result.ts",
                            "line": 58,
                            "character": 28
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "RecordQueryResult",
                            "id": 14914,
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "TableOrViewQueryResultData"
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 14904,
                    "name": "RecordQueryResultOpts",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Used to control what data is loaded in a {@link RecordQueryResult}. Used when creating a\nquery result using `table/view.selectRecords()` and in convenience hooks {@link useRecords}.",
                        "text": "## sorts\nPass an array of sorts to control the order of records. The first sort in the array has the\nhighest priority. If you don't specify sorts, the result will use the inherent order of the\nsource model: the same order you'd see in the main UI for views and linked record fields, and\nan arbitrary (but stable) order for tables.\n\nRecord creation time is used as a tiebreaker: pass an empty array to sort by creation time.\n\n```js\nconst opts = {\n    sorts: [\n        // sort by someField in ascending order...\n        {field: someField},\n        // then by someOtherField in descending order\n        {field: someOtherField, direction: 'desc'},\n    ]\n};\nconst records = useRecords(table, opts);\nconst queryResult = table.selectRecords(opts);\n```\n\n## fields\nGenerally, it's a good idea to load as little data into your block as possible - Airtable bases\ncan get pretty big, and we have to keep all that information in memory and up to date if you ask\nfor it. The fields option lets you make sure that only data relevant to you is loaded.\n\nYou can specify fields with a {@link Field}, by ID, or by name:\n```js\nconst opts = {\n    fields: [\n        // we want to only load fieldA:\n        fieldA,\n        // the field with this id:\n        'fldXXXXXXXXXXXXXX',\n        // and the field named 'Rating':\n        'Rating',\n    ],\n};\nconst records = useRecords(table, opts);\nconst queryResult = table.selectRecords(opts);\n```\n\n## recordColorMode\nJust like a view in Airtable, you can control the colors of records in a field. There are three\nsupported record color modes: none, by a view, and by a select field:\n\n```js\nimport {recordColoring} from '@airtable/blocks/models';\n// No record coloring:\nconst opts = {\n    recordColorMode: recordColoring.modes.none(),\n};\n\n// Color according to the rules of a view:\nconst opts = {\n    recordColorMode: recordColoring.modes.byView(someView),\n};\n\n// Color by a single select field:\nconst opts = {\n    recordColorMode: recordColoring.modes.bySelectField(someSelectField),\n});\n\nconst records = useRecords(table, opts);\nconst queryResult = table.selectRecords(opts);\n```\n\nBy default, views will have whichever coloring is set up in Airtable and tables won't have any\nrecord coloring:\n\n```js\n// these two are the same:\nsomeView.selectRecords();\nsomeView.selectRecords({\n    recordColorMode: recordColoring.modes.byView(someView),\n});\n\n// as are these two:\nsomeTable.selectRecords();\nsomeTable.selectRecords({\n    recordColorMode: recordColoring.modes.none(),\n});\n```\n\n"
                    },
                    "children": [
                        {
                            "id": 14906,
                            "name": "fields",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The fields (or field names or field ids) to load. Falsey values will be removed."
                            },
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 165,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Field",
                                                "id": 1340
                                            },
                                            {
                                                "type": "reference",
                                                "name": "FieldId",
                                                "id": 635
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "false"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14907,
                            "name": "recordColorMode",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "How records in this QueryResult should be colored."
                            },
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 167,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    },
                                    {
                                        "type": "reference",
                                        "name": "RecordColorMode",
                                        "id": 1528
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14905,
                            "name": "sorts",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The order in which to sort the query result"
                            },
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 163,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "SortConfig",
                                        "id": 14898
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [14906, 14907, 14905]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/record_query_result.ts",
                            "line": 161,
                            "character": 38
                        }
                    ]
                },
                {
                    "id": 14898,
                    "name": "SortConfig",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {},
                    "children": [
                        {
                            "id": 14900,
                            "name": "direction",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The order to sort in. Defaults to asc."
                            },
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 63,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "stringLiteral",
                                        "value": "asc"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "desc"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14899,
                            "name": "field",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "A field, field id, or field name."
                            },
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 61,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Field",
                                        "id": 1340
                                    },
                                    {
                                        "type": "reference",
                                        "name": "FieldId",
                                        "id": 635
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [14900, 14899]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/record_query_result.ts",
                            "line": 59,
                            "character": 20
                        }
                    ]
                },
                {
                    "id": 15046,
                    "name": "RecordIdQueryResultOpts",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A subset of {@link RecordQueryResultOpts} used in {@link useRecordIds} that omits fields and\nrecordColorMode, as record cell values and color are not accessible via this hook.",
                        "text": "See RecordQueryResultOpts for full details and examples.\n\n```js\nconst opts = {\n    sorts: [\n        // sort by someField in ascending order...\n        {field: someField},\n        // then by someOtherField in descending order\n        {field: someOtherField, direction: 'desc'},\n    ]\n};\nconst recordIds = useRecordIds(table, opts);\n"
                    },
                    "sources": [
                        {
                            "fileName": "src/models/record_query_result.ts",
                            "line": 202,
                            "character": 35
                        }
                    ],
                    "type": {
                        "type": "reference",
                        "name": "Pick",
                        "typeArguments": [
                            {
                                "type": "reference",
                                "name": "RecordQueryResultOpts",
                                "id": 14904
                            },
                            {
                                "type": "stringLiteral",
                                "value": "sorts"
                            }
                        ]
                    }
                },
                {
                    "id": 15045,
                    "name": "SingleRecordQueryResultOpts",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A subset of {@link RecordQueryResultOpts} used in {@link useRecordById} that omits sorts, as\nthere is only a single record.",
                        "text": "See RecordQueryResultOpts for full details and examples.\n\n```js\nconst opts = {\n    fields: ['My field'],\n    recordColorMode: recordColoring.modes.byView(view),\n};\nconst record = useRecordById(table, recordId, opts);\n"
                    },
                    "sources": [
                        {
                            "fileName": "src/models/record_query_result.ts",
                            "line": 183,
                            "character": 39
                        }
                    ],
                    "type": {
                        "type": "reference",
                        "name": "Pick",
                        "typeArguments": [
                            {
                                "type": "reference",
                                "name": "RecordQueryResultOpts",
                                "id": 14904
                            },
                            {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "stringLiteral",
                                        "value": "fields"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "recordColorMode"
                                    }
                                ]
                            }
                        ]
                    }
                },
                {
                    "id": 15044,
                    "name": "WatchableRecordQueryResultKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A key in {@link RecordQueryResult} that can be watched\n- `records`\n- `recordIds`\n- `cellValues`\n- `recordColors`\n- `isDataLoaded`\n- `cellValuesInField:{FIELD_ID}`"
                    },
                    "sources": [
                        {
                            "fileName": "src/models/record_query_result.ts",
                            "line": 54,
                            "character": 41
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "stringLiteral",
                                        "value": "cellValues"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "recordColors"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "records"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "recordIds"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "isDataLoaded"
                                    }
                                ]
                            },
                            {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [2063, 14914, 1646]
                },
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [14904, 14898]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [15046, 15045, 15044]
                }
            ],
            "sources": [
                {
                    "fileName": "src/models/table_or_view_query_result.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 2671,
            "name": "@airtable/blocks/models: Session",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/models/session.ts",
            "comment": {},
            "children": [
                {
                    "id": 2676,
                    "name": "Session",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Model class representing the current user's session.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {session} from '@airtable/blocks';\n\nif (session.currentUser !== null) {\n    console.log(\"The current user's name is\", session.currentUser.name);\n} else {\n    console.log('This block is being viewed in a public share');\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "models/Session\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 2689,
                            "name": "currentUser",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The current user, or `null` if the block is running in a publicly shared base.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {session} from '@airtable/blocks';\nif (session.currentUser) {\n    console.log(session.currentUser.id);\n    console.log(session.currentUser.email);\n    console.log(session.currentUser.name);\n}\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 2690,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The current user, or `null` if the block is running in a publicly shared base.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {session} from '@airtable/blocks';\nif (session.currentUser) {\n    console.log(session.currentUser.id);\n    console.log(session.currentUser.email);\n    console.log(session.currentUser.name);\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "CollaboratorData",
                                                "id": 692
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/session.ts",
                                    "line": 98,
                                    "character": 19
                                }
                            ]
                        },
                        {
                            "id": 2718,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 2719,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.id",
                                        "id": 1088
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.id",
                                "id": 1088
                            }
                        },
                        {
                            "id": 2722,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 2723,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.isDeleted",
                                        "id": 1094
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.isDeleted",
                                "id": 1094
                            }
                        },
                        {
                            "id": 2695,
                            "name": "checkPermissionsForCreateRecords",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Checks whether the current user has permission to create any records in the current base. For\nmore granular permission checks, see {@link Table.checkPermissionsForCreateRecords}.",
                                "text": "Returns `{hasPermission: true}` if the current user can create records,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {session} from '@airtable/blocks';\n\nconst createRecordsCheckResult = session.checkPermissionsForCreateRecords();\nif (!createRecordsCheckResult.hasPermission) {\n    alert(createRecordsCheckResult.reasonDisplayString);\n}\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2696,
                                    "name": "checkPermissionsForCreateRecords",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Checks whether the current user has permission to create any records in the current base. For\nmore granular permission checks, see {@link Table.checkPermissionsForCreateRecords}.",
                                        "text": "Returns `{hasPermission: true}` if the current user can create records,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {session} from '@airtable/blocks';\n\nconst createRecordsCheckResult = session.checkPermissionsForCreateRecords();\nif (!createRecordsCheckResult.hasPermission) {\n    alert(createRecordsCheckResult.reasonDisplayString);\n}\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "PermissionCheckResult",
                                        "id": 1024
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/session.ts",
                                    "line": 155,
                                    "character": 36
                                }
                            ]
                        },
                        {
                            "id": 2699,
                            "name": "checkPermissionsForDeleteRecords",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Checks whether the current user has permission to delete any records in the current base. For\nmore granular permission checks, see {@link Table.checkPermissionsForDeleteRecords}.",
                                "text": "Returns `{hasPermission: true}` if the current user can delete records,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {session} from '@airtable/blocks';\n\nconst deleteRecordsCheckResult = session.checkPermissionsForDeleteRecords();\nif (!deleteRecordsCheckResult.hasPermission) {\n    alert(deleteRecordsCheckResult.reasonDisplayString);\n}\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2700,
                                    "name": "checkPermissionsForDeleteRecords",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Checks whether the current user has permission to delete any records in the current base. For\nmore granular permission checks, see {@link Table.checkPermissionsForDeleteRecords}.",
                                        "text": "Returns `{hasPermission: true}` if the current user can delete records,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {session} from '@airtable/blocks';\n\nconst deleteRecordsCheckResult = session.checkPermissionsForDeleteRecords();\nif (!deleteRecordsCheckResult.hasPermission) {\n    alert(deleteRecordsCheckResult.reasonDisplayString);\n}\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "PermissionCheckResult",
                                        "id": 1024
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/session.ts",
                                    "line": 186,
                                    "character": 36
                                }
                            ]
                        },
                        {
                            "id": 2691,
                            "name": "checkPermissionsForUpdateRecords",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Checks whether the current user has permission to update any records in the current base. For\nmore granular permission checks, see {@link Table.checkPermissionsForUpdateRecords}.",
                                "text": "Returns `{hasPermission: true}` if the current user can update records,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may\nbe used to display an error message to the user.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {session} from '@airtable/blocks';\n\nconst updateRecordsCheckResult = session.checkPermissionsForUpdateRecords();\nif (!updateRecordsCheckResult.hasPermission) {\n    alert(updateRecordsCheckResult.reasonDisplayString);\n}\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2692,
                                    "name": "checkPermissionsForUpdateRecords",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Checks whether the current user has permission to update any records in the current base. For\nmore granular permission checks, see {@link Table.checkPermissionsForUpdateRecords}.",
                                        "text": "Returns `{hasPermission: true}` if the current user can update records,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may\nbe used to display an error message to the user.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {session} from '@airtable/blocks';\n\nconst updateRecordsCheckResult = session.checkPermissionsForUpdateRecords();\nif (!updateRecordsCheckResult.hasPermission) {\n    alert(updateRecordsCheckResult.reasonDisplayString);\n}\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "PermissionCheckResult",
                                        "id": 1024
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/session.ts",
                                    "line": 124,
                                    "character": 36
                                }
                            ]
                        },
                        {
                            "id": 2697,
                            "name": "hasPermissionToCreateRecords",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "An alias for `session.checkPermissionsForCreateRecords().hasPermission`. For more granular\npermission checks, see {@link Table.hasPermissionToCreateRecords}."
                            },
                            "signatures": [
                                {
                                    "id": 2698,
                                    "name": "hasPermissionToCreateRecords",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "An alias for `session.checkPermissionsForCreateRecords().hasPermission`. For more granular\npermission checks, see {@link Table.hasPermissionToCreateRecords}."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/session.ts",
                                    "line": 166,
                                    "character": 32
                                }
                            ]
                        },
                        {
                            "id": 2701,
                            "name": "hasPermissionToDeleteRecords",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "An alias for `session.checkPermissionsForDeleteRecords().hasPermission`. For more granular\npermission checks, see {@link Table.hasPermissionToDeleteRecords}."
                            },
                            "signatures": [
                                {
                                    "id": 2702,
                                    "name": "hasPermissionToDeleteRecords",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "An alias for `session.checkPermissionsForDeleteRecords().hasPermission`. For more granular\npermission checks, see {@link Table.hasPermissionToDeleteRecords}."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/session.ts",
                                    "line": 197,
                                    "character": 32
                                }
                            ]
                        },
                        {
                            "id": 2693,
                            "name": "hasPermissionToUpdateRecords",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "An alias for `session.checkPermissionsForUpdateRecords().hasPermission`. For more granular\npermission checks, see {@link Table.hasPermissionToUpdateRecords}."
                            },
                            "signatures": [
                                {
                                    "id": 2694,
                                    "name": "hasPermissionToUpdateRecords",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "An alias for `session.checkPermissionsForUpdateRecords().hasPermission`. For more granular\npermission checks, see {@link Table.hasPermissionToUpdateRecords}."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/session.ts",
                                    "line": 135,
                                    "character": 32
                                }
                            ]
                        },
                        {
                            "id": 2728,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A string representation of the model for use in debugging."
                            },
                            "signatures": [
                                {
                                    "id": 2729,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "A string representation of the model for use in debugging."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.toString",
                                        "id": 1100
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.toString",
                                "id": 1100
                            }
                        },
                        {
                            "id": 2756,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatch keys watched with `.watch`.",
                                "text": "Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2757,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatch keys watched with `.watch`.",
                                        "text": "Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2758,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to unwatch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableSessionKey",
                                                        "id": 2772
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableSessionKey",
                                                                "id": 2772
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2759,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the function passed to `.watch` for these keys"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 2760,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 2761,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 2762,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2763,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableSessionKey",
                                                                        "id": 2772
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2764,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 113,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 2765,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the context that was passed to `.watch` for this `callback`\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableSessionKey",
                                                "id": 2772
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 1060
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 111,
                                    "character": 11
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 1060
                            }
                        },
                        {
                            "id": 2746,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get notified of changes to the model.",
                                "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2747,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get notified of changes to the model.",
                                        "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2748,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to watch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableSessionKey",
                                                        "id": 2772
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableSessionKey",
                                                                "id": 2772
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2749,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "a function to call when those keys change"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 2750,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 2751,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 2752,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2753,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableSessionKey",
                                                                        "id": 2772
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2754,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 66,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 2755,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "an optional context for `this` in `callback`.\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableSessionKey",
                                                "id": 2772
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 1050
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 64,
                                    "character": 9
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 1050
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [2689, 2718, 2722]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [2695, 2699, 2691, 2697, 2701, 2693, 2728, 2756, 2746]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/session.ts",
                            "line": 49,
                            "character": 13
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AbstractModel",
                            "id": 1075,
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "SessionData"
                                },
                                {
                                    "type": "reference",
                                    "name": "WatchableSessionKey",
                                    "id": 2772
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 2772,
                    "name": "WatchableSessionKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Watchable keys in {@link Session}.\n- `currentUser`\n- `permissionLevel`"
                    },
                    "sources": [
                        {
                            "fileName": "src/models/session.ts",
                            "line": 32,
                            "character": 24
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "permissionLevel"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "currentUser"
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [2676]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [2772]
                }
            ],
            "sources": [
                {
                    "fileName": "src/models/session.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 665,
            "name": "@airtable/blocks/models: Table",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/types/table.ts",
            "comment": {},
            "children": [
                {
                    "id": 14669,
                    "name": "Table",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Model class representing a table. Every {@link Base} has one or more tables.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "models/Table\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 14702,
                            "name": "description",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The description of the table, if it has one. Can be watched.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myTable.description);\n// => 'This is my table'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 14703,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The description of the table, if it has one. Can be watched.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myTable.description);\n// => 'This is my table'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 130,
                                    "character": 19
                                }
                            ]
                        },
                        {
                            "id": 14708,
                            "name": "fields",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The fields in this table. The order is arbitrary, since fields are\nonly ordered in the context of a specific view.",
                                "text": "Can be watched to know when fields are created or deleted.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(`This table has ${myTable.fields.length} fields`);\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 14709,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The fields in this table. The order is arbitrary, since fields are\nonly ordered in the context of a specific view.",
                                        "text": "Can be watched to know when fields are created or deleted.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(`This table has ${myTable.fields.length} fields`);\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Field",
                                                "id": 1340
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 170,
                                    "character": 14
                                }
                            ]
                        },
                        {
                            "id": 14842,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 14843,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.id",
                                        "id": 1088
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.id",
                                "id": 1088
                            }
                        },
                        {
                            "id": 14846,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 14847,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.isDeleted",
                                        "id": 1094
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.isDeleted",
                                "id": 1094
                            }
                        },
                        {
                            "id": 14700,
                            "name": "name",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The name of the table. Can be watched.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myTable.name);\n// => 'Table 1'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 14701,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The name of the table. Can be watched.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myTable.name);\n// => 'Table 1'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 118,
                                    "character": 12
                                }
                            ]
                        },
                        {
                            "id": 14706,
                            "name": "primaryField",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The table's primary field. Every table has exactly one primary\nfield. The primary field of a table will not change.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myTable.primaryField.name);\n// => 'Name'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 14707,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The table's primary field. Every table has exactly one primary\nfield. The primary field of a table will not change.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myTable.primaryField.name);\n// => 'Name'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Field",
                                        "id": 1340
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 155,
                                    "character": 20
                                }
                            ]
                        },
                        {
                            "id": 14704,
                            "name": "url",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The URL for the table. You can visit this URL in the browser to be taken to the table in the Airtable UI.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myTable.url);\n// => 'https://airtable.com/tblxxxxxxxxxxxxxx'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 14705,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The URL for the table. You can visit this URL in the browser to be taken to the table in the Airtable UI.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myTable.url);\n// => 'https://airtable.com/tblxxxxxxxxxxxxxx'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 142,
                                    "character": 11
                                }
                            ]
                        },
                        {
                            "id": 14722,
                            "name": "views",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The views in this table. Can be watched to know when views are created,\ndeleted, or reordered.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(`This table has ${myTable.views.length} views`);\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 14723,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The views in this table. Can be watched to know when views are created,\ndeleted, or reordered.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(`This table has ${myTable.views.length} views`);\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "View",
                                                "id": 1973
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 279,
                                    "character": 13
                                }
                            ]
                        },
                        {
                            "id": 14802,
                            "name": "checkPermissionsForCreateRecord",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Checks whether the current user has permission to create the specified record.",
                                "text": "Accepts partial input, in the same format as {@link createRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can create the specified record,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can create a specific record, when you already know what\n// fields/cell values will be set for the record.\nconst createRecordCheckResult = table.checkPermissionsForCreateRecord({\n    'Project Name': 'Advertising campaign',\n    'Budget': 100,\n});\nif (!createRecordCheckResult.hasPermission) {\n    alert(createRecordCheckResult.reasonDisplayString);\n}\n\n// Like createRecordAsync, you can use either field names or field IDs.\nconst checkResultWithFieldIds = table.checkPermissionsForCreateRecord({\n    [projectNameField.id]: 'Cat video',\n    [budgetField.id]: 200,\n});\n\n// Check if user could potentially create a record.\n// Use when you don't know the specific fields/cell values yet (for example,\n// to show or hide UI controls that let you start creating a record.)\nconst createUnknownRecordCheckResult =\n    table.checkPermissionsForCreateRecord();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14803,
                                    "name": "checkPermissionsForCreateRecord",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Checks whether the current user has permission to create the specified record.",
                                        "text": "Accepts partial input, in the same format as {@link createRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can create the specified record,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can create a specific record, when you already know what\n// fields/cell values will be set for the record.\nconst createRecordCheckResult = table.checkPermissionsForCreateRecord({\n    'Project Name': 'Advertising campaign',\n    'Budget': 100,\n});\nif (!createRecordCheckResult.hasPermission) {\n    alert(createRecordCheckResult.reasonDisplayString);\n}\n\n// Like createRecordAsync, you can use either field names or field IDs.\nconst checkResultWithFieldIds = table.checkPermissionsForCreateRecord({\n    [projectNameField.id]: 'Cat video',\n    [budgetField.id]: 200,\n});\n\n// Check if user could potentially create a record.\n// Use when you don't know the specific fields/cell values yet (for example,\n// to show or hide UI controls that let you start creating a record.)\nconst createUnknownRecordCheckResult =\n    table.checkPermissionsForCreateRecord();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14804,
                                            "name": "fields",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "object mapping `FieldId` or field name to value for that field."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ObjectMap",
                                                "typeArguments": [
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "reference",
                                                                "name": "FieldId",
                                                                "id": 635
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "string"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "void"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "PermissionCheckResult",
                                        "id": 1024
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 1210,
                                    "character": 35
                                }
                            ]
                        },
                        {
                            "id": 14813,
                            "name": "checkPermissionsForCreateRecords",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Checks whether the current user has permission to create the specified records.",
                                "text": "Accepts partial input, in the same format as {@link createRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can create the specified records,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can create specific records, when you already know what\n// fields/cell values will be set for the records.\nconst createRecordsCheckResult = table.checkPermissionsForCreateRecords([\n    // Like createRecordsAsync, fields can be specified by name or ID\n    {\n         fields: {\n             'Project Name': 'Advertising campaign',\n             'Budget': 100,\n         },\n    },\n    {\n         fields: {\n             [projectNameField.id]: 'Cat video',\n             [budgetField.id]: 200,\n         },\n    },\n    {},\n]);\nif (!createRecordsCheckResult.hasPermission) {\n    alert(createRecordsCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially create records.\n// Use when you don't know the specific fields/cell values yet (for example,\n// to show or hide UI controls that let you start creating records.)\n// Equivalent to table.checkPermissionsForCreateRecord()\nconst createUnknownRecordCheckResult =\n    table.checkPermissionsForCreateRecords();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14814,
                                    "name": "checkPermissionsForCreateRecords",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Checks whether the current user has permission to create the specified records.",
                                        "text": "Accepts partial input, in the same format as {@link createRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can create the specified records,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can create specific records, when you already know what\n// fields/cell values will be set for the records.\nconst createRecordsCheckResult = table.checkPermissionsForCreateRecords([\n    // Like createRecordsAsync, fields can be specified by name or ID\n    {\n         fields: {\n             'Project Name': 'Advertising campaign',\n             'Budget': 100,\n         },\n    },\n    {\n         fields: {\n             [projectNameField.id]: 'Cat video',\n             [budgetField.id]: 200,\n         },\n    },\n    {},\n]);\nif (!createRecordsCheckResult.hasPermission) {\n    alert(createRecordsCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially create records.\n// Use when you don't know the specific fields/cell values yet (for example,\n// to show or hide UI controls that let you start creating records.)\n// Equivalent to table.checkPermissionsForCreateRecord()\nconst createUnknownRecordCheckResult =\n    table.checkPermissionsForCreateRecords();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14815,
                                            "name": "records",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "Array of objects mapping `FieldId` or field name to value for that field."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "reflection",
                                                        "declaration": {
                                                            "id": 14816,
                                                            "name": "__type",
                                                            "kind": 65536,
                                                            "kindString": "Type literal",
                                                            "flags": {},
                                                            "children": [
                                                                {
                                                                    "id": 14817,
                                                                    "name": "fields",
                                                                    "kind": 32,
                                                                    "kindString": "Variable",
                                                                    "flags": {
                                                                        "isOptional": true
                                                                    },
                                                                    "sources": [
                                                                        {
                                                                            "fileName": "src/models/table.ts",
                                                                            "line": 1407,
                                                                            "character": 27
                                                                        }
                                                                    ],
                                                                    "type": {
                                                                        "type": "union",
                                                                        "types": [
                                                                            {
                                                                                "type": "reference",
                                                                                "name": "ObjectMap",
                                                                                "typeArguments": [
                                                                                    {
                                                                                        "type": "union",
                                                                                        "types": [
                                                                                            {
                                                                                                "type": "reference",
                                                                                                "name": "FieldId",
                                                                                                "id": 635
                                                                                            },
                                                                                            {
                                                                                                "type": "intrinsic",
                                                                                                "name": "string"
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "union",
                                                                                        "types": [
                                                                                            {
                                                                                                "type": "intrinsic",
                                                                                                "name": "unknown"
                                                                                            },
                                                                                            {
                                                                                                "type": "intrinsic",
                                                                                                "name": "void"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "void"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "groups": [
                                                                {
                                                                    "title": "Variables",
                                                                    "kind": 32,
                                                                    "children": [14817]
                                                                }
                                                            ],
                                                            "sources": [
                                                                {
                                                                    "fileName": "src/models/table.ts",
                                                                    "line": 1406,
                                                                    "character": 32
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "PermissionCheckResult",
                                        "id": 1024
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 1405,
                                    "character": 36
                                }
                            ]
                        },
                        {
                            "id": 14784,
                            "name": "checkPermissionsForDeleteRecord",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Checks whether the current user has permission to delete the specified record.",
                                "text": "Accepts optional input, in the same format as {@link deleteRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can delete the specified record,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can delete a specific record\nconst deleteRecordCheckResult =\n    table.checkPermissionsForDeleteRecord(record);\nif (!deleteRecordCheckResult.hasPermission) {\n    alert(deleteRecordCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially delete a record.\n// Use when you don't know the specific record you want to delete yet (for\n// example, to show/hide UI controls that let you select a record to delete).\nconst deleteUnknownRecordCheckResult =\n    table.checkPermissionsForDeleteRecord();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14785,
                                    "name": "checkPermissionsForDeleteRecord",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Checks whether the current user has permission to delete the specified record.",
                                        "text": "Accepts optional input, in the same format as {@link deleteRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can delete the specified record,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can delete a specific record\nconst deleteRecordCheckResult =\n    table.checkPermissionsForDeleteRecord(record);\nif (!deleteRecordCheckResult.hasPermission) {\n    alert(deleteRecordCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially delete a record.\n// Use when you don't know the specific record you want to delete yet (for\n// example, to show/hide UI controls that let you select a record to delete).\nconst deleteUnknownRecordCheckResult =\n    table.checkPermissionsForDeleteRecord();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14786,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the record to be deleted"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 2296
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 644
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "PermissionCheckResult",
                                        "id": 1024
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 967,
                                    "character": 35
                                }
                            ]
                        },
                        {
                            "id": 14793,
                            "name": "checkPermissionsForDeleteRecords",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Checks whether the current user has permission to delete the specified records.",
                                "text": "Accepts optional input, in the same format as {@link deleteRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can delete the specified records,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can delete specific records\nconst deleteRecordsCheckResult =\n    table.checkPermissionsForDeleteRecords([record1, record2]);\nif (!deleteRecordsCheckResult.hasPermission) {\n    alert(deleteRecordsCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially delete records.\n// Use when you don't know the specific records you want to delete yet (for\n// example, to show/hide UI controls that let you select records to delete).\n// Equivalent to table.hasPermissionToDeleteRecord()\nconst deleteUnknownRecordsCheckResult =\n    table.checkPermissionsForDeleteRecords();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14794,
                                    "name": "checkPermissionsForDeleteRecords",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Checks whether the current user has permission to delete the specified records.",
                                        "text": "Accepts optional input, in the same format as {@link deleteRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can delete the specified records,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can delete specific records\nconst deleteRecordsCheckResult =\n    table.checkPermissionsForDeleteRecords([record1, record2]);\nif (!deleteRecordsCheckResult.hasPermission) {\n    alert(deleteRecordsCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially delete records.\n// Use when you don't know the specific records you want to delete yet (for\n// example, to show/hide UI controls that let you select records to delete).\n// Equivalent to table.hasPermissionToDeleteRecord()\nconst deleteUnknownRecordsCheckResult =\n    table.checkPermissionsForDeleteRecords();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14795,
                                            "name": "recordsOrRecordIds",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the records to be deleted"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "reference",
                                                                "name": "Record",
                                                                "id": 2296
                                                            },
                                                            {
                                                                "type": "reference",
                                                                "name": "RecordId",
                                                                "id": 644
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "PermissionCheckResult",
                                        "id": 1024
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 1073,
                                    "character": 36
                                }
                            ]
                        },
                        {
                            "id": 14755,
                            "name": "checkPermissionsForUpdateRecord",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Checks whether the current user has permission to perform the given record update.",
                                "text": "Accepts partial input, in the same format as {@link updateRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can update the specified record,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can update specific fields for a specific record.\nconst updateRecordCheckResult =\n    table.checkPermissionsForUpdateRecord(record, {\n        'Post Title': 'How to make: orange-mango pound cake',\n        'Publication Date': '2020-01-01',\n    });\nif (!updateRecordCheckResult.hasPermission) {\n    alert(updateRecordCheckResult.reasonDisplayString);\n}\n\n// Like updateRecordAsync, you can use either field names or field IDs.\nconst updateRecordCheckResultWithFieldIds =\n    table.checkPermissionsForUpdateRecord(record, {\n        [postTitleField.id]: 'Cake decorating tips & tricks',\n        [publicationDateField.id]: '2020-02-02',\n    });\n\n// Check if user could update a given record, when you don't know the\n// specific fields that will be updated yet (e.g. to check whether you should\n// allow a user to select a certain record to update).\nconst updateUnknownFieldsCheckResult =\n    table.checkPermissionsForUpdateRecord(record);\n\n// Check if user could update specific fields, when you don't know the\n// specific record that will be updated yet. (for example, if the field is\n// selected by the user and you want to check if your block can write to it).\nconst updateUnknownRecordCheckResult =\n    table.checkPermissionsForUpdateRecord(undefined, {\n        'My field name': 'updated value',\n        // You can use undefined if you know you're going to update a field,\n        // but don't know the new cell value yet.\n        'Another field name': undefined,\n    });\n\n// Check if user could perform updates within the table, without knowing the\n// specific record or fields that will be updated yet (e.g., to render your\n// block in \"read only\" mode).\nconst updateUnknownRecordAndFieldsCheckResult =\n    table.checkPermissionsForUpdateRecord();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14756,
                                    "name": "checkPermissionsForUpdateRecord",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Checks whether the current user has permission to perform the given record update.",
                                        "text": "Accepts partial input, in the same format as {@link updateRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can update the specified record,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can update specific fields for a specific record.\nconst updateRecordCheckResult =\n    table.checkPermissionsForUpdateRecord(record, {\n        'Post Title': 'How to make: orange-mango pound cake',\n        'Publication Date': '2020-01-01',\n    });\nif (!updateRecordCheckResult.hasPermission) {\n    alert(updateRecordCheckResult.reasonDisplayString);\n}\n\n// Like updateRecordAsync, you can use either field names or field IDs.\nconst updateRecordCheckResultWithFieldIds =\n    table.checkPermissionsForUpdateRecord(record, {\n        [postTitleField.id]: 'Cake decorating tips & tricks',\n        [publicationDateField.id]: '2020-02-02',\n    });\n\n// Check if user could update a given record, when you don't know the\n// specific fields that will be updated yet (e.g. to check whether you should\n// allow a user to select a certain record to update).\nconst updateUnknownFieldsCheckResult =\n    table.checkPermissionsForUpdateRecord(record);\n\n// Check if user could update specific fields, when you don't know the\n// specific record that will be updated yet. (for example, if the field is\n// selected by the user and you want to check if your block can write to it).\nconst updateUnknownRecordCheckResult =\n    table.checkPermissionsForUpdateRecord(undefined, {\n        'My field name': 'updated value',\n        // You can use undefined if you know you're going to update a field,\n        // but don't know the new cell value yet.\n        'Another field name': undefined,\n    });\n\n// Check if user could perform updates within the table, without knowing the\n// specific record or fields that will be updated yet (e.g., to render your\n// block in \"read only\" mode).\nconst updateUnknownRecordAndFieldsCheckResult =\n    table.checkPermissionsForUpdateRecord();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14757,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the record to update"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 2296
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 644
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 14758,
                                            "name": "fields",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "cell values to update in that record, specified as object mapping `FieldId` or field name to value for that field."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ObjectMap",
                                                "typeArguments": [
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "reference",
                                                                "name": "FieldId",
                                                                "id": 635
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "string"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "void"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "PermissionCheckResult",
                                        "id": 1024
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 600,
                                    "character": 35
                                }
                            ]
                        },
                        {
                            "id": 14769,
                            "name": "checkPermissionsForUpdateRecords",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Checks whether the current user has permission to perform the given record updates.",
                                "text": "Accepts partial input, in the same format as {@link updateRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can update the specified records,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst recordsToUpdate = [\n    {\n        // Validating a complete record update\n        id: record1.id,\n        fields: {\n            'Post Title': 'How to make: orange-mango pound cake',\n            'Publication Date': '2020-01-01',\n        },\n    },\n    {\n        // Like updateRecordsAsync, fields can be specified by name or ID\n        id: record2.id,\n        fields: {\n            [postTitleField.id]: 'Cake decorating tips & tricks',\n            [publicationDateField.id]: '2020-02-02',\n        },\n    },\n    {\n        // Validating an update to a specific record, not knowing what\n        // fields will be updated\n        id: record3.id,\n    },\n    {\n        // Validating an update to specific cell values, not knowing what\n        // record will be updated\n        fields: {\n            'My field name': 'updated value for unknown record',\n            // You can use undefined if you know you're going to update a\n            // field, but don't know the new cell value yet.\n            'Another field name': undefined,\n        },\n    },\n];\n\nconst updateRecordsCheckResult =\n    table.checkPermissionsForUpdateRecords(recordsToUpdate);\nif (!updateRecordsCheckResult.hasPermission) {\n    alert(updateRecordsCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially update records.\n// Equivalent to table.checkPermissionsForUpdateRecord()\nconst updateUnknownRecordAndFieldsCheckResult =\n    table.checkPermissionsForUpdateRecords();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14770,
                                    "name": "checkPermissionsForUpdateRecords",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Checks whether the current user has permission to perform the given record updates.",
                                        "text": "Accepts partial input, in the same format as {@link updateRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can update the specified records,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst recordsToUpdate = [\n    {\n        // Validating a complete record update\n        id: record1.id,\n        fields: {\n            'Post Title': 'How to make: orange-mango pound cake',\n            'Publication Date': '2020-01-01',\n        },\n    },\n    {\n        // Like updateRecordsAsync, fields can be specified by name or ID\n        id: record2.id,\n        fields: {\n            [postTitleField.id]: 'Cake decorating tips & tricks',\n            [publicationDateField.id]: '2020-02-02',\n        },\n    },\n    {\n        // Validating an update to a specific record, not knowing what\n        // fields will be updated\n        id: record3.id,\n    },\n    {\n        // Validating an update to specific cell values, not knowing what\n        // record will be updated\n        fields: {\n            'My field name': 'updated value for unknown record',\n            // You can use undefined if you know you're going to update a\n            // field, but don't know the new cell value yet.\n            'Another field name': undefined,\n        },\n    },\n];\n\nconst updateRecordsCheckResult =\n    table.checkPermissionsForUpdateRecords(recordsToUpdate);\nif (!updateRecordsCheckResult.hasPermission) {\n    alert(updateRecordsCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially update records.\n// Equivalent to table.checkPermissionsForUpdateRecord()\nconst updateUnknownRecordAndFieldsCheckResult =\n    table.checkPermissionsForUpdateRecords();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14771,
                                            "name": "records",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "Array of objects containing recordId and fields/cellValues to update for that record (specified as an object mapping `FieldId` or field name to cell value)"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "reflection",
                                                        "declaration": {
                                                            "id": 14772,
                                                            "name": "__type",
                                                            "kind": 65536,
                                                            "kindString": "Type literal",
                                                            "flags": {},
                                                            "children": [
                                                                {
                                                                    "id": 14774,
                                                                    "name": "fields",
                                                                    "kind": 32,
                                                                    "kindString": "Variable",
                                                                    "flags": {
                                                                        "isOptional": true
                                                                    },
                                                                    "sources": [
                                                                        {
                                                                            "fileName": "src/models/table.ts",
                                                                            "line": 826,
                                                                            "character": 27
                                                                        }
                                                                    ],
                                                                    "type": {
                                                                        "type": "union",
                                                                        "types": [
                                                                            {
                                                                                "type": "reference",
                                                                                "name": "ObjectMap",
                                                                                "typeArguments": [
                                                                                    {
                                                                                        "type": "union",
                                                                                        "types": [
                                                                                            {
                                                                                                "type": "reference",
                                                                                                "name": "FieldId",
                                                                                                "id": 635
                                                                                            },
                                                                                            {
                                                                                                "type": "intrinsic",
                                                                                                "name": "string"
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "union",
                                                                                        "types": [
                                                                                            {
                                                                                                "type": "intrinsic",
                                                                                                "name": "unknown"
                                                                                            },
                                                                                            {
                                                                                                "type": "intrinsic",
                                                                                                "name": "void"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "void"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "id": 14773,
                                                                    "name": "id",
                                                                    "kind": 32,
                                                                    "kindString": "Variable",
                                                                    "flags": {
                                                                        "isOptional": true
                                                                    },
                                                                    "sources": [
                                                                        {
                                                                            "fileName": "src/models/table.ts",
                                                                            "line": 825,
                                                                            "character": 23
                                                                        }
                                                                    ],
                                                                    "type": {
                                                                        "type": "union",
                                                                        "types": [
                                                                            {
                                                                                "type": "reference",
                                                                                "name": "RecordId",
                                                                                "id": 644
                                                                            },
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "void"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "groups": [
                                                                {
                                                                    "title": "Variables",
                                                                    "kind": 32,
                                                                    "children": [14774, 14773]
                                                                }
                                                            ],
                                                            "sources": [
                                                                {
                                                                    "fileName": "src/models/table.ts",
                                                                    "line": 824,
                                                                    "character": 32
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "PermissionCheckResult",
                                        "id": 1024
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 823,
                                    "character": 36
                                }
                            ]
                        },
                        {
                            "id": 14799,
                            "name": "createRecordAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Creates a new record with the specified cell values.",
                                "text": "Throws an error if the user does not have permission to create the given records, or\nif invalid input is provided (eg. invalid cell values).\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the new\nrecord to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your block\nbefore the promise resolves.\n\nThe returned promise will resolve to the RecordId of the new record once it is persisted.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nfunction createNewRecord(recordFields) {\n    if (table.hasPermissionToCreateRecord(recordFields)) {\n        table.createRecordAsync(recordFields);\n    }\n    // You can now access the new record in your block (eg\n    // `table.selectRecords()`) but it is still being saved to Airtable\n    // servers (e.g. other users may not be able to see it yet).\n}\n\nasync function createNewRecordAsync(recordFields) {\n    if (table.hasPermissionToCreateRecord(recordFields)) {\n        const newRecordId = await table.createRecordAsync(recordFields);\n    }\n    // New record has been saved to Airtable servers.\n    alert(`new record with ID ${newRecordId} has been created`);\n}\n\n// Fields can be specified by name or ID\ncreateNewRecord({\n    'Project Name': 'Advertising campaign',\n    'Budget': 100,\n});\ncreateNewRecord({\n    [projectNameField.id]: 'Cat video',\n    [budgetField.id]: 200,\n});\n\n// Cell values should generally have format matching the output of\n// record.getCellValue() for the field being updated\ncreateNewRecord({\n    'Project Name': 'Cat video 2'\n    'Category (single select)': {name: 'Video'},\n    'Tags (multiple select)': [{name: 'Cats'}, {id: 'someChoiceId'}],\n    'Assets (attachment)': [{url: 'http://mywebsite.com/cats.mp4'}],\n    'Related projects (linked records)': [{id: 'someRecordId'}],\n});\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14800,
                                    "name": "createRecordAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Creates a new record with the specified cell values.",
                                        "text": "Throws an error if the user does not have permission to create the given records, or\nif invalid input is provided (eg. invalid cell values).\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the new\nrecord to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your block\nbefore the promise resolves.\n\nThe returned promise will resolve to the RecordId of the new record once it is persisted.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nfunction createNewRecord(recordFields) {\n    if (table.hasPermissionToCreateRecord(recordFields)) {\n        table.createRecordAsync(recordFields);\n    }\n    // You can now access the new record in your block (eg\n    // `table.selectRecords()`) but it is still being saved to Airtable\n    // servers (e.g. other users may not be able to see it yet).\n}\n\nasync function createNewRecordAsync(recordFields) {\n    if (table.hasPermissionToCreateRecord(recordFields)) {\n        const newRecordId = await table.createRecordAsync(recordFields);\n    }\n    // New record has been saved to Airtable servers.\n    alert(`new record with ID ${newRecordId} has been created`);\n}\n\n// Fields can be specified by name or ID\ncreateNewRecord({\n    'Project Name': 'Advertising campaign',\n    'Budget': 100,\n});\ncreateNewRecord({\n    [projectNameField.id]: 'Cat video',\n    [budgetField.id]: 200,\n});\n\n// Cell values should generally have format matching the output of\n// record.getCellValue() for the field being updated\ncreateNewRecord({\n    'Project Name': 'Cat video 2'\n    'Category (single select)': {name: 'Video'},\n    'Tags (multiple select)': [{name: 'Cats'}, {id: 'someChoiceId'}],\n    'Assets (attachment)': [{url: 'http://mywebsite.com/cats.mp4'}],\n    'Related projects (linked records)': [{id: 'someRecordId'}],\n});\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14801,
                                            "name": "fields",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "object mapping `FieldId` or field name to value for that field."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ObjectMap",
                                                "typeArguments": [
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "reference",
                                                                "name": "FieldId",
                                                                "id": 635
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "string"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                ]
                                            },
                                            "defaultValue": " {}"
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "RecordId",
                                                "id": 644
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 1169,
                                    "character": 27
                                }
                            ]
                        },
                        {
                            "id": 14808,
                            "name": "createRecordsAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Creates new records with the specified cell values.",
                                "text": "Throws an error if the user does not have permission to create the given records, or\nif invalid input is provided (eg. invalid cell values).\n\nYou may only create up to 50 records in one call to `createRecordsAsync`.\nSee [Writing changes to records](/packages/sdk/docs/guide_writes.md) for more information\nabout write limits.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the new\nrecord to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your block\nbefore the promise resolves.\n\nThe returned promise will resolve to an array of RecordIds of the new records once the new\nrecords are persisted.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst recordDefs = [\n    // Fields can be specified by name or ID\n    {\n         fields: {\n             'Project Name': 'Advertising campaign',\n             'Budget': 100,\n         },\n    },\n    {\n         fields: {\n             [projectNameField.id]: 'Cat video',\n             [budgetField.id]: 200,\n         },\n    },\n    // Specifying no fields will create a new record with no cell values set\n    {\n         fields: {},\n    },\n    // Cell values should generally have format matching the output of\n    // record.getCellValue() for the field being updated\n    {\n         fields: {\n             'Project Name': 'Cat video 2'\n             'Category (single select)': {name: 'Video'},\n             'Tags (multiple select)': [{name: 'Cats'}, {id: 'choiceId'}],\n             'Assets (attachment)': [{url: 'http://mywebsite.com/cats.mp4'}],\n             'Related projects (linked records)': [{id: 'someRecordId'}],\n         },\n    },\n];\n\nfunction createNewRecords() {\n    if (table.hasPermissionToCreateRecords(recordDefs)) {\n        table.createRecordsAsync(recordDefs);\n    }\n    // You can now access the new records in your block (e.g.\n    // `table.selectRecords()`) but they are still being saved to Airtable\n    // servers (e.g. other users may not be able to see them yet.)\n}\n\nasync function createNewRecordsAsync() {\n    if (table.hasPermissionToCreateRecords(recordDefs)) {\n        const newRecordIds = await table.createRecordsAsync(recordDefs);\n    }\n    // New records have been saved to Airtable servers.\n    alert(`new records with IDs ${newRecordIds} have been created`);\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14809,
                                    "name": "createRecordsAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Creates new records with the specified cell values.",
                                        "text": "Throws an error if the user does not have permission to create the given records, or\nif invalid input is provided (eg. invalid cell values).\n\nYou may only create up to 50 records in one call to `createRecordsAsync`.\nSee [Writing changes to records](/packages/sdk/docs/guide_writes.md) for more information\nabout write limits.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the new\nrecord to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your block\nbefore the promise resolves.\n\nThe returned promise will resolve to an array of RecordIds of the new records once the new\nrecords are persisted.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst recordDefs = [\n    // Fields can be specified by name or ID\n    {\n         fields: {\n             'Project Name': 'Advertising campaign',\n             'Budget': 100,\n         },\n    },\n    {\n         fields: {\n             [projectNameField.id]: 'Cat video',\n             [budgetField.id]: 200,\n         },\n    },\n    // Specifying no fields will create a new record with no cell values set\n    {\n         fields: {},\n    },\n    // Cell values should generally have format matching the output of\n    // record.getCellValue() for the field being updated\n    {\n         fields: {\n             'Project Name': 'Cat video 2'\n             'Category (single select)': {name: 'Video'},\n             'Tags (multiple select)': [{name: 'Cats'}, {id: 'choiceId'}],\n             'Assets (attachment)': [{url: 'http://mywebsite.com/cats.mp4'}],\n             'Related projects (linked records)': [{id: 'someRecordId'}],\n         },\n    },\n];\n\nfunction createNewRecords() {\n    if (table.hasPermissionToCreateRecords(recordDefs)) {\n        table.createRecordsAsync(recordDefs);\n    }\n    // You can now access the new records in your block (e.g.\n    // `table.selectRecords()`) but they are still being saved to Airtable\n    // servers (e.g. other users may not be able to see them yet.)\n}\n\nasync function createNewRecordsAsync() {\n    if (table.hasPermissionToCreateRecords(recordDefs)) {\n        const newRecordIds = await table.createRecordsAsync(recordDefs);\n    }\n    // New records have been saved to Airtable servers.\n    alert(`new records with IDs ${newRecordIds} have been created`);\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14810,
                                            "name": "records",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "Array of objects with a `fields` key mapping `FieldId` or field name to value for that field."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "reflection",
                                                        "declaration": {
                                                            "id": 14811,
                                                            "name": "__type",
                                                            "kind": 65536,
                                                            "kindString": "Type literal",
                                                            "flags": {},
                                                            "children": [
                                                                {
                                                                    "id": 14812,
                                                                    "name": "fields",
                                                                    "kind": 32,
                                                                    "kindString": "Variable",
                                                                    "flags": {},
                                                                    "sources": [
                                                                        {
                                                                            "fileName": "src/models/table.ts",
                                                                            "line": 1326,
                                                                            "character": 38
                                                                        }
                                                                    ],
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "ObjectMap",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "union",
                                                                                "types": [
                                                                                    {
                                                                                        "type": "reference",
                                                                                        "name": "FieldId",
                                                                                        "id": 635
                                                                                    },
                                                                                    {
                                                                                        "type": "intrinsic",
                                                                                        "name": "string"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "unknown"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "groups": [
                                                                {
                                                                    "title": "Variables",
                                                                    "kind": 32,
                                                                    "children": [14812]
                                                                }
                                                            ],
                                                            "sources": [
                                                                {
                                                                    "fileName": "src/models/table.ts",
                                                                    "line": 1326,
                                                                    "character": 31
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Array",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 644
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 1325,
                                    "character": 28
                                }
                            ]
                        },
                        {
                            "id": 14781,
                            "name": "deleteRecordAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Delete the given record.",
                                "text": "Throws an error if the user does not have permission to delete the given record.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the\ndelete to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your block\nbefore the promise resolves.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nfunction deleteRecord(record) {\n    if (table.hasPermissionToDeleteRecord(record)) {\n        table.deleteRecordAsync(record);\n    }\n    // The record is now deleted within your block (eg will not be returned\n    // in `table.selectRecords`) but it is still being saved to Airtable\n    // servers (e.g. it may not look deleted to other users yet).\n}\n\nasync function deleteRecordAsync(record) {\n    if (table.hasPermissionToDeleteRecord(record)) {\n        await table.deleteRecordAsync(record);\n    }\n    // Record deletion has been saved to Airtable servers.\n    alert('record has been deleted');\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14782,
                                    "name": "deleteRecordAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Delete the given record.",
                                        "text": "Throws an error if the user does not have permission to delete the given record.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the\ndelete to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your block\nbefore the promise resolves.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nfunction deleteRecord(record) {\n    if (table.hasPermissionToDeleteRecord(record)) {\n        table.deleteRecordAsync(record);\n    }\n    // The record is now deleted within your block (eg will not be returned\n    // in `table.selectRecords`) but it is still being saved to Airtable\n    // servers (e.g. it may not look deleted to other users yet).\n}\n\nasync function deleteRecordAsync(record) {\n    if (table.hasPermissionToDeleteRecord(record)) {\n        await table.deleteRecordAsync(record);\n    }\n    // Record deletion has been saved to Airtable servers.\n    alert('record has been deleted');\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14783,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the record to be deleted"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 2296
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 644
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 937,
                                    "character": 27
                                }
                            ]
                        },
                        {
                            "id": 14790,
                            "name": "deleteRecordsAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Delete the given records.",
                                "text": "Throws an error if the user does not have permission to delete the given records.\n\nYou may only delete up to 50 records in one call to `deleteRecordsAsync`.\nSee [Writing changes to records](/packages/sdk/docs/guide_writes.md) for more information\nabout write limits.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the\ndelete to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your block\nbefore the promise resolves.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n\nfunction deleteRecords(records) {\n    if (table.hasPermissionToDeleteRecords(records)) {\n        table.deleteRecordsAsync(records);\n    }\n    // The records are now deleted within your block (eg will not be\n    // returned in `table.selectRecords()`) but are still being saved to\n    // Airtable servers (e.g. they may not look deleted to other users yet).\n}\n\nasync function deleteRecordsAsync(records) {\n    if (table.hasPermissionToDeleteRecords(records)) {\n        await table.deleteRecordsAsync(records);\n    }\n    // Record deletions have been saved to Airtable servers.\n    alert('records have been deleted');\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14791,
                                    "name": "deleteRecordsAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Delete the given records.",
                                        "text": "Throws an error if the user does not have permission to delete the given records.\n\nYou may only delete up to 50 records in one call to `deleteRecordsAsync`.\nSee [Writing changes to records](/packages/sdk/docs/guide_writes.md) for more information\nabout write limits.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the\ndelete to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your block\nbefore the promise resolves.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n\nfunction deleteRecords(records) {\n    if (table.hasPermissionToDeleteRecords(records)) {\n        table.deleteRecordsAsync(records);\n    }\n    // The records are now deleted within your block (eg will not be\n    // returned in `table.selectRecords()`) but are still being saved to\n    // Airtable servers (e.g. they may not look deleted to other users yet).\n}\n\nasync function deleteRecordsAsync(records) {\n    if (table.hasPermissionToDeleteRecords(records)) {\n        await table.deleteRecordsAsync(records);\n    }\n    // Record deletions have been saved to Airtable servers.\n    alert('records have been deleted');\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14792,
                                            "name": "recordsOrRecordIds",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "Array of Records and RecordIds"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "reference",
                                                                "name": "Record",
                                                                "id": 2296
                                                            },
                                                            {
                                                                "type": "reference",
                                                                "name": "RecordId",
                                                                "id": 644
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 1034,
                                    "character": 28
                                }
                            ]
                        },
                        {
                            "id": 14713,
                            "name": "getFieldById",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Gets the field matching the given ID. Throws if that field does not exist in this table. Use\n{@link getFieldByIdIfExists} instead if you are unsure whether a field exists with the given\nID.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst fieldId = 'fldxxxxxxxxxxxxxx';\nconst field = myTable.getFieldById(fieldId);\nconsole.log(field.name);\n// => 'Name'\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14714,
                                    "name": "getFieldById",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Gets the field matching the given ID. Throws if that field does not exist in this table. Use\n{@link getFieldByIdIfExists} instead if you are unsure whether a field exists with the given\nID.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst fieldId = 'fldxxxxxxxxxxxxxx';\nconst field = myTable.getFieldById(fieldId);\nconsole.log(field.name);\n// => 'Name'\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14715,
                                            "name": "fieldId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The ID of the field."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "FieldId",
                                                "id": 635
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Field",
                                        "id": 1340
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 220,
                                    "character": 16
                                }
                            ]
                        },
                        {
                            "id": 14710,
                            "name": "getFieldByIdIfExists",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Gets the field matching the given ID, or `null` if that field does not exist in this table.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst fieldId = 'fldxxxxxxxxxxxxxx';\nconst field = myTable.getFieldByIdIfExists(fieldId);\nif (field !== null) {\n    console.log(field.name);\n} else {\n    console.log('No field exists with that ID');\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14711,
                                    "name": "getFieldByIdIfExists",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Gets the field matching the given ID, or `null` if that field does not exist in this table.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst fieldId = 'fldxxxxxxxxxxxxxx';\nconst field = myTable.getFieldByIdIfExists(fieldId);\nif (field !== null) {\n    console.log(field.name);\n} else {\n    console.log('No field exists with that ID');\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14712,
                                            "name": "fieldId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The ID of the field."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "FieldId",
                                                "id": 635
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Field",
                                                "id": 1340
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 196,
                                    "character": 24
                                }
                            ]
                        },
                        {
                            "id": 14719,
                            "name": "getFieldByName",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Gets the field matching the given name. Throws if no field exists with that name in this\ntable. Use {@link getFieldByNameIfExists} instead if you are unsure whether a field exists\nwith the given name.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst field = myTable.getFieldByName('Name');\nconsole.log(field.id);\n// => 'fldxxxxxxxxxxxxxx'\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14720,
                                    "name": "getFieldByName",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Gets the field matching the given name. Throws if no field exists with that name in this\ntable. Use {@link getFieldByNameIfExists} instead if you are unsure whether a field exists\nwith the given name.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst field = myTable.getFieldByName('Name');\nconsole.log(field.id);\n// => 'fldxxxxxxxxxxxxxx'\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14721,
                                            "name": "fieldName",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The name of the field you're looking for."
                                            },
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Field",
                                        "id": 1340
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 263,
                                    "character": 18
                                }
                            ]
                        },
                        {
                            "id": 14716,
                            "name": "getFieldByNameIfExists",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Gets the field matching the given name, or `null` if no field exists with that name in this\ntable.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst field = myTable.getFieldByNameIfExists('Name');\nif (field !== null) {\n    console.log(field.id);\n} else {\n    console.log('No field exists with that name');\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14717,
                                    "name": "getFieldByNameIfExists",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Gets the field matching the given name, or `null` if no field exists with that name in this\ntable.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst field = myTable.getFieldByNameIfExists('Name');\nif (field !== null) {\n    console.log(field.id);\n} else {\n    console.log('No field exists with that name');\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14718,
                                            "name": "fieldName",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The name of the field you're looking for."
                                            },
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Field",
                                                "id": 1340
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 242,
                                    "character": 26
                                }
                            ]
                        },
                        {
                            "id": 14739,
                            "name": "getFirstViewOfType",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Returns the first view in the table where the type is one of `allowedViewTypes`, or `null` if\nno such view exists in the table.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {ViewType} from '@airtable/blocks/models';\nconst firstCalendarView = myTable.getFirstViewOfType(ViewType.CALENDAR);\nif (firstCalendarView !== null) {\n    console.log(firstCalendarView.name);\n} else {\n    console.log('No calendar views exist in the table');\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14740,
                                    "name": "getFirstViewOfType",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Returns the first view in the table where the type is one of `allowedViewTypes`, or `null` if\nno such view exists in the table.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {ViewType} from '@airtable/blocks/models';\nconst firstCalendarView = myTable.getFirstViewOfType(ViewType.CALENDAR);\nif (firstCalendarView !== null) {\n    console.log(firstCalendarView.name);\n} else {\n    console.log('No calendar views exist in the table');\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14741,
                                            "name": "allowedViewTypes",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "An array of view types or a single view type to match against."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Array",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "ViewType",
                                                                "id": 647
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ViewType",
                                                        "id": 647
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 14742,
                                            "name": "preferredViewOrViewId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "If a view or view ID is supplied and that view exists & has the\ncorrect type, that view will be returned before checking the other views in the table."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "View",
                                                        "id": 1973
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ViewId",
                                                        "id": 663
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "View",
                                                "id": 1973
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 439,
                                    "character": 22
                                }
                            ]
                        },
                        {
                            "id": 14727,
                            "name": "getViewById",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Gets the view matching the given ID. Throws if that view does not exist in this table. Use\n{@link getViewByIdIfExists} instead if you are unsure whether a view exists with the given\nID.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst viewId = 'viwxxxxxxxxxxxxxx';\nconst view = myTable.getViewById(viewId);\nconsole.log(view.name);\n// => 'Grid view'\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14728,
                                    "name": "getViewById",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Gets the view matching the given ID. Throws if that view does not exist in this table. Use\n{@link getViewByIdIfExists} instead if you are unsure whether a view exists with the given\nID.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst viewId = 'viwxxxxxxxxxxxxxx';\nconst view = myTable.getViewById(viewId);\nconsole.log(view.name);\n// => 'Grid view'\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14729,
                                            "name": "viewId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The ID of the view."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ViewId",
                                                "id": 663
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "View",
                                        "id": 1973
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 332,
                                    "character": 15
                                }
                            ]
                        },
                        {
                            "id": 14724,
                            "name": "getViewByIdIfExists",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Gets the view matching the given ID, or `null` if that view does not exist in this table.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst viewId = 'viwxxxxxxxxxxxxxx';\nconst view = myTable.getViewByIdIfExists(viewId);\nif (view !== null) {\n    console.log(view.name);\n} else {\n    console.log('No view exists with that ID');\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14725,
                                    "name": "getViewByIdIfExists",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Gets the view matching the given ID, or `null` if that view does not exist in this table.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst viewId = 'viwxxxxxxxxxxxxxx';\nconst view = myTable.getViewByIdIfExists(viewId);\nif (view !== null) {\n    console.log(view.name);\n} else {\n    console.log('No view exists with that ID');\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14726,
                                            "name": "viewId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The ID of the view."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ViewId",
                                                "id": 663
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "View",
                                                "id": 1973
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 303,
                                    "character": 23
                                }
                            ]
                        },
                        {
                            "id": 14733,
                            "name": "getViewByName",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Gets the view matching the given name. Throws if no view exists with that name in this table.\nUse {@link getViewByNameIfExists} instead if you are unsure whether a view exists with the\ngiven name.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst view = myTable.getViewByName('Name');\nconsole.log(view.id);\n// => 'viwxxxxxxxxxxxxxx'\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14734,
                                    "name": "getViewByName",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Gets the view matching the given name. Throws if no view exists with that name in this table.\nUse {@link getViewByNameIfExists} instead if you are unsure whether a view exists with the\ngiven name.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst view = myTable.getViewByName('Name');\nconsole.log(view.id);\n// => 'viwxxxxxxxxxxxxxx'\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14735,
                                            "name": "viewName",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The name of the view you're looking for."
                                            },
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "View",
                                        "id": 1973
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 375,
                                    "character": 17
                                }
                            ]
                        },
                        {
                            "id": 14730,
                            "name": "getViewByNameIfExists",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Gets the view matching the given name, or `null` if no view exists with that name in this\ntable.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst view = myTable.getViewByNameIfExists('Name');\nif (view !== null) {\n    console.log(view.id);\n} else {\n    console.log('No view exists with that name');\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14731,
                                    "name": "getViewByNameIfExists",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Gets the view matching the given name, or `null` if no view exists with that name in this\ntable.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst view = myTable.getViewByNameIfExists('Name');\nif (view !== null) {\n    console.log(view.id);\n} else {\n    console.log('No view exists with that name');\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14732,
                                            "name": "viewName",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The name of the view you're looking for."
                                            },
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "View",
                                                "id": 1973
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 354,
                                    "character": 25
                                }
                            ]
                        },
                        {
                            "id": 14805,
                            "name": "hasPermissionToCreateRecord",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "An alias for `checkPermissionsForCreateRecord(fields).hasPermission`.",
                                "text": "Checks whether the current user has permission to create the specified record.\n\nAccepts partial input, in the same format as {@link createRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can create a specific record, when you already know what\n// fields/cell values will be set for the record.\nconst canCreateRecord = table.hasPermissionToCreateRecord({\n    'Project Name': 'Advertising campaign',\n    'Budget': 100,\n});\nif (!canCreateRecord) {\n    alert('not allowed!');\n}\n\n// Like createRecordAsync, you can use either field names or field IDs.\nconst canCreateRecordWithFieldIds = table.hasPermissionToCreateRecord({\n    [projectNameField.id]: 'Cat video',\n    [budgetField.id]: 200,\n});\n\n// Check if user could potentially create a record.\n// Use when you don't know the specific fields/cell values yet (for example,\n// to show or hide UI controls that let you start creating a record.)\nconst canCreateUnknownRecord = table.hasPermissionToCreateRecord();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14806,
                                    "name": "hasPermissionToCreateRecord",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "An alias for `checkPermissionsForCreateRecord(fields).hasPermission`.",
                                        "text": "Checks whether the current user has permission to create the specified record.\n\nAccepts partial input, in the same format as {@link createRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can create a specific record, when you already know what\n// fields/cell values will be set for the record.\nconst canCreateRecord = table.hasPermissionToCreateRecord({\n    'Project Name': 'Advertising campaign',\n    'Budget': 100,\n});\nif (!canCreateRecord) {\n    alert('not allowed!');\n}\n\n// Like createRecordAsync, you can use either field names or field IDs.\nconst canCreateRecordWithFieldIds = table.hasPermissionToCreateRecord({\n    [projectNameField.id]: 'Cat video',\n    [budgetField.id]: 200,\n});\n\n// Check if user could potentially create a record.\n// Use when you don't know the specific fields/cell values yet (for example,\n// to show or hide UI controls that let you start creating a record.)\nconst canCreateUnknownRecord = table.hasPermissionToCreateRecord();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14807,
                                            "name": "fields",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "object mapping `FieldId` or field name to value for that field."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ObjectMap",
                                                "typeArguments": [
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "reference",
                                                                "name": "FieldId",
                                                                "id": 635
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "string"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "void"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 1252,
                                    "character": 31
                                }
                            ]
                        },
                        {
                            "id": 14818,
                            "name": "hasPermissionToCreateRecords",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "An alias for `checkPermissionsForCreateRecords(records).hasPermission`.",
                                "text": "Checks whether the current user has permission to create the specified records.\n\nAccepts partial input, in the same format as {@link createRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can create specific records, when you already know what fields/cell values\n// will be set for the records.\nconst canCreateRecords = table.hasPermissionToCreateRecords([\n    // Like createRecordsAsync, fields can be specified by name or ID\n    {\n         fields: {\n             'Project Name': 'Advertising campaign',\n             'Budget': 100,\n         }\n    },\n    {\n         fields: {\n             [projectNameField.id]: 'Cat video',\n             [budgetField.id]: 200,\n         }\n    },\n    {},\n]);\nif (!canCreateRecords) {\n    alert('not allowed');\n}\n\n// Check if user could potentially create records.\n// Use when you don't know the specific fields/cell values yet (for example,\n// to show or hide UI controls that let you start creating records).\n// Equivalent to table.hasPermissionToCreateRecord()\nconst canCreateUnknownRecords = table.hasPermissionToCreateRecords();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14819,
                                    "name": "hasPermissionToCreateRecords",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "An alias for `checkPermissionsForCreateRecords(records).hasPermission`.",
                                        "text": "Checks whether the current user has permission to create the specified records.\n\nAccepts partial input, in the same format as {@link createRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can create specific records, when you already know what fields/cell values\n// will be set for the records.\nconst canCreateRecords = table.hasPermissionToCreateRecords([\n    // Like createRecordsAsync, fields can be specified by name or ID\n    {\n         fields: {\n             'Project Name': 'Advertising campaign',\n             'Budget': 100,\n         }\n    },\n    {\n         fields: {\n             [projectNameField.id]: 'Cat video',\n             [budgetField.id]: 200,\n         }\n    },\n    {},\n]);\nif (!canCreateRecords) {\n    alert('not allowed');\n}\n\n// Check if user could potentially create records.\n// Use when you don't know the specific fields/cell values yet (for example,\n// to show or hide UI controls that let you start creating records).\n// Equivalent to table.hasPermissionToCreateRecord()\nconst canCreateUnknownRecords = table.hasPermissionToCreateRecords();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14820,
                                            "name": "records",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "Array of objects mapping `FieldId` or field name to value for that field."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "reflection",
                                                        "declaration": {
                                                            "id": 14821,
                                                            "name": "__type",
                                                            "kind": 65536,
                                                            "kindString": "Type literal",
                                                            "flags": {},
                                                            "children": [
                                                                {
                                                                    "id": 14822,
                                                                    "name": "fields",
                                                                    "kind": 32,
                                                                    "kindString": "Variable",
                                                                    "flags": {
                                                                        "isOptional": true
                                                                    },
                                                                    "sources": [
                                                                        {
                                                                            "fileName": "src/models/table.ts",
                                                                            "line": 1465,
                                                                            "character": 27
                                                                        }
                                                                    ],
                                                                    "type": {
                                                                        "type": "union",
                                                                        "types": [
                                                                            {
                                                                                "type": "reference",
                                                                                "name": "ObjectMap",
                                                                                "typeArguments": [
                                                                                    {
                                                                                        "type": "union",
                                                                                        "types": [
                                                                                            {
                                                                                                "type": "reference",
                                                                                                "name": "FieldId",
                                                                                                "id": 635
                                                                                            },
                                                                                            {
                                                                                                "type": "intrinsic",
                                                                                                "name": "string"
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "union",
                                                                                        "types": [
                                                                                            {
                                                                                                "type": "intrinsic",
                                                                                                "name": "unknown"
                                                                                            },
                                                                                            {
                                                                                                "type": "intrinsic",
                                                                                                "name": "void"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "void"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "groups": [
                                                                {
                                                                    "title": "Variables",
                                                                    "kind": 32,
                                                                    "children": [14822]
                                                                }
                                                            ],
                                                            "sources": [
                                                                {
                                                                    "fileName": "src/models/table.ts",
                                                                    "line": 1464,
                                                                    "character": 32
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 1463,
                                    "character": 32
                                }
                            ]
                        },
                        {
                            "id": 14787,
                            "name": "hasPermissionToDeleteRecord",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "An alias for `checkPermissionsForDeleteRecord(recordOrRecordId).hasPermission`.",
                                "text": "Checks whether the current user has permission to delete the specified record.\n\nAccepts optional input, in the same format as {@link deleteRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can delete a specific record\nconst canDeleteRecord = table.hasPermissionToDeleteRecord(record);\nif (!canDeleteRecord) {\n    alert('not allowed');\n}\n\n// Check if user could potentially delete a record.\n// Use when you don't know the specific record you want to delete yet (for\n// example, to show/hide UI controls that let you select a record to delete).\nconst canDeleteUnknownRecord = table.hasPermissionToDeleteRecord();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14788,
                                    "name": "hasPermissionToDeleteRecord",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "An alias for `checkPermissionsForDeleteRecord(recordOrRecordId).hasPermission`.",
                                        "text": "Checks whether the current user has permission to delete the specified record.\n\nAccepts optional input, in the same format as {@link deleteRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can delete a specific record\nconst canDeleteRecord = table.hasPermissionToDeleteRecord(record);\nif (!canDeleteRecord) {\n    alert('not allowed');\n}\n\n// Check if user could potentially delete a record.\n// Use when you don't know the specific record you want to delete yet (for\n// example, to show/hide UI controls that let you select a record to delete).\nconst canDeleteUnknownRecord = table.hasPermissionToDeleteRecord();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14789,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the record to be deleted"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 2296
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 644
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 995,
                                    "character": 31
                                }
                            ]
                        },
                        {
                            "id": 14796,
                            "name": "hasPermissionToDeleteRecords",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "An alias for `checkPermissionsForDeleteRecords(recordsOrRecordIds).hasPermission`.",
                                "text": "Checks whether the current user has permission to delete the specified records.\n\nAccepts optional input, in the same format as {@link deleteRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can delete specific records\nconst canDeleteRecords =\n    table.hasPermissionToDeleteRecords([record1, record2]);\nif (!canDeleteRecords) {\n    alert('not allowed!');\n}\n\n// Check if user could potentially delete records.\n// Use when you don't know the specific records you want to delete yet (for\n// example, to show/hide UI controls that let you select records to delete).\n// Equivalent to table.hasPermissionToDeleteRecord()\nconst canDeleteUnknownRecords = table.hasPermissionToDeleteRecords();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14797,
                                    "name": "hasPermissionToDeleteRecords",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "An alias for `checkPermissionsForDeleteRecords(recordsOrRecordIds).hasPermission`.",
                                        "text": "Checks whether the current user has permission to delete the specified records.\n\nAccepts optional input, in the same format as {@link deleteRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can delete specific records\nconst canDeleteRecords =\n    table.hasPermissionToDeleteRecords([record1, record2]);\nif (!canDeleteRecords) {\n    alert('not allowed!');\n}\n\n// Check if user could potentially delete records.\n// Use when you don't know the specific records you want to delete yet (for\n// example, to show/hide UI controls that let you select records to delete).\n// Equivalent to table.hasPermissionToDeleteRecord()\nconst canDeleteUnknownRecords = table.hasPermissionToDeleteRecords();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14798,
                                            "name": "recordsOrRecordIds",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the records to be deleted"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "reference",
                                                                "name": "Record",
                                                                "id": 2296
                                                            },
                                                            {
                                                                "type": "reference",
                                                                "name": "RecordId",
                                                                "id": 644
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 1111,
                                    "character": 32
                                }
                            ]
                        },
                        {
                            "id": 14759,
                            "name": "hasPermissionToUpdateRecord",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "An alias for `checkPermissionsForUpdateRecord(recordOrRecordId, fields).hasPermission`.",
                                "text": "Checks whether the current user has permission to perform the given record update.\n\nAccepts partial input, in the same format as {@link updateRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can update specific fields for a specific record.\nconst canUpdateRecord = table.hasPermissionToUpdateRecord(record, {\n    'Post Title': 'How to make: orange-mango pound cake',\n    'Publication Date': '2020-01-01',\n});\nif (!canUpdateRecord) {\n    alert('not allowed!');\n}\n\n// Like updateRecordAsync, you can use either field names or field IDs.\nconst canUpdateRecordWithFieldIds =\n    table.hasPermissionToUpdateRecord(record, {\n        [postTitleField.id]: 'Cake decorating tips & tricks',\n        [publicationDateField.id]: '2020-02-02',\n    });\n\n// Check if user could update a given record, when you don't know the\n// specific fields that will be updated yet (e.g. to check whether you should\n// allow a user to select a certain record to update).\nconst canUpdateUnknownFields = table.hasPermissionToUpdateRecord(record);\n\n// Check if user could update specific fields, when you don't know the\n// specific record that will be updated yet (e.g. if the field is selected\n// by the user and you want to check if your block can write to it).\nconst canUpdateUnknownRecord =\n    table.hasPermissionToUpdateRecord(undefined, {\n        'My field name': 'updated value',\n        // You can use undefined if you know you're going to update a field,\n        // but don't know the new cell value yet.\n        'Another field name': undefined,\n    });\n\n// Check if user could perform updates within the table, without knowing the\n// specific record or fields that will be updated yet. (for example, to\n// render your block in \"read only\" mode)\nconst canUpdateUnknownRecordAndFields = table.hasPermissionToUpdateRecord();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14760,
                                    "name": "hasPermissionToUpdateRecord",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "An alias for `checkPermissionsForUpdateRecord(recordOrRecordId, fields).hasPermission`.",
                                        "text": "Checks whether the current user has permission to perform the given record update.\n\nAccepts partial input, in the same format as {@link updateRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can update specific fields for a specific record.\nconst canUpdateRecord = table.hasPermissionToUpdateRecord(record, {\n    'Post Title': 'How to make: orange-mango pound cake',\n    'Publication Date': '2020-01-01',\n});\nif (!canUpdateRecord) {\n    alert('not allowed!');\n}\n\n// Like updateRecordAsync, you can use either field names or field IDs.\nconst canUpdateRecordWithFieldIds =\n    table.hasPermissionToUpdateRecord(record, {\n        [postTitleField.id]: 'Cake decorating tips & tricks',\n        [publicationDateField.id]: '2020-02-02',\n    });\n\n// Check if user could update a given record, when you don't know the\n// specific fields that will be updated yet (e.g. to check whether you should\n// allow a user to select a certain record to update).\nconst canUpdateUnknownFields = table.hasPermissionToUpdateRecord(record);\n\n// Check if user could update specific fields, when you don't know the\n// specific record that will be updated yet (e.g. if the field is selected\n// by the user and you want to check if your block can write to it).\nconst canUpdateUnknownRecord =\n    table.hasPermissionToUpdateRecord(undefined, {\n        'My field name': 'updated value',\n        // You can use undefined if you know you're going to update a field,\n        // but don't know the new cell value yet.\n        'Another field name': undefined,\n    });\n\n// Check if user could perform updates within the table, without knowing the\n// specific record or fields that will be updated yet. (for example, to\n// render your block in \"read only\" mode)\nconst canUpdateUnknownRecordAndFields = table.hasPermissionToUpdateRecord();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14761,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the record to update"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 2296
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 644
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 14762,
                                            "name": "fields",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "cell values to update in that record, specified as object mapping `FieldId` or field name to value for that field."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ObjectMap",
                                                "typeArguments": [
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "reference",
                                                                "name": "FieldId",
                                                                "id": 635
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "string"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "void"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 666,
                                    "character": 31
                                }
                            ]
                        },
                        {
                            "id": 14775,
                            "name": "hasPermissionToUpdateRecords",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "An alias for `checkPermissionsForUpdateRecords(records).hasPermission`.",
                                "text": "Checks whether the current user has permission to perform the given record updates.\n\nAccepts partial input, in the same format as {@link updateRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst recordsToUpdate = [\n    {\n        // Validating a complete record update\n        id: record1.id,\n        fields: {\n            'Post Title': 'How to make: orange-mango pound cake',\n            'Publication Date': '2020-01-01',\n        },\n    },\n    {\n        // Like updateRecordsAsync, fields can be specified by name or ID\n        id: record2.id,\n        fields: {\n            [postTitleField.id]: 'Cake decorating tips & tricks',\n            [publicationDateField.id]: '2020-02-02',\n        },\n    },\n    {\n        // Validating an update to a specific record, not knowing what\n        // fields will be updated\n        id: record3.id,\n    },\n    {\n        // Validating an update to specific cell values, not knowing what\n        // record will be updated\n        fields: {\n            'My field name': 'updated value for unknown record',\n            // You can use undefined if you know you're going to update a\n            // field, but don't know the new cell value yet.\n            'Another field name': undefined,\n        },\n    },\n];\n\nconst canUpdateRecords = table.hasPermissionToUpdateRecords(recordsToUpdate);\nif (!canUpdateRecords) {\n    alert('not allowed');\n}\n\n// Check if user could potentially update records.\n// Equivalent to table.hasPermissionToUpdateRecord()\nconst canUpdateUnknownRecordsAndFields =\n    table.hasPermissionToUpdateRecords();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14776,
                                    "name": "hasPermissionToUpdateRecords",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "An alias for `checkPermissionsForUpdateRecords(records).hasPermission`.",
                                        "text": "Checks whether the current user has permission to perform the given record updates.\n\nAccepts partial input, in the same format as {@link updateRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst recordsToUpdate = [\n    {\n        // Validating a complete record update\n        id: record1.id,\n        fields: {\n            'Post Title': 'How to make: orange-mango pound cake',\n            'Publication Date': '2020-01-01',\n        },\n    },\n    {\n        // Like updateRecordsAsync, fields can be specified by name or ID\n        id: record2.id,\n        fields: {\n            [postTitleField.id]: 'Cake decorating tips & tricks',\n            [publicationDateField.id]: '2020-02-02',\n        },\n    },\n    {\n        // Validating an update to a specific record, not knowing what\n        // fields will be updated\n        id: record3.id,\n    },\n    {\n        // Validating an update to specific cell values, not knowing what\n        // record will be updated\n        fields: {\n            'My field name': 'updated value for unknown record',\n            // You can use undefined if you know you're going to update a\n            // field, but don't know the new cell value yet.\n            'Another field name': undefined,\n        },\n    },\n];\n\nconst canUpdateRecords = table.hasPermissionToUpdateRecords(recordsToUpdate);\nif (!canUpdateRecords) {\n    alert('not allowed');\n}\n\n// Check if user could potentially update records.\n// Equivalent to table.hasPermissionToUpdateRecord()\nconst canUpdateUnknownRecordsAndFields =\n    table.hasPermissionToUpdateRecords();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14777,
                                            "name": "records",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "Array of objects containing recordId and fields/cellValues to update for that record (specified as an object mapping `FieldId` or field name to cell value)"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "reflection",
                                                        "declaration": {
                                                            "id": 14778,
                                                            "name": "__type",
                                                            "kind": 65536,
                                                            "kindString": "Type literal",
                                                            "flags": {},
                                                            "children": [
                                                                {
                                                                    "id": 14780,
                                                                    "name": "fields",
                                                                    "kind": 32,
                                                                    "kindString": "Variable",
                                                                    "flags": {
                                                                        "isOptional": true
                                                                    },
                                                                    "sources": [
                                                                        {
                                                                            "fileName": "src/models/table.ts",
                                                                            "line": 901,
                                                                            "character": 27
                                                                        }
                                                                    ],
                                                                    "type": {
                                                                        "type": "union",
                                                                        "types": [
                                                                            {
                                                                                "type": "reference",
                                                                                "name": "ObjectMap",
                                                                                "typeArguments": [
                                                                                    {
                                                                                        "type": "union",
                                                                                        "types": [
                                                                                            {
                                                                                                "type": "reference",
                                                                                                "name": "FieldId",
                                                                                                "id": 635
                                                                                            },
                                                                                            {
                                                                                                "type": "intrinsic",
                                                                                                "name": "string"
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "union",
                                                                                        "types": [
                                                                                            {
                                                                                                "type": "intrinsic",
                                                                                                "name": "unknown"
                                                                                            },
                                                                                            {
                                                                                                "type": "intrinsic",
                                                                                                "name": "void"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "void"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "id": 14779,
                                                                    "name": "id",
                                                                    "kind": 32,
                                                                    "kindString": "Variable",
                                                                    "flags": {
                                                                        "isOptional": true
                                                                    },
                                                                    "sources": [
                                                                        {
                                                                            "fileName": "src/models/table.ts",
                                                                            "line": 900,
                                                                            "character": 23
                                                                        }
                                                                    ],
                                                                    "type": {
                                                                        "type": "union",
                                                                        "types": [
                                                                            {
                                                                                "type": "reference",
                                                                                "name": "RecordId",
                                                                                "id": 644
                                                                            },
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "void"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "groups": [
                                                                {
                                                                    "title": "Variables",
                                                                    "kind": 32,
                                                                    "children": [14780, 14779]
                                                                }
                                                            ],
                                                            "sources": [
                                                                {
                                                                    "fileName": "src/models/table.ts",
                                                                    "line": 899,
                                                                    "character": 32
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 898,
                                    "character": 32
                                }
                            ]
                        },
                        {
                            "id": 14736,
                            "name": "selectRecords",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Select records from the table. Returns a {@link RecordQueryResult}.",
                                "text": "Consider using {@link useRecords} or {@link useRecordIds} instead, unless you need the\nfeatures of a QueryResult (e.g. `queryResult.getRecordById`)\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {useBase, useRecords} from '@airtable/blocks';\nimport React from 'react';\n\nfunction TodoList() {\n    const base = useBase();\n    const table = base.getTableByName('Tasks');\n\n    const queryResult = table.selectRecords();\n    const records = useRecords(queryResult);\n\n    return (\n        <ul>\n            {records.map(record => (\n                <li key={record.id}>\n                    {record.primaryCellValueAsString || 'Unnamed record'}\n                </li>\n            ))}\n        </ul>\n    );\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14737,
                                    "name": "selectRecords",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Select records from the table. Returns a {@link RecordQueryResult}.",
                                        "text": "Consider using {@link useRecords} or {@link useRecordIds} instead, unless you need the\nfeatures of a QueryResult (e.g. `queryResult.getRecordById`)\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {useBase, useRecords} from '@airtable/blocks';\nimport React from 'react';\n\nfunction TodoList() {\n    const base = useBase();\n    const table = base.getTableByName('Tasks');\n\n    const queryResult = table.selectRecords();\n    const records = useRecords(queryResult);\n\n    return (\n        <ul>\n            {records.map(record => (\n                <li key={record.id}>\n                    {record.primaryCellValueAsString || 'Unnamed record'}\n                </li>\n            ))}\n        </ul>\n    );\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14738,
                                            "name": "opts",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "Options for the query, such as sorts and fields."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "RecordQueryResultOpts",
                                                "id": 14904
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "TableOrViewQueryResult",
                                        "id": 1646
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 413,
                                    "character": 17
                                }
                            ]
                        },
                        {
                            "id": 14852,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A string representation of the model for use in debugging."
                            },
                            "signatures": [
                                {
                                    "id": 14853,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "A string representation of the model for use in debugging."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.toString",
                                        "id": 1100
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.toString",
                                "id": 1100
                            }
                        },
                        {
                            "id": 14880,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatch keys watched with `.watch`.",
                                "text": "Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"
                            },
                            "signatures": [
                                {
                                    "id": 14881,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatch keys watched with `.watch`.",
                                        "text": "Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 14882,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to unwatch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableTableKey",
                                                        "id": 14896
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableTableKey",
                                                                "id": 14896
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 14883,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the function passed to `.watch` for these keys"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 14884,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 14885,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 14886,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 14887,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableTableKey",
                                                                        "id": 14896
                                                                    }
                                                                },
                                                                {
                                                                    "id": 14888,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 113,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 14889,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the context that was passed to `.watch` for this `callback`\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableTableKey",
                                                "id": 14896
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 1060
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 111,
                                    "character": 11
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 1060
                            }
                        },
                        {
                            "id": 14751,
                            "name": "updateRecordAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Updates cell values for a record.",
                                "text": "Throws an error if the user does not have permission to update the given cell values in\nthe record, or if invalid input is provided (eg. invalid cell values).\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the updated\ncell values to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your block\nbefore the promise resolves.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nfunction updateRecord(record, recordFields) {\n    if (table.hasPermissionToUpdateRecord(record, recordFields)) {\n        table.updateRecordAsync(record, recordFields);\n    }\n    // The updated values will now show in your block (eg in\n    // `table.selectRecords()` result) but are still being saved to Airtable\n    // servers (e.g. other users may not be able to see them yet).\n}\n\nasync function updateRecordAsync(record, recordFields) {\n    if (table.hasPermissionToUpdateRecord(record, recordFields)) {\n        await table.updateRecordAsync(record, recordFields);\n    }\n    // New record has been saved to Airtable servers.\n    alert(`record with ID ${record.id} has been updated`);\n}\n\n// Fields can be specified by name or ID\nupdateRecord(record1, {\n    'Post Title': 'How to make: orange-mango pound cake',\n    'Publication Date': '2020-01-01',\n});\nupdateRecord(record2, {\n    [postTitleField.id]: 'Cake decorating tips & tricks',\n    [publicationDateField.id]: '2020-02-02',\n});\n\n// Cell values should generally have format matching the output of\n// record.getCellValue() for the field being updated\nupdateRecord(record1, {\n    'Category (single select)': {name: 'Recipe'},\n    'Tags (multiple select)': [{name: 'Desserts'}, {id: 'someChoiceId'}],\n    'Images (attachment)': [{url: 'http://mywebsite.com/cake.png'}],\n    'Related posts (linked records)': [{id: 'someRecordId'}],\n});\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14752,
                                    "name": "updateRecordAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Updates cell values for a record.",
                                        "text": "Throws an error if the user does not have permission to update the given cell values in\nthe record, or if invalid input is provided (eg. invalid cell values).\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the updated\ncell values to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your block\nbefore the promise resolves.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nfunction updateRecord(record, recordFields) {\n    if (table.hasPermissionToUpdateRecord(record, recordFields)) {\n        table.updateRecordAsync(record, recordFields);\n    }\n    // The updated values will now show in your block (eg in\n    // `table.selectRecords()` result) but are still being saved to Airtable\n    // servers (e.g. other users may not be able to see them yet).\n}\n\nasync function updateRecordAsync(record, recordFields) {\n    if (table.hasPermissionToUpdateRecord(record, recordFields)) {\n        await table.updateRecordAsync(record, recordFields);\n    }\n    // New record has been saved to Airtable servers.\n    alert(`record with ID ${record.id} has been updated`);\n}\n\n// Fields can be specified by name or ID\nupdateRecord(record1, {\n    'Post Title': 'How to make: orange-mango pound cake',\n    'Publication Date': '2020-01-01',\n});\nupdateRecord(record2, {\n    [postTitleField.id]: 'Cake decorating tips & tricks',\n    [publicationDateField.id]: '2020-02-02',\n});\n\n// Cell values should generally have format matching the output of\n// record.getCellValue() for the field being updated\nupdateRecord(record1, {\n    'Category (single select)': {name: 'Recipe'},\n    'Tags (multiple select)': [{name: 'Desserts'}, {id: 'someChoiceId'}],\n    'Images (attachment)': [{url: 'http://mywebsite.com/cake.png'}],\n    'Related posts (linked records)': [{id: 'someRecordId'}],\n});\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14753,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the record to update"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 2296
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 644
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 14754,
                                            "name": "fields",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "cell values to update in that record, specified as object mapping `FieldId` or field name to value for that field."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ObjectMap",
                                                "typeArguments": [
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "reference",
                                                                "name": "FieldId",
                                                                "id": 635
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "string"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 531,
                                    "character": 27
                                }
                            ]
                        },
                        {
                            "id": 14763,
                            "name": "updateRecordsAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Updates cell values for records.",
                                "text": "Throws an error if the user does not have permission to update the given cell values in\nthe records, or if invalid input is provided (eg. invalid cell values).\n\nYou may only update up to 50 records in one call to `updateRecordsAsync`.\nSee [Write back to Airtable](/guides/write-back-to-airtable) for more information\nabout write limits.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the\nupdates to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your block\nbefore the promise resolves.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst recordsToUpdate = [\n    // Fields can be specified by name or ID\n    {\n        id: record1.id,\n        fields: {\n            'Post Title': 'How to make: orange-mango pound cake',\n            'Publication Date': '2020-01-01',\n        },\n    },\n    {\n        id: record2.id,\n        fields: {\n            // Sets the cell values to be empty.\n            'Post Title': '',\n            'Publication Date': '',\n        },\n    },\n    {\n        id: record3.id,\n        fields: {\n            [postTitleField.id]: 'Cake decorating tips & tricks',\n            [publicationDateField.id]: '2020-02-02',\n        },\n    },\n    // Cell values should generally have format matching the output of\n    // record.getCellValue() for the field being updated\n    {\n        id: record4.id,\n        fields: {\n            'Category (single select)': {name: 'Recipe'},\n            'Tags (multiple select)': [{name: 'Desserts'}, {id: 'choiceId'}],\n            'Images (attachment)': [{url: 'http://mywebsite.com/cake.png'}],\n            'Related posts (linked records)': [{id: 'someRecordId'}],\n        },\n    },\n];\n\nfunction updateRecords() {\n    if (table.hasPermissionToUpdateRecords(recordsToUpdate)) {\n        table.updateRecordsAsync(recordsToUpdate);\n    }\n    // The records are now updated within your block (eg will be reflected in\n    // `table.selectRecords()`) but are still being saved to Airtable servers\n    // (e.g. they may not be updated for other users yet).\n}\n\nasync function updateRecordsAsync() {\n    if (table.hasPermissionToUpdateRecords(recordsToUpdate)) {\n        await table.updateRecordsAsync(recordsToUpdate);\n    }\n    // Record updates have been saved to Airtable servers.\n    alert('records have been updated');\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14764,
                                    "name": "updateRecordsAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Updates cell values for records.",
                                        "text": "Throws an error if the user does not have permission to update the given cell values in\nthe records, or if invalid input is provided (eg. invalid cell values).\n\nYou may only update up to 50 records in one call to `updateRecordsAsync`.\nSee [Write back to Airtable](/guides/write-back-to-airtable) for more information\nabout write limits.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the\nupdates to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your block\nbefore the promise resolves.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst recordsToUpdate = [\n    // Fields can be specified by name or ID\n    {\n        id: record1.id,\n        fields: {\n            'Post Title': 'How to make: orange-mango pound cake',\n            'Publication Date': '2020-01-01',\n        },\n    },\n    {\n        id: record2.id,\n        fields: {\n            // Sets the cell values to be empty.\n            'Post Title': '',\n            'Publication Date': '',\n        },\n    },\n    {\n        id: record3.id,\n        fields: {\n            [postTitleField.id]: 'Cake decorating tips & tricks',\n            [publicationDateField.id]: '2020-02-02',\n        },\n    },\n    // Cell values should generally have format matching the output of\n    // record.getCellValue() for the field being updated\n    {\n        id: record4.id,\n        fields: {\n            'Category (single select)': {name: 'Recipe'},\n            'Tags (multiple select)': [{name: 'Desserts'}, {id: 'choiceId'}],\n            'Images (attachment)': [{url: 'http://mywebsite.com/cake.png'}],\n            'Related posts (linked records)': [{id: 'someRecordId'}],\n        },\n    },\n];\n\nfunction updateRecords() {\n    if (table.hasPermissionToUpdateRecords(recordsToUpdate)) {\n        table.updateRecordsAsync(recordsToUpdate);\n    }\n    // The records are now updated within your block (eg will be reflected in\n    // `table.selectRecords()`) but are still being saved to Airtable servers\n    // (e.g. they may not be updated for other users yet).\n}\n\nasync function updateRecordsAsync() {\n    if (table.hasPermissionToUpdateRecords(recordsToUpdate)) {\n        await table.updateRecordsAsync(recordsToUpdate);\n    }\n    // Record updates have been saved to Airtable servers.\n    alert('records have been updated');\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14765,
                                            "name": "records",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "Array of objects containing recordId and fields/cellValues to update for that record (specified as an object mapping `FieldId` or field name to cell value)"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "reflection",
                                                        "declaration": {
                                                            "id": 14766,
                                                            "name": "__type",
                                                            "kind": 65536,
                                                            "kindString": "Type literal",
                                                            "flags": {},
                                                            "children": [
                                                                {
                                                                    "id": 14768,
                                                                    "name": "fields",
                                                                    "kind": 32,
                                                                    "kindString": "Variable",
                                                                    "flags": {},
                                                                    "sources": [
                                                                        {
                                                                            "fileName": "src/models/table.ts",
                                                                            "line": 748,
                                                                            "character": 27
                                                                        }
                                                                    ],
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "ObjectMap",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "union",
                                                                                "types": [
                                                                                    {
                                                                                        "type": "reference",
                                                                                        "name": "FieldId",
                                                                                        "id": 635
                                                                                    },
                                                                                    {
                                                                                        "type": "intrinsic",
                                                                                        "name": "string"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "unknown"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "id": 14767,
                                                                    "name": "id",
                                                                    "kind": 32,
                                                                    "kindString": "Variable",
                                                                    "flags": {},
                                                                    "sources": [
                                                                        {
                                                                            "fileName": "src/models/table.ts",
                                                                            "line": 747,
                                                                            "character": 23
                                                                        }
                                                                    ],
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "RecordId",
                                                                        "id": 644
                                                                    }
                                                                }
                                                            ],
                                                            "groups": [
                                                                {
                                                                    "title": "Variables",
                                                                    "kind": 32,
                                                                    "children": [14768, 14767]
                                                                }
                                                            ],
                                                            "sources": [
                                                                {
                                                                    "fileName": "src/models/table.ts",
                                                                    "line": 746,
                                                                    "character": 31
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 745,
                                    "character": 28
                                }
                            ]
                        },
                        {
                            "id": 14870,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get notified of changes to the model.",
                                "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"
                            },
                            "signatures": [
                                {
                                    "id": 14871,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get notified of changes to the model.",
                                        "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 14872,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to watch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableTableKey",
                                                        "id": 14896
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableTableKey",
                                                                "id": 14896
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 14873,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "a function to call when those keys change"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 14874,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 14875,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 14876,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 14877,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableTableKey",
                                                                        "id": 14896
                                                                    }
                                                                },
                                                                {
                                                                    "id": 14878,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 66,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 14879,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "an optional context for `this` in `callback`.\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableTableKey",
                                                "id": 14896
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 1050
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 64,
                                    "character": 9
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 1050
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [14702, 14708, 14842, 14846, 14700, 14706, 14704, 14722]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [
                                14802,
                                14813,
                                14784,
                                14793,
                                14755,
                                14769,
                                14799,
                                14808,
                                14781,
                                14790,
                                14713,
                                14710,
                                14719,
                                14716,
                                14739,
                                14727,
                                14724,
                                14733,
                                14730,
                                14805,
                                14818,
                                14787,
                                14796,
                                14759,
                                14775,
                                14736,
                                14852,
                                14880,
                                14751,
                                14763,
                                14870
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/table.ts",
                            "line": 45,
                            "character": 11
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AbstractModel",
                            "id": 1075,
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "TableData"
                                },
                                {
                                    "type": "reference",
                                    "name": "WatchableTableKey",
                                    "id": 14896
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 685,
                    "name": "TableId",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/types/table.ts",
                            "line": 8,
                            "character": 19
                        }
                    ],
                    "type": {
                        "type": "intrinsic",
                        "name": "string"
                    }
                },
                {
                    "id": 14896,
                    "name": "WatchableTableKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A key in {@link Table} that can be watched.\n- `name`\n- `description`\n- `views`\n- `fields`"
                    },
                    "sources": [
                        {
                            "fileName": "src/models/table.ts",
                            "line": 38,
                            "character": 29
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "name"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "description"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "views"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "fields"
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [14669]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [685, 14896]
                }
            ],
            "sources": [
                {
                    "fileName": "src/types/table.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 646,
            "name": "@airtable/blocks/models: View",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/types/view.ts",
            "comment": {},
            "children": [
                {
                    "id": 647,
                    "name": "ViewType",
                    "kind": 4,
                    "kindString": "Enumeration",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "An enum of Airtable's view types",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {ViewType} from '@airtable/blocks/models';\nconst gridViews = myTable.views.filter(view => (\n    view.type === ViewType.GRID\n));\n```\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 650,
                            "name": "CALENDAR",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/types/view.ts",
                                    "line": 27,
                                    "character": 12
                                }
                            ],
                            "defaultValue": "\"calendar\""
                        },
                        {
                            "id": 649,
                            "name": "FORM",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/types/view.ts",
                                    "line": 25,
                                    "character": 8
                                }
                            ],
                            "defaultValue": "\"form\""
                        },
                        {
                            "id": 651,
                            "name": "GALLERY",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/types/view.ts",
                                    "line": 29,
                                    "character": 11
                                }
                            ],
                            "defaultValue": "\"gallery\""
                        },
                        {
                            "id": 648,
                            "name": "GRID",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/types/view.ts",
                                    "line": 23,
                                    "character": 8
                                }
                            ],
                            "defaultValue": "\"grid\""
                        },
                        {
                            "id": 652,
                            "name": "KANBAN",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/types/view.ts",
                                    "line": 31,
                                    "character": 10
                                }
                            ],
                            "defaultValue": "\"kanban\""
                        }
                    ],
                    "groups": [
                        {
                            "title": "Enumeration members",
                            "kind": 16,
                            "children": [650, 649, 651, 648, 652]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/types/view.ts",
                            "line": 21,
                            "character": 20
                        }
                    ]
                },
                {
                    "id": 1973,
                    "name": "View",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A class that represents an Airtable view. Every {@link Table} has one or more views.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "models/View\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 2006,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 2007,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.id",
                                        "id": 1088
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.id",
                                "id": 1088
                            }
                        },
                        {
                            "id": 2010,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 2011,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.isDeleted",
                                        "id": 1094
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.isDeleted",
                                "id": 1094
                            }
                        },
                        {
                            "id": 1990,
                            "name": "name",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The name of the view. Can be watched.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myView.name);\n// => 'Grid view'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 1991,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The name of the view. Can be watched.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myView.name);\n// => 'Grid view'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/view.ts",
                                    "line": 88,
                                    "character": 12
                                }
                            ]
                        },
                        {
                            "id": 1992,
                            "name": "type",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The type of the view, such as Grid, Calendar, or Kanban. Should never change because view types cannot be modified.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myView.type);\n// => 'kanban'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 1993,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The type of the view, such as Grid, Calendar, or Kanban. Should never change because view types cannot be modified.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myView.type);\n// => 'kanban'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "ViewType",
                                        "id": 647
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/view.ts",
                                    "line": 100,
                                    "character": 12
                                }
                            ]
                        },
                        {
                            "id": 1994,
                            "name": "url",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The URL for the view. You can visit this URL in the browser to be taken to the view in the Airtable UI.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myView.url);\n// => 'https://airtable.com/tblxxxxxxxxxxxxxx/viwxxxxxxxxxxxxxx'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 1995,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The URL for the view. You can visit this URL in the browser to be taken to the view in the Airtable UI.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myView.url);\n// => 'https://airtable.com/tblxxxxxxxxxxxxxx/viwxxxxxxxxxxxxxx'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/view.ts",
                                    "line": 112,
                                    "character": 11
                                }
                            ]
                        },
                        {
                            "id": 1999,
                            "name": "selectMetadata",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Select the field order and visible fields from the view. Returns a\n{@link ViewMetadataQueryResult}.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nasync function loadMetadataForViewAsync(view) {\n    const viewMetadata = view.selectMetadata();\n    await viewMetadata.loadDataAsync();\n\n    console.log('Visible fields:');\n    console.log(viewMetadata.visibleFields.map(field => field.name));\n    // => ['Field 1', 'Field 2', 'Field 3']\n\n    console.log('All fields:');\n    console.log(viewMetadata.allFields.map(field => field.name));\n    // => ['Field 1', 'Field 2', 'Field 3', 'Hidden field 4']\n\n    viewMetadata.unloadData();\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2000,
                                    "name": "selectMetadata",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Select the field order and visible fields from the view. Returns a\n{@link ViewMetadataQueryResult}.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nasync function loadMetadataForViewAsync(view) {\n    const viewMetadata = view.selectMetadata();\n    await viewMetadata.loadDataAsync();\n\n    console.log('Visible fields:');\n    console.log(viewMetadata.visibleFields.map(field => field.name));\n    // => ['Field 1', 'Field 2', 'Field 3']\n\n    console.log('All fields:');\n    console.log(viewMetadata.allFields.map(field => field.name));\n    // => ['Field 1', 'Field 2', 'Field 3', 'Hidden field 4']\n\n    viewMetadata.unloadData();\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "ViewMetadataQueryResult",
                                        "id": 1874
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/view.ts",
                                    "line": 188,
                                    "character": 18
                                }
                            ]
                        },
                        {
                            "id": 1996,
                            "name": "selectRecords",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Select records from the view. Returns a {@link RecordQueryResult}.",
                                "text": "Consider using {@link useRecords} or {@link useRecordIds} instead, unless you need the\nfeatures of a QueryResult (e.g. `queryResult.getRecordById`)\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {useBase, useRecords} from '@airtable/blocks/UI';\nimport React from 'react';\n\nfunction TodoList() {\n    const base = useBase();\n    const table = base.getTableByName('Tasks');\n    const view = table.getViewByName('Grid view');\n\n    const queryResult = view.selectRecords();\n    const records = useRecords(queryResult);\n\n    return (\n        <ul>\n            {records.map(record => (\n                <li key={record.id}>\n                    {record.primaryCellValueAsString || 'Unnamed record'}\n                </li>\n            ))}\n        </ul>\n    );\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1997,
                                    "name": "selectRecords",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Select records from the view. Returns a {@link RecordQueryResult}.",
                                        "text": "Consider using {@link useRecords} or {@link useRecordIds} instead, unless you need the\nfeatures of a QueryResult (e.g. `queryResult.getRecordById`)\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {useBase, useRecords} from '@airtable/blocks/UI';\nimport React from 'react';\n\nfunction TodoList() {\n    const base = useBase();\n    const table = base.getTableByName('Tasks');\n    const view = table.getViewByName('Grid view');\n\n    const queryResult = view.selectRecords();\n    const records = useRecords(queryResult);\n\n    return (\n        <ul>\n            {records.map(record => (\n                <li key={record.id}>\n                    {record.primaryCellValueAsString || 'Unnamed record'}\n                </li>\n            ))}\n        </ul>\n    );\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1998,
                                            "name": "opts",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "Options for the query, such as sorts, fields, and record coloring. By\ndefault, records will be coloured according to the view."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "RecordQueryResultOpts",
                                                "id": 14904
                                            },
                                            "defaultValue": " {}"
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "TableOrViewQueryResult",
                                        "id": 1646
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/view.ts",
                                    "line": 151,
                                    "character": 17
                                }
                            ]
                        },
                        {
                            "id": 2016,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A string representation of the model for use in debugging."
                            },
                            "signatures": [
                                {
                                    "id": 2017,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "A string representation of the model for use in debugging."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.toString",
                                        "id": 1100
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.toString",
                                "id": 1100
                            }
                        },
                        {
                            "id": 2044,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatch keys watched with `.watch`.",
                                "text": "Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2045,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatch keys watched with `.watch`.",
                                        "text": "Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2046,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to unwatch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableViewKey",
                                                        "id": 2060
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableViewKey",
                                                                "id": 2060
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2047,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the function passed to `.watch` for these keys"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 2048,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 2049,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 2050,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2051,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableViewKey",
                                                                        "id": 2060
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2052,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 113,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 2053,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the context that was passed to `.watch` for this `callback`\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableViewKey",
                                                "id": 2060
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 1060
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 111,
                                    "character": 11
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 1060
                            }
                        },
                        {
                            "id": 2034,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get notified of changes to the model.",
                                "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2035,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get notified of changes to the model.",
                                        "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2036,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to watch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableViewKey",
                                                        "id": 2060
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableViewKey",
                                                                "id": 2060
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2037,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "a function to call when those keys change"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 2038,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 2039,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 2040,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2041,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableViewKey",
                                                                        "id": 2060
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2042,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 66,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 2043,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "an optional context for `this` in `callback`.\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableViewKey",
                                                "id": 2060
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 1050
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 64,
                                    "character": 9
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 1050
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [2006, 2010, 1990, 1992, 1994]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [1999, 1996, 2016, 2044, 2034]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/view.ts",
                            "line": 30,
                            "character": 10
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AbstractModel",
                            "id": 1075,
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "ViewData"
                                },
                                {
                                    "type": "reference",
                                    "name": "WatchableViewKey",
                                    "id": 2060
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 1874,
                    "name": "ViewMetadataQueryResult",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Contains information about a view that isn't loaded by default e.g. field order and visible fields.",
                        "text": "In a React component, we recommend using {@link useViewMetadata} instead.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nasync function loadMetadataForViewAsync(view) {\n    const viewMetadata = view.selectMetadata();\n    await viewMetadata.loadDataAsync();\n\n    console.log(viewMetadata.visibleField);\n    // => [Field, Field, Field]\n\n    console.log(viewMetadata.allFields);\n    // => [Field, Field, Field, Field, Field]\n\n    viewMetadata.unloadData();\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "models/query results/ViewMetadataQueryResult\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 1886,
                            "name": "parentView",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/models/view_metadata_query_result.ts",
                                    "line": 97,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "View",
                                "id": 1973
                            }
                        },
                        {
                            "id": 1905,
                            "name": "allFields",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Returns every field in the table in the order they appear in this view. Watchable."
                            },
                            "getSignature": [
                                {
                                    "id": 1906,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Returns every field in the table in the order they appear in this view. Watchable."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Field",
                                                "id": 1340
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/view_metadata_query_result.ts",
                                    "line": 162,
                                    "character": 17
                                }
                            ]
                        },
                        {
                            "id": 1932,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 1933,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.id",
                                        "id": 1088
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.id",
                                "id": 1088
                            }
                        },
                        {
                            "id": 1924,
                            "name": "isDataLoaded",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "getSignature": [
                                {
                                    "id": 1925,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.isDataLoaded",
                                        "id": 1168
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 91,
                                    "character": 20
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.isDataLoaded",
                                "id": 1168
                            }
                        },
                        {
                            "id": 1936,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 1937,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.isDeleted",
                                        "id": 1094
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.isDeleted",
                                "id": 1094
                            }
                        },
                        {
                            "id": 1907,
                            "name": "visibleFields",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Returns every field visible in this view. Watchable."
                            },
                            "getSignature": [
                                {
                                    "id": 1908,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Returns every field visible in this view. Watchable."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Field",
                                                "id": 1340
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/view_metadata_query_result.ts",
                                    "line": 173,
                                    "character": 21
                                }
                            ]
                        },
                        {
                            "id": 1926,
                            "name": "loadDataAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Will cause all the async data to be fetched and retained. Every call to\n`loadDataAsync` should have a matching call to `unloadData`.",
                                "text": "Returns a Promise that will resolve once the data is loaded.\n"
                            },
                            "signatures": [
                                {
                                    "id": 1927,
                                    "name": "loadDataAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Will cause all the async data to be fetched and retained. Every call to\n`loadDataAsync` should have a matching call to `unloadData`.",
                                        "text": "Returns a Promise that will resolve once the data is loaded.\n"
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.loadDataAsync",
                                        "id": 1176
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 121,
                                    "character": 23
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.loadDataAsync",
                                "id": 1176
                            }
                        },
                        {
                            "id": 1942,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A string representation of the model for use in debugging."
                            },
                            "signatures": [
                                {
                                    "id": 1943,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "A string representation of the model for use in debugging."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.toString",
                                        "id": 1100
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.toString",
                                "id": 1100
                            }
                        },
                        {
                            "id": 1928,
                            "name": "unloadData",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "signatures": [
                                {
                                    "id": 1929,
                                    "name": "unloadData",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "void"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.unloadData",
                                        "id": 1178
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 155,
                                    "character": 14
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.unloadData",
                                "id": 1178
                            }
                        },
                        {
                            "id": 1919,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatching a key that needs to load data asynchronously will automatically\ncause the data to be released. Once the data is available, the callback\nwill be called.",
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": "\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1920,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatching a key that needs to load data asynchronously will automatically\ncause the data to be released. Once the data is available, the callback\nwill be called.",
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": "\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1921,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableViewMetadataKey",
                                                        "id": 1968
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableViewMetadataKey",
                                                                "id": 1968
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 1922,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 1923,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableViewMetadataKey",
                                                "id": 1968
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 1060
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.unwatch",
                                        "id": 1163
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 73,
                                    "character": 11
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 1060
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.unwatch",
                                "id": 1163
                            }
                        },
                        {
                            "id": 1914,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Watching a key that needs to load data asynchronously will automatically\ncause the data to be fetched. Once the data is available, the callback\nwill be called.",
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": "\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1915,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Watching a key that needs to load data asynchronously will automatically\ncause the data to be fetched. Once the data is available, the callback\nwill be called.",
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": "\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1916,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableViewMetadataKey",
                                                        "id": 1968
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableViewMetadataKey",
                                                                "id": 1968
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 1917,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 1918,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableViewMetadataKey",
                                                "id": 1968
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 1050
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.watch",
                                        "id": 1158
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 48,
                                    "character": 9
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 1050
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.watch",
                                "id": 1158
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [1886]
                        },
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [1905, 1932, 1924, 1936, 1907]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [1926, 1942, 1928, 1919, 1914]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/view_metadata_query_result.ts",
                            "line": 63,
                            "character": 29
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AbstractModelWithAsyncData",
                            "id": 1143,
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "ViewMetadata"
                                },
                                {
                                    "type": "reference",
                                    "name": "WatchableViewMetadataKey",
                                    "id": 1968
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 663,
                    "name": "ViewId",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/types/view.ts",
                            "line": 8,
                            "character": 18
                        }
                    ],
                    "type": {
                        "type": "intrinsic",
                        "name": "string"
                    }
                },
                {
                    "id": 2060,
                    "name": "WatchableViewKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A key in {@link View} that can be watched.\n- `name`"
                    },
                    "sources": [
                        {
                            "fileName": "src/models/view.ts",
                            "line": 23,
                            "character": 28
                        }
                    ],
                    "type": {
                        "type": "reference",
                        "name": "ObjectValues",
                        "typeArguments": [
                            {
                                "type": "reflection",
                                "declaration": {
                                    "id": 2061,
                                    "name": "__type",
                                    "kind": 65536,
                                    "kindString": "Type literal",
                                    "flags": {},
                                    "sources": [
                                        {
                                            "fileName": "src/models/view.ts",
                                            "line": 23,
                                            "character": 44
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                },
                {
                    "id": 1968,
                    "name": "WatchableViewMetadataKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "A key in {@link ViewMetadataQueryResult} that can be watched.\n- `allFields`\n- `visibleFields`\n- `isDataLoaded`"
                    },
                    "sources": [
                        {
                            "fileName": "src/models/view_metadata_query_result.ts",
                            "line": 24,
                            "character": 29
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "isDataLoaded"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "allFields"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "visibleFields"
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Enumerations",
                    "kind": 4,
                    "children": [647]
                },
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [1973, 1874]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [663, 2060, 1968]
                }
            ],
            "sources": [
                {
                    "fileName": "src/types/view.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 721,
            "name": "@airtable/blocks/models: globalConfig",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/types/global_config.ts",
            "comment": {},
            "children": [
                {
                    "id": 722,
                    "name": "GlobalConfigArray",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "An array of {@link GlobalConfigValue}s"
                    },
                    "sources": [
                        {
                            "fileName": "src/types/global_config.ts",
                            "line": 12,
                            "character": 34
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "ReadonlyArray",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "GlobalConfigValue",
                                    "id": 953
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 937,
                    "name": "GlobalConfigObject",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "An object containing {@link GlobalConfigValue|GlobalConfigValues}"
                    },
                    "indexSignature": [
                        {
                            "id": 938,
                            "name": "__index",
                            "kind": 8192,
                            "kindString": "Index signature",
                            "flags": {},
                            "comment": {
                                "shortText": "An object containing {@link GlobalConfigValue|GlobalConfigValues}"
                            },
                            "parameters": [
                                {
                                    "id": 939,
                                    "name": "key",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalConfigValue",
                                        "id": 953
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    }
                                ]
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/types/global_config.ts",
                            "line": 14,
                            "character": 35
                        }
                    ]
                },
                {
                    "id": 943,
                    "name": "GlobalConfigUpdate",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "An instruction to set `path` within globalConfig to `value`."
                    },
                    "children": [
                        {
                            "id": 944,
                            "name": "path",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The path to update."
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/global_config.ts",
                                    "line": 35,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "GlobalConfigPath",
                                "id": 949
                            }
                        },
                        {
                            "id": 945,
                            "name": "value",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The value at `path` after updating."
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/global_config.ts",
                                    "line": 37,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalConfigValue",
                                        "id": 953
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [944, 945]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/types/global_config.ts",
                            "line": 33,
                            "character": 35
                        }
                    ]
                },
                {
                    "id": 946,
                    "name": "PartialGlobalConfigUpdate",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A version of {@link GlobalConfigUpdate} where not all values are yet known."
                    },
                    "children": [
                        {
                            "id": 947,
                            "name": "path",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The path to update."
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/global_config.ts",
                                    "line": 43,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "PartialGlobalConfigPath",
                                        "id": 951
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 948,
                            "name": "value",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The value at `path` after updating."
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/global_config.ts",
                                    "line": 45,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalConfigValue",
                                        "id": 953
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [947, 948]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/types/global_config.ts",
                            "line": 41,
                            "character": 42
                        }
                    ]
                },
                {
                    "id": 950,
                    "name": "GlobalConfigKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A single top level key or a path into the global config object"
                    },
                    "sources": [
                        {
                            "fileName": "src/types/global_config.ts",
                            "line": 6,
                            "character": 27
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "reference",
                                "name": "GlobalConfigPath",
                                "id": 949
                            },
                            {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        ]
                    }
                },
                {
                    "id": 949,
                    "name": "GlobalConfigPath",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A path of keys indexing into the global config object"
                    },
                    "sources": [
                        {
                            "fileName": "src/types/global_config.ts",
                            "line": 4,
                            "character": 28
                        }
                    ],
                    "type": {
                        "type": "reference",
                        "name": "ReadonlyArray",
                        "typeArguments": [
                            {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        ]
                    }
                },
                {
                    "id": 953,
                    "name": "GlobalConfigValue",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "The types of value that can be stored in globalConfig."
                    },
                    "sources": [
                        {
                            "fileName": "src/types/global_config.ts",
                            "line": 19,
                            "character": 29
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "intrinsic",
                                "name": "null"
                            },
                            {
                                "type": "intrinsic",
                                "name": "boolean"
                            },
                            {
                                "type": "intrinsic",
                                "name": "number"
                            },
                            {
                                "type": "intrinsic",
                                "name": "string"
                            },
                            {
                                "type": "reference",
                                "name": "GlobalConfigArray",
                                "id": 722
                            },
                            {
                                "type": "reference",
                                "name": "GlobalConfigObject",
                                "id": 937
                            }
                        ]
                    }
                },
                {
                    "id": 952,
                    "name": "PartialGlobalConfigKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A {@link GlobalConfigKey} with some parts of the path/key unknown (`undefined`)"
                    },
                    "sources": [
                        {
                            "fileName": "src/types/global_config.ts",
                            "line": 10,
                            "character": 34
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "reference",
                                "name": "PartialGlobalConfigPath",
                                "id": 951
                            },
                            {
                                "type": "intrinsic",
                                "name": "string"
                            },
                            {
                                "type": "intrinsic",
                                "name": "undefined"
                            }
                        ]
                    }
                },
                {
                    "id": 951,
                    "name": "PartialGlobalConfigPath",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A {@link GlobalConfigPath}, with some parts of the path unknown (`undefined`)"
                    },
                    "sources": [
                        {
                            "fileName": "src/types/global_config.ts",
                            "line": 8,
                            "character": 35
                        }
                    ],
                    "type": {
                        "type": "reference",
                        "name": "ReadonlyArray",
                        "typeArguments": [
                            {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    }
                                ]
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [722, 937, 943, 946]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [950, 949, 953, 952, 951]
                }
            ],
            "sources": [
                {
                    "fileName": "src/types/global_config.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 8146,
            "name": "@airtable/blocks/ui/system: All style props",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/system/all_styles_set.ts",
            "comment": {},
            "children": [
                {
                    "id": 8147,
                    "name": "AllStylesProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "In the Blocks SDK, UI components can be styled via a set of supported style props.\nThese style props (e.g. `width`, `margin`, `backgroundColor`) take a subset of\nsupported CSS properties and expose them as explicit React component props.",
                        "text": "Here is an example that uses the {@link Box} layout primitive:\n\n```\n<Box\n    display=\"flex\"\n    alignItems=\"center\"\n    justifyContent=\"center\"\n    width=\"200px\"\n    height=\"200px\"\n>\n    Hello world\n</Box>\n```\n\nThis is equivalent to the following:\n\n```\n<div style={{\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '200px',\n    height: '200px',\n}}>\n    Hello world\n</div>\n```\n\nStyle props also provide access to Airtable's design tokens, including our color\npalette, typographic scale, and spacing scale. This allows developers to quickly\nbuild UIs that adhere to the Airtable design system. As an example, numbers passed\nto the `margin` or `padding` props are converted to our spacing scale, based on\npowers of two.\n\n```\n<Box margin={0} /> // margin: 0;\n<Box margin={1} /> // margin: 4px;\n<Box margin={2} /> // margin: 8px;\n<Box margin={3} /> // margin: 16px;\n\n// Negative margins are also supported\n<Box margin={-1} /> // margin: -4px;\n<Box margin={-2} /> // margin: -8px;\n<Box margin={-3} /> // margin: -16px;\n```\n\nTo override this behavior and use a specific pixel value (or other units, like percentages\nor ems/rems), you may pass a string like `200px`. However, this is generally discouraged,\nas these values don't adhere to the same grid/vertical rhythm as the rest of our components.\n\nAs another example, style props like `backgroundColor` and `textColor` accept\n{@link Colors|color names} that ensure visual consistency with the Airtable styleguide.\nLike the spacing scale, you can always opt out by passing in hex/rgb/hsl strings directly.\n\n```\n<Box backgroundColor=\"blue\" textColor=\"white\" />\n```\n\nEach component in our UI library exposes a particular subset of style props, documented as\nstyle prop interfaces. For more information, refer to the API reference for the specific\ncomponent that you're trying to use.\n\nAll supported style props:\n* {@link AppearanceSetProps|Appearance}\n* {@link DimensionsSetProps|Dimensions}\n* {@link FlexContainerSetProps|Flex container}\n* {@link FlexItemSetProps|Flex item}\n* {@link PositionSetProps|Position}\n* {@link SpacingSetProps|Spacing}\n* {@link TypographySetProps|Typography}\n* {@link DisplayProps|Display}\n* {@link OverflowProps|Overflow}\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/Style System/All styles\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 8168,
                            "name": "alignContent",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the alignment of a flex container's lines when there is extra space in the cross-axis. This property has no effect on a single-line flex container."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/align_content.ts",
                                    "line": 10,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "AlignContentProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AlignContentProps.alignContent",
                                "id": 7712
                            }
                        },
                        {
                            "id": 8169,
                            "name": "alignItems",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the alignment of flex items on the cross-axis of a flex container."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/align_items.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "AlignItemsProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AlignItemsProps.alignItems",
                                "id": 7720
                            }
                        },
                        {
                            "id": 8178,
                            "name": "alignSelf",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Aligns flex items of the current flex line, overriding the `alignItems` value."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/align_self.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "AlignSelfProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AlignSelfProps.alignSelf",
                                "id": 7803
                            }
                        },
                        {
                            "id": 8148,
                            "name": "backgroundColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the background color of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/background_color.ts",
                                    "line": 10,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BackgroundColorProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BackgroundColorProps.backgroundColor",
                                "id": 7536
                            }
                        },
                        {
                            "id": 8149,
                            "name": "border",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets an element's border. It's a shorthand for `borderWidth`, `borderStyle`, and `borderColor`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 19,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.border",
                                "id": 7546
                            }
                        },
                        {
                            "id": 8155,
                            "name": "borderBottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's bottom border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 31,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderBottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderBottom",
                                "id": 7552
                            }
                        },
                        {
                            "id": 8152,
                            "name": "borderColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the color of all sides of an element's border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 25,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderColorProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderColor",
                                "id": 7549
                            }
                        },
                        {
                            "id": 8156,
                            "name": "borderLeft",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's left border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 33,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderLeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderLeft",
                                "id": 7553
                            }
                        },
                        {
                            "id": 8159,
                            "name": "borderRadius",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border_radius.ts",
                                    "line": 10,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderRadiusProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderRadiusProps.borderRadius",
                                "id": 7592
                            }
                        },
                        {
                            "id": 8154,
                            "name": "borderRight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's right border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 29,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderRightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderRight",
                                "id": 7551
                            }
                        },
                        {
                            "id": 8151,
                            "name": "borderStyle",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the line style for all four sides of an element's border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 23,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderStyleProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderStyle",
                                "id": 7548
                            }
                        },
                        {
                            "id": 8153,
                            "name": "borderTop",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's top border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 27,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderTopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderTop",
                                "id": 7550
                            }
                        },
                        {
                            "id": 8150,
                            "name": "borderWidth",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the widths of all four sides of an element's border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 21,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderWidthProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderWidth",
                                "id": 7547
                            }
                        },
                        {
                            "id": 8157,
                            "name": "borderX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's left and right borders."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 35,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderX",
                                "id": 7554
                            }
                        },
                        {
                            "id": 8158,
                            "name": "borderY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's top and bottom borders."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 37,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderY",
                                "id": 7555
                            }
                        },
                        {
                            "id": 8184,
                            "name": "bottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the vertical position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/bottom.ts",
                                    "line": 11,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BottomProps.bottom",
                                "id": 7879
                            }
                        },
                        {
                            "id": 8160,
                            "name": "boxShadow",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii, and color."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/box_shadow.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BoxShadowProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BoxShadowProps.boxShadow",
                                "id": 7602
                            }
                        },
                        {
                            "id": 8211,
                            "name": "display",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/display.ts",
                                    "line": 14,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "DisplayProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "DisplayProps.display",
                                "id": 8128
                            }
                        },
                        {
                            "id": 8174,
                            "name": "flex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flexGrow`, `flexShrink`, and `flexBasis`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex.ts",
                                    "line": 10,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexProps.flex",
                                "id": 7771
                            }
                        },
                        {
                            "id": 8177,
                            "name": "flexBasis",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the initial main size of a flex item."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex_basis.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexBasisProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexBasisProps.flexBasis",
                                "id": 7795
                            }
                        },
                        {
                            "id": 8170,
                            "name": "flexDirection",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed)."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/flex_direction.ts",
                                    "line": 10,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexDirectionProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexDirectionProps.flexDirection",
                                "id": 7728
                            }
                        },
                        {
                            "id": 8175,
                            "name": "flexGrow",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the flex grow factor of a flex item. If the size of flex items is smaller than the flex container, items grow to fit according to `flexGrow`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex_grow.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalsNumber"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexGrowProps.flexGrow",
                                "id": 7779
                            }
                        },
                        {
                            "id": 8176,
                            "name": "flexShrink",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the flex shrink factor of a flex item. If the size of flex items is larger than the flex container, items shrink to fit according to `flexShrink`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex_shrink.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalsNumber"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexShrinkProps.flexShrink",
                                "id": 7787
                            }
                        },
                        {
                            "id": 8171,
                            "name": "flexWrap",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/flex_wrap.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexWrapProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexWrapProps.flexWrap",
                                "id": 7736
                            }
                        },
                        {
                            "id": 8201,
                            "name": "fontFamily",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies a prioritized list of one or more font family names and/or generic family names for the selected element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/font_family.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FontFamilyProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FontFamilyProps.fontFamily",
                                "id": 8023
                            }
                        },
                        {
                            "id": 8202,
                            "name": "fontSize",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the size of the font. This property is also used to compute the size of `em`, `ex`, and other relative length units."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/font_size.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FontSizeProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FontSizeProps.fontSize",
                                "id": 8033
                            }
                        },
                        {
                            "id": 8203,
                            "name": "fontStyle",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets whether a font should be styled with a normal, italic, or oblique face."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/font_style.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FontStyleProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FontStyleProps.fontStyle",
                                "id": 8043
                            }
                        },
                        {
                            "id": 8204,
                            "name": "fontWeight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the weight (or boldness) of the font."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/font_weight.ts",
                                    "line": 11,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "FontWeightProperty"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FontWeightProps.fontWeight",
                                "id": 8051
                            }
                        },
                        {
                            "id": 8162,
                            "name": "height",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the height of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/height.ts",
                                    "line": 10,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "HeightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "HeightProps.height",
                                "id": 7641
                            }
                        },
                        {
                            "id": 8172,
                            "name": "justifyContent",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the alignment of flex items on the main axis of a flex container."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/justify_content.ts",
                                    "line": 10,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "JustifyContentProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "JustifyContentProps.justifyContent",
                                "id": 7744
                            }
                        },
                        {
                            "id": 8185,
                            "name": "left",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/left.ts",
                                    "line": 11,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "LeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "LeftProps.left",
                                "id": 7890
                            }
                        },
                        {
                            "id": 8205,
                            "name": "letterSpacing",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the spacing behavior between text characters."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/letter_spacing.ts",
                                    "line": 10,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "LetterSpacingProperty",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Length"
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "LetterSpacingProps.letterSpacing",
                                "id": 8061
                            }
                        },
                        {
                            "id": 8206,
                            "name": "lineHeight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the amount of space used for lines, such as in text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/line_height.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "LineHeightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "LineHeightProps.lineHeight",
                                "id": 8071
                            }
                        },
                        {
                            "id": 8187,
                            "name": "margin",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on all four sides of an element. It is a shorthand for `marginTop`, `marginRight`, `marginBottom`, and `marginLeft`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 17,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.margin",
                                "id": 7922
                            }
                        },
                        {
                            "id": 8190,
                            "name": "marginBottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 23,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginBottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginBottom",
                                "id": 7925
                            }
                        },
                        {
                            "id": 8191,
                            "name": "marginLeft",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the left of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 25,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginLeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginLeft",
                                "id": 7926
                            }
                        },
                        {
                            "id": 8189,
                            "name": "marginRight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the right of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 21,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginRightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginRight",
                                "id": 7924
                            }
                        },
                        {
                            "id": 8188,
                            "name": "marginTop",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 19,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginTopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginTop",
                                "id": 7923
                            }
                        },
                        {
                            "id": 8192,
                            "name": "marginX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the left and right of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 27,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginX",
                                "id": 7927
                            }
                        },
                        {
                            "id": 8193,
                            "name": "marginY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the top and bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 29,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginY",
                                "id": 7928
                            }
                        },
                        {
                            "id": 8163,
                            "name": "maxHeight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the maximum height of an element. It prevents the used value of the `height` property from becoming larger than the value specified for `maxHeight`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/max_height.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MaxHeightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MaxHeightProps.maxHeight",
                                "id": 7651
                            }
                        },
                        {
                            "id": 8164,
                            "name": "maxWidth",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the maximum width of an element. It prevents the used value of the `width` property from becoming larger than the value specified by `maxWidth`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/max_width.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MaxWidthProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MaxWidthProps.maxWidth",
                                "id": 7661
                            }
                        },
                        {
                            "id": 8165,
                            "name": "minHeight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the minimum height of an element. It prevents the used value of the `height` property from becoming smaller than the value specified for `minHeight`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/min_height.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MinHeightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MinHeightProps.minHeight",
                                "id": 7671
                            }
                        },
                        {
                            "id": 8166,
                            "name": "minWidth",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the minimum width of an element. It prevents the used value of the `width` property from becoming smaller than the value specified for `minWidth`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/min_width.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MinWidthProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MinWidthProps.minWidth",
                                "id": 7681
                            }
                        },
                        {
                            "id": 8161,
                            "name": "opacity",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the transparency of an element or the degree to which content behind an element is visible."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/opacity.ts",
                                    "line": 11,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "GlobalsNumber"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "OpacityProps.opacity",
                                "id": 7612
                            }
                        },
                        {
                            "id": 8180,
                            "name": "order",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the order to lay out an item in a flex container. Items are sorted by ascending `order` value and then by their source code order."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/order.ts",
                                    "line": 10,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalsNumber"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "OrderProps.order",
                                "id": 7819
                            }
                        },
                        {
                            "id": 8212,
                            "name": "overflow",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets what to do when an element's content is too big to fit in its block formatting context. It is a shorthand for `overflowX` and `overflowY`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/overflow.ts",
                                    "line": 14,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "OverflowProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "OverflowProps.overflow",
                                "id": 8136
                            }
                        },
                        {
                            "id": 8214,
                            "name": "overflowX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/overflow.ts",
                                    "line": 18,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "OverflowYProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "OverflowProps.overflowX",
                                "id": 8138
                            }
                        },
                        {
                            "id": 8213,
                            "name": "overflowY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/overflow.ts",
                                    "line": 16,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "OverflowXProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "OverflowProps.overflowY",
                                "id": 8137
                            }
                        },
                        {
                            "id": 8194,
                            "name": "padding",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the padding area on all four sides of an element. It is a shorthand for `paddingTop`, `paddingRight`, `paddingBottom`, and `paddingLeft`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 17,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.padding",
                                "id": 7963
                            }
                        },
                        {
                            "id": 8197,
                            "name": "paddingBottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the height of the padding area on the bottom side of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 23,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingBottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.paddingBottom",
                                "id": 7966
                            }
                        },
                        {
                            "id": 8198,
                            "name": "paddingLeft",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width of the padding area on the left side of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 25,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingLeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.paddingLeft",
                                "id": 7967
                            }
                        },
                        {
                            "id": 8196,
                            "name": "paddingRight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width of the padding area on the right side of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 21,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingRightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.paddingRight",
                                "id": 7965
                            }
                        },
                        {
                            "id": 8195,
                            "name": "paddingTop",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the height of the padding area on the top side of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 19,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingTopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.paddingTop",
                                "id": 7964
                            }
                        },
                        {
                            "id": 8199,
                            "name": "paddingX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width of the padding area on the left and right sides of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 27,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.paddingX",
                                "id": 7968
                            }
                        },
                        {
                            "id": 8200,
                            "name": "paddingY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the height of the padding area on the top and bottom sides of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 29,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.paddingY",
                                "id": 7969
                            }
                        },
                        {
                            "id": 8181,
                            "name": "position",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/position.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PositionProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PositionProps.position",
                                "id": 7839
                            }
                        },
                        {
                            "id": 8183,
                            "name": "right",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/right.ts",
                                    "line": 11,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "RightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "RightProps.right",
                                "id": 7868
                            }
                        },
                        {
                            "id": 8207,
                            "name": "textAlign",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the horizontal alignment of the text."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/text_align.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TextAlignProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "TextAlignProps.textAlign",
                                "id": 8079
                            }
                        },
                        {
                            "id": 8208,
                            "name": "textColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the foreground color value of an element's text and text decorations, and sets the `currentcolor` value.",
                                "tags": [
                                    {
                                        "tag": "see",
                                        "text": "{@link colors}\n"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/text_color.ts",
                                    "line": 14,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "ColorProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "TextColorProps.textColor",
                                "id": 8087
                            }
                        },
                        {
                            "id": 8209,
                            "name": "textDecoration",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the appearance of decorative lines on text."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/text_decoration.ts",
                                    "line": 12,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TextDecorationProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "TextDecorationProps.textDecoration",
                                "id": 8097
                            }
                        },
                        {
                            "id": 8210,
                            "name": "textTransform",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/text_transform.ts",
                                    "line": 10,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TextTransformProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "TextTransformProps.textTransform",
                                "id": 8105
                            }
                        },
                        {
                            "id": 8182,
                            "name": "top",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the vertical position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/top.ts",
                                    "line": 11,
                                    "character": 7
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "TopProps.top",
                                "id": 7857
                            }
                        },
                        {
                            "id": 8167,
                            "name": "width",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the width of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/width.ts",
                                    "line": 10,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "WidthProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "WidthProps.width",
                                "id": 7691
                            }
                        },
                        {
                            "id": 8186,
                            "name": "zIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with larger z-indexes cover those with smaller ones."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/z_index.ts",
                                    "line": 10,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "ZIndexProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "ZIndexProps.zIndex",
                                "id": 7901
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                8168,
                                8169,
                                8178,
                                8148,
                                8149,
                                8155,
                                8152,
                                8156,
                                8159,
                                8154,
                                8151,
                                8153,
                                8150,
                                8157,
                                8158,
                                8184,
                                8160,
                                8211,
                                8174,
                                8177,
                                8170,
                                8175,
                                8176,
                                8171,
                                8201,
                                8202,
                                8203,
                                8204,
                                8162,
                                8172,
                                8185,
                                8205,
                                8206,
                                8187,
                                8190,
                                8191,
                                8189,
                                8188,
                                8192,
                                8193,
                                8163,
                                8164,
                                8165,
                                8166,
                                8161,
                                8180,
                                8212,
                                8214,
                                8213,
                                8194,
                                8197,
                                8198,
                                8196,
                                8195,
                                8199,
                                8200,
                                8181,
                                8183,
                                8207,
                                8208,
                                8209,
                                8210,
                                8182,
                                8167,
                                8186
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/all_styles_set.ts",
                            "line": 113,
                            "character": 31
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AppearanceSetProps",
                            "id": 7621
                        },
                        {
                            "type": "reference",
                            "name": "DimensionsSetProps",
                            "id": 7700
                        },
                        {
                            "type": "reference",
                            "name": "FlexContainerSetProps",
                            "id": 7759
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7826
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7910
                        },
                        {
                            "type": "reference",
                            "name": "SpacingSetProps",
                            "id": 8003
                        },
                        {
                            "type": "reference",
                            "name": "TypographySetProps",
                            "id": 8112
                        },
                        {
                            "type": "reference",
                            "name": "DisplayProps",
                            "id": 8127
                        },
                        {
                            "type": "reference",
                            "name": "OverflowProps",
                            "id": 8135
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TextProps",
                            "id": 11005
                        },
                        {
                            "type": "reference",
                            "name": "BoxProps",
                            "id": 11244
                        },
                        {
                            "type": "reference",
                            "name": "HeadingProps",
                            "id": 13361
                        },
                        {
                            "type": "reference",
                            "name": "LabelProps",
                            "id": 14227
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [8147]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/system/all_styles_set.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 7534,
            "name": "@airtable/blocks/ui/system: Appearance",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/system/appearance/background_color.ts",
            "comment": {},
            "children": [
                {
                    "id": 7621,
                    "name": "AppearanceSetProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props for the visual appearance of an element.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/Style System/Appearance\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 7622,
                            "name": "backgroundColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the background color of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/background_color.ts",
                                    "line": 10,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BackgroundColorProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BackgroundColorProps.backgroundColor",
                                "id": 7536
                            }
                        },
                        {
                            "id": 7623,
                            "name": "border",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets an element's border. It's a shorthand for `borderWidth`, `borderStyle`, and `borderColor`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 19,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.border",
                                "id": 7546
                            }
                        },
                        {
                            "id": 7629,
                            "name": "borderBottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's bottom border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 31,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderBottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderBottom",
                                "id": 7552
                            }
                        },
                        {
                            "id": 7626,
                            "name": "borderColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the color of all sides of an element's border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 25,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderColorProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderColor",
                                "id": 7549
                            }
                        },
                        {
                            "id": 7630,
                            "name": "borderLeft",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's left border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 33,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderLeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderLeft",
                                "id": 7553
                            }
                        },
                        {
                            "id": 7633,
                            "name": "borderRadius",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border_radius.ts",
                                    "line": 10,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderRadiusProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderRadiusProps.borderRadius",
                                "id": 7592
                            }
                        },
                        {
                            "id": 7628,
                            "name": "borderRight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's right border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 29,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderRightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderRight",
                                "id": 7551
                            }
                        },
                        {
                            "id": 7625,
                            "name": "borderStyle",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the line style for all four sides of an element's border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 23,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderStyleProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderStyle",
                                "id": 7548
                            }
                        },
                        {
                            "id": 7627,
                            "name": "borderTop",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's top border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 27,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderTopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderTop",
                                "id": 7550
                            }
                        },
                        {
                            "id": 7624,
                            "name": "borderWidth",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the widths of all four sides of an element's border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 21,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderWidthProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderWidth",
                                "id": 7547
                            }
                        },
                        {
                            "id": 7631,
                            "name": "borderX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's left and right borders."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 35,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderX",
                                "id": 7554
                            }
                        },
                        {
                            "id": 7632,
                            "name": "borderY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's top and bottom borders."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 37,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderY",
                                "id": 7555
                            }
                        },
                        {
                            "id": 7634,
                            "name": "boxShadow",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii, and color."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/box_shadow.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BoxShadowProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BoxShadowProps.boxShadow",
                                "id": 7602
                            }
                        },
                        {
                            "id": 7635,
                            "name": "opacity",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the transparency of an element or the degree to which content behind an element is visible."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/opacity.ts",
                                    "line": 11,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "GlobalsNumber"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "OpacityProps.opacity",
                                "id": 7612
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                7622,
                                7623,
                                7629,
                                7626,
                                7630,
                                7633,
                                7628,
                                7625,
                                7627,
                                7624,
                                7631,
                                7632,
                                7634,
                                7635
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/appearance/appearance_set.ts",
                            "line": 15,
                            "character": 35
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "BackgroundColorProps",
                            "id": 7535
                        },
                        {
                            "type": "reference",
                            "name": "BorderProps",
                            "id": 7545
                        },
                        {
                            "type": "reference",
                            "name": "BorderRadiusProps",
                            "id": 7591
                        },
                        {
                            "type": "reference",
                            "name": "BoxShadowProps",
                            "id": 7601
                        },
                        {
                            "type": "reference",
                            "name": "OpacityProps",
                            "id": 7611
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8147
                        }
                    ]
                },
                {
                    "id": 7535,
                    "name": "BackgroundColorProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7536,
                            "name": "backgroundColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the background color of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/background_color.ts",
                                    "line": 10,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BackgroundColorProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7536]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/appearance/background_color.ts",
                            "line": 8,
                            "character": 37
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AppearanceSetProps",
                            "id": 7621
                        },
                        {
                            "type": "reference",
                            "name": "ProgressBarStyleProps",
                            "id": 11871
                        },
                        {
                            "type": "reference",
                            "name": "SwitchStyleProps",
                            "id": 13748
                        }
                    ]
                },
                {
                    "id": 7545,
                    "name": "BorderProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7546,
                            "name": "border",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets an element's border. It's a shorthand for `borderWidth`, `borderStyle`, and `borderColor`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 19,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7552,
                            "name": "borderBottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's bottom border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 31,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderBottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7549,
                            "name": "borderColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the color of all sides of an element's border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 25,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderColorProperty"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7553,
                            "name": "borderLeft",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's left border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 33,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderLeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7551,
                            "name": "borderRight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's right border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 29,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderRightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7548,
                            "name": "borderStyle",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the line style for all four sides of an element's border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 23,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderStyleProperty"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7550,
                            "name": "borderTop",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's top border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 27,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderTopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7547,
                            "name": "borderWidth",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the widths of all four sides of an element's border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 21,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderWidthProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7554,
                            "name": "borderX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's left and right borders."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 35,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7555,
                            "name": "borderY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's top and bottom borders."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 37,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7546, 7552, 7549, 7553, 7551, 7548, 7550, 7547, 7554, 7555]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/appearance/border.ts",
                            "line": 17,
                            "character": 28
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AppearanceSetProps",
                            "id": 7621
                        }
                    ]
                },
                {
                    "id": 7591,
                    "name": "BorderRadiusProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7592,
                            "name": "borderRadius",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border_radius.ts",
                                    "line": 10,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderRadiusProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7592]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/appearance/border_radius.ts",
                            "line": 8,
                            "character": 34
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AppearanceSetProps",
                            "id": 7621
                        },
                        {
                            "type": "reference",
                            "name": "DialogCloseButtonStyleProps",
                            "id": 13047
                        }
                    ]
                },
                {
                    "id": 7601,
                    "name": "BoxShadowProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7602,
                            "name": "boxShadow",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii, and color."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/box_shadow.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BoxShadowProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7602]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/appearance/box_shadow.ts",
                            "line": 8,
                            "character": 31
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AppearanceSetProps",
                            "id": 7621
                        }
                    ]
                },
                {
                    "id": 7611,
                    "name": "OpacityProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7612,
                            "name": "opacity",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the transparency of an element or the degree to which content behind an element is visible."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/opacity.ts",
                                    "line": 11,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "GlobalsNumber"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7612]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/appearance/opacity.ts",
                            "line": 8,
                            "character": 29
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AppearanceSetProps",
                            "id": 7621
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [7621, 7535, 7545, 7591, 7601, 7611]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/system/appearance/background_color.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 9096,
            "name": "@airtable/blocks/ui/system: Control sizes",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/control_sizes.ts",
            "comment": {},
            "children": [
                {
                    "id": 9097,
                    "name": "ControlSize",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Sizes for the {@link Button}, {@link Input}, {@link Select}, {@link SelectButtons}, and {@link Switch} components."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/control_sizes.ts",
                            "line": 13,
                            "character": 23
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "small"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "default"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "large"
                            }
                        ]
                    }
                },
                {
                    "id": 9100,
                    "name": "ControlSizeProp",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Size prop for the {@link Button}, {@link Input}, {@link Select}, {@link SelectButtons}, and {@link Switch} components."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/control_sizes.ts",
                            "line": 19,
                            "character": 27
                        }
                    ],
                    "type": {
                        "type": "reference",
                        "name": "ResponsiveProp",
                        "id": 7529,
                        "typeArguments": [
                            {
                                "type": "reference",
                                "name": "ControlSize",
                                "id": 9097
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [9097, 9100]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/control_sizes.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 7639,
            "name": "@airtable/blocks/ui/system: Dimensions",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/system/dimensions/height.ts",
            "comment": {},
            "children": [
                {
                    "id": 7700,
                    "name": "DimensionsSetProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props for the dimensions of an element.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/Style System/Dimensions\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 7701,
                            "name": "height",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the height of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/height.ts",
                                    "line": 10,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "HeightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "HeightProps.height",
                                "id": 7641
                            }
                        },
                        {
                            "id": 7702,
                            "name": "maxHeight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the maximum height of an element. It prevents the used value of the `height` property from becoming larger than the value specified for `maxHeight`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/max_height.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MaxHeightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MaxHeightProps.maxHeight",
                                "id": 7651
                            }
                        },
                        {
                            "id": 7703,
                            "name": "maxWidth",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the maximum width of an element. It prevents the used value of the `width` property from becoming larger than the value specified by `maxWidth`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/max_width.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MaxWidthProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MaxWidthProps.maxWidth",
                                "id": 7661
                            }
                        },
                        {
                            "id": 7704,
                            "name": "minHeight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the minimum height of an element. It prevents the used value of the `height` property from becoming smaller than the value specified for `minHeight`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/min_height.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MinHeightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MinHeightProps.minHeight",
                                "id": 7671
                            }
                        },
                        {
                            "id": 7705,
                            "name": "minWidth",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the minimum width of an element. It prevents the used value of the `width` property from becoming smaller than the value specified for `minWidth`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/min_width.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MinWidthProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MinWidthProps.minWidth",
                                "id": 7681
                            }
                        },
                        {
                            "id": 7706,
                            "name": "width",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the width of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/width.ts",
                                    "line": 10,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "WidthProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "WidthProps.width",
                                "id": 7691
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7701, 7702, 7703, 7704, 7705, 7706]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/dimensions/dimensions_set.ts",
                            "line": 16,
                            "character": 35
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "HeightProps",
                            "id": 7640
                        },
                        {
                            "type": "reference",
                            "name": "MaxHeightProps",
                            "id": 7650
                        },
                        {
                            "type": "reference",
                            "name": "MaxWidthProps",
                            "id": 7660
                        },
                        {
                            "type": "reference",
                            "name": "MinHeightProps",
                            "id": 7670
                        },
                        {
                            "type": "reference",
                            "name": "MinWidthProps",
                            "id": 7680
                        },
                        {
                            "type": "reference",
                            "name": "WidthProps",
                            "id": 7690
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8147
                        },
                        {
                            "type": "reference",
                            "name": "RecordCardListStyleProps",
                            "id": 12428
                        },
                        {
                            "type": "reference",
                            "name": "DialogCloseButtonStyleProps",
                            "id": 13047
                        },
                        {
                            "type": "reference",
                            "name": "DialogStyleProps",
                            "id": 13189
                        }
                    ]
                },
                {
                    "id": 7640,
                    "name": "HeightProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7641,
                            "name": "height",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the height of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/height.ts",
                                    "line": 10,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "HeightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7641]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/dimensions/height.ts",
                            "line": 8,
                            "character": 28
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "DimensionsSetProps",
                            "id": 7700
                        },
                        {
                            "type": "reference",
                            "name": "ProgressBarStyleProps",
                            "id": 11871
                        }
                    ]
                },
                {
                    "id": 7650,
                    "name": "MaxHeightProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7651,
                            "name": "maxHeight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the maximum height of an element. It prevents the used value of the `height` property from becoming larger than the value specified for `maxHeight`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/max_height.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MaxHeightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7651]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/dimensions/max_height.ts",
                            "line": 8,
                            "character": 31
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "DimensionsSetProps",
                            "id": 7700
                        }
                    ]
                },
                {
                    "id": 7660,
                    "name": "MaxWidthProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7661,
                            "name": "maxWidth",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the maximum width of an element. It prevents the used value of the `width` property from becoming larger than the value specified by `maxWidth`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/max_width.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MaxWidthProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7661]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/dimensions/max_width.ts",
                            "line": 8,
                            "character": 30
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "DimensionsSetProps",
                            "id": 7700
                        },
                        {
                            "type": "reference",
                            "name": "SelectStyleProps",
                            "id": 9119
                        },
                        {
                            "type": "reference",
                            "name": "InputStyleProps",
                            "id": 9996
                        },
                        {
                            "type": "reference",
                            "name": "CellRendererStyleProps",
                            "id": 10291
                        },
                        {
                            "type": "reference",
                            "name": "ColorPaletteStyleProps",
                            "id": 11491
                        },
                        {
                            "type": "reference",
                            "name": "ProgressBarStyleProps",
                            "id": 11871
                        },
                        {
                            "type": "reference",
                            "name": "ButtonStyleProps",
                            "id": 11954
                        },
                        {
                            "type": "reference",
                            "name": "SelectButtonsStyleProps",
                            "id": 12672
                        },
                        {
                            "type": "reference",
                            "name": "SwitchStyleProps",
                            "id": 13748
                        },
                        {
                            "type": "reference",
                            "name": "LinkStyleProps",
                            "id": 13996
                        },
                        {
                            "type": "reference",
                            "name": "TextButtonStyleProps",
                            "id": 14115
                        },
                        {
                            "type": "reference",
                            "name": "FormFieldStyleProps",
                            "id": 14317
                        }
                    ]
                },
                {
                    "id": 7670,
                    "name": "MinHeightProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7671,
                            "name": "minHeight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the minimum height of an element. It prevents the used value of the `height` property from becoming smaller than the value specified for `minHeight`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/min_height.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MinHeightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7671]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/dimensions/min_height.ts",
                            "line": 8,
                            "character": 31
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "DimensionsSetProps",
                            "id": 7700
                        }
                    ]
                },
                {
                    "id": 7680,
                    "name": "MinWidthProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7681,
                            "name": "minWidth",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the minimum width of an element. It prevents the used value of the `width` property from becoming smaller than the value specified for `minWidth`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/min_width.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MinWidthProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7681]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/dimensions/min_width.ts",
                            "line": 8,
                            "character": 30
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "DimensionsSetProps",
                            "id": 7700
                        },
                        {
                            "type": "reference",
                            "name": "SelectStyleProps",
                            "id": 9119
                        },
                        {
                            "type": "reference",
                            "name": "InputStyleProps",
                            "id": 9996
                        },
                        {
                            "type": "reference",
                            "name": "CellRendererStyleProps",
                            "id": 10291
                        },
                        {
                            "type": "reference",
                            "name": "ColorPaletteStyleProps",
                            "id": 11491
                        },
                        {
                            "type": "reference",
                            "name": "ProgressBarStyleProps",
                            "id": 11871
                        },
                        {
                            "type": "reference",
                            "name": "ButtonStyleProps",
                            "id": 11954
                        },
                        {
                            "type": "reference",
                            "name": "SelectButtonsStyleProps",
                            "id": 12672
                        },
                        {
                            "type": "reference",
                            "name": "SwitchStyleProps",
                            "id": 13748
                        },
                        {
                            "type": "reference",
                            "name": "LinkStyleProps",
                            "id": 13996
                        },
                        {
                            "type": "reference",
                            "name": "TextButtonStyleProps",
                            "id": 14115
                        },
                        {
                            "type": "reference",
                            "name": "FormFieldStyleProps",
                            "id": 14317
                        }
                    ]
                },
                {
                    "id": 7690,
                    "name": "WidthProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7691,
                            "name": "width",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the width of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/width.ts",
                                    "line": 10,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "WidthProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7691]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/dimensions/width.ts",
                            "line": 8,
                            "character": 27
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "DimensionsSetProps",
                            "id": 7700
                        },
                        {
                            "type": "reference",
                            "name": "SelectStyleProps",
                            "id": 9119
                        },
                        {
                            "type": "reference",
                            "name": "InputStyleProps",
                            "id": 9996
                        },
                        {
                            "type": "reference",
                            "name": "CellRendererStyleProps",
                            "id": 10291
                        },
                        {
                            "type": "reference",
                            "name": "ColorPaletteStyleProps",
                            "id": 11491
                        },
                        {
                            "type": "reference",
                            "name": "ProgressBarStyleProps",
                            "id": 11871
                        },
                        {
                            "type": "reference",
                            "name": "ButtonStyleProps",
                            "id": 11954
                        },
                        {
                            "type": "reference",
                            "name": "SelectButtonsStyleProps",
                            "id": 12672
                        },
                        {
                            "type": "reference",
                            "name": "SwitchStyleProps",
                            "id": 13748
                        },
                        {
                            "type": "reference",
                            "name": "LinkStyleProps",
                            "id": 13996
                        },
                        {
                            "type": "reference",
                            "name": "TextButtonStyleProps",
                            "id": 14115
                        },
                        {
                            "type": "reference",
                            "name": "FormFieldStyleProps",
                            "id": 14317
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [7700, 7640, 7650, 7660, 7670, 7680, 7690]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/system/dimensions/height.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 8126,
            "name": "@airtable/blocks/ui/system: Display",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/system/display.ts",
            "comment": {},
            "children": [
                {
                    "id": 8127,
                    "name": "DisplayProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style prop for the display type of an element.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/Style System/Display\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 8128,
                            "name": "display",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/display.ts",
                                    "line": 14,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "DisplayProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8128]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/display.ts",
                            "line": 12,
                            "character": 29
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8147
                        },
                        {
                            "type": "reference",
                            "name": "DialogCloseButtonStyleProps",
                            "id": 13047
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [8127]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/system/display.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 7710,
            "name": "@airtable/blocks/ui/system: Flex container",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/system/flex_container/align_content.ts",
            "comment": {},
            "children": [
                {
                    "id": 7711,
                    "name": "AlignContentProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7712,
                            "name": "alignContent",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the alignment of a flex container's lines when there is extra space in the cross-axis. This property has no effect on a single-line flex container."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/align_content.ts",
                                    "line": 10,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "AlignContentProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7712]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_container/align_content.ts",
                            "line": 8,
                            "character": 34
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FlexContainerSetProps",
                            "id": 7759
                        }
                    ]
                },
                {
                    "id": 7719,
                    "name": "AlignItemsProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7720,
                            "name": "alignItems",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the alignment of flex items on the cross-axis of a flex container."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/align_items.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "AlignItemsProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7720]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_container/align_items.ts",
                            "line": 8,
                            "character": 32
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FlexContainerSetProps",
                            "id": 7759
                        }
                    ]
                },
                {
                    "id": 7759,
                    "name": "FlexContainerSetProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props for a flex container element.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/Style System/FlexContainer\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 7760,
                            "name": "alignContent",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the alignment of a flex container's lines when there is extra space in the cross-axis. This property has no effect on a single-line flex container."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/align_content.ts",
                                    "line": 10,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "AlignContentProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AlignContentProps.alignContent",
                                "id": 7712
                            }
                        },
                        {
                            "id": 7761,
                            "name": "alignItems",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the alignment of flex items on the cross-axis of a flex container."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/align_items.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "AlignItemsProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AlignItemsProps.alignItems",
                                "id": 7720
                            }
                        },
                        {
                            "id": 7762,
                            "name": "flexDirection",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed)."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/flex_direction.ts",
                                    "line": 10,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexDirectionProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexDirectionProps.flexDirection",
                                "id": 7728
                            }
                        },
                        {
                            "id": 7763,
                            "name": "flexWrap",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/flex_wrap.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexWrapProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexWrapProps.flexWrap",
                                "id": 7736
                            }
                        },
                        {
                            "id": 7764,
                            "name": "justifyContent",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the alignment of flex items on the main axis of a flex container."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/justify_content.ts",
                                    "line": 10,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "JustifyContentProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "JustifyContentProps.justifyContent",
                                "id": 7744
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7760, 7761, 7762, 7763, 7764]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_container/flex_container_set.ts",
                            "line": 16,
                            "character": 38
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AlignContentProps",
                            "id": 7711
                        },
                        {
                            "type": "reference",
                            "name": "AlignItemsProps",
                            "id": 7719
                        },
                        {
                            "type": "reference",
                            "name": "FlexDirectionProps",
                            "id": 7727
                        },
                        {
                            "type": "reference",
                            "name": "FlexWrapProps",
                            "id": 7735
                        },
                        {
                            "type": "reference",
                            "name": "JustifyContentProps",
                            "id": 7743
                        },
                        {
                            "type": "reference",
                            "name": "JustifyItemsProps"
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8147
                        },
                        {
                            "type": "reference",
                            "name": "DialogCloseButtonStyleProps",
                            "id": 13047
                        },
                        {
                            "type": "reference",
                            "name": "DialogStyleProps",
                            "id": 13189
                        }
                    ]
                },
                {
                    "id": 7727,
                    "name": "FlexDirectionProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7728,
                            "name": "flexDirection",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed)."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/flex_direction.ts",
                                    "line": 10,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexDirectionProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7728]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_container/flex_direction.ts",
                            "line": 8,
                            "character": 35
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FlexContainerSetProps",
                            "id": 7759
                        }
                    ]
                },
                {
                    "id": 7735,
                    "name": "FlexWrapProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7736,
                            "name": "flexWrap",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/flex_wrap.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexWrapProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7736]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_container/flex_wrap.ts",
                            "line": 8,
                            "character": 30
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FlexContainerSetProps",
                            "id": 7759
                        }
                    ]
                },
                {
                    "id": 7743,
                    "name": "JustifyContentProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7744,
                            "name": "justifyContent",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the alignment of flex items on the main axis of a flex container."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/justify_content.ts",
                                    "line": 10,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "JustifyContentProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7744]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_container/justify_content.ts",
                            "line": 8,
                            "character": 36
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FlexContainerSetProps",
                            "id": 7759
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [7711, 7719, 7759, 7727, 7735, 7743]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/system/flex_container/align_content.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 7769,
            "name": "@airtable/blocks/ui/system: Flex item",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/system/flex_item/flex.ts",
            "comment": {},
            "children": [
                {
                    "id": 7802,
                    "name": "AlignSelfProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7803,
                            "name": "alignSelf",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Aligns flex items of the current flex line, overriding the `alignItems` value."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/align_self.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "AlignSelfProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7803]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_item/align_self.ts",
                            "line": 8,
                            "character": 31
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7826
                        }
                    ]
                },
                {
                    "id": 7794,
                    "name": "FlexBasisProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7795,
                            "name": "flexBasis",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the initial main size of a flex item."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex_basis.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexBasisProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7795]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_item/flex_basis.ts",
                            "line": 8,
                            "character": 31
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7826
                        }
                    ]
                },
                {
                    "id": 7778,
                    "name": "FlexGrowProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7779,
                            "name": "flexGrow",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the flex grow factor of a flex item. If the size of flex items is smaller than the flex container, items grow to fit according to `flexGrow`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex_grow.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalsNumber"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7779]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_item/flex_grow.ts",
                            "line": 8,
                            "character": 30
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7826
                        }
                    ]
                },
                {
                    "id": 7826,
                    "name": "FlexItemSetProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props for a flex item element.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/Style System/FlexItem\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 7831,
                            "name": "alignSelf",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Aligns flex items of the current flex line, overriding the `alignItems` value."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/align_self.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "AlignSelfProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AlignSelfProps.alignSelf",
                                "id": 7803
                            }
                        },
                        {
                            "id": 7827,
                            "name": "flex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flexGrow`, `flexShrink`, and `flexBasis`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex.ts",
                                    "line": 10,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexProps.flex",
                                "id": 7771
                            }
                        },
                        {
                            "id": 7830,
                            "name": "flexBasis",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the initial main size of a flex item."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex_basis.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexBasisProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexBasisProps.flexBasis",
                                "id": 7795
                            }
                        },
                        {
                            "id": 7828,
                            "name": "flexGrow",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the flex grow factor of a flex item. If the size of flex items is smaller than the flex container, items grow to fit according to `flexGrow`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex_grow.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalsNumber"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexGrowProps.flexGrow",
                                "id": 7779
                            }
                        },
                        {
                            "id": 7829,
                            "name": "flexShrink",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the flex shrink factor of a flex item. If the size of flex items is larger than the flex container, items shrink to fit according to `flexShrink`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex_shrink.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalsNumber"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexShrinkProps.flexShrink",
                                "id": 7787
                            }
                        },
                        {
                            "id": 7833,
                            "name": "order",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the order to lay out an item in a flex container. Items are sorted by ascending `order` value and then by their source code order."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/order.ts",
                                    "line": 10,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalsNumber"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "OrderProps.order",
                                "id": 7819
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7831, 7827, 7830, 7828, 7829, 7833]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_item/flex_item_set.ts",
                            "line": 17,
                            "character": 33
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "FlexProps",
                            "id": 7770
                        },
                        {
                            "type": "reference",
                            "name": "FlexGrowProps",
                            "id": 7778
                        },
                        {
                            "type": "reference",
                            "name": "FlexShrinkProps",
                            "id": 7786
                        },
                        {
                            "type": "reference",
                            "name": "FlexBasisProps",
                            "id": 7794
                        },
                        {
                            "type": "reference",
                            "name": "AlignSelfProps",
                            "id": 7802
                        },
                        {
                            "type": "reference",
                            "name": "JustifySelfProps"
                        },
                        {
                            "type": "reference",
                            "name": "OrderProps",
                            "id": 7818
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8147
                        },
                        {
                            "type": "reference",
                            "name": "SelectStyleProps",
                            "id": 9119
                        },
                        {
                            "type": "reference",
                            "name": "InputStyleProps",
                            "id": 9996
                        },
                        {
                            "type": "reference",
                            "name": "CellRendererStyleProps",
                            "id": 10291
                        },
                        {
                            "type": "reference",
                            "name": "IconStyleProps",
                            "id": 10496
                        },
                        {
                            "type": "reference",
                            "name": "LoaderStyleProps",
                            "id": 10658
                        },
                        {
                            "type": "reference",
                            "name": "CollaboratorTokenStyleProps",
                            "id": 11351
                        },
                        {
                            "type": "reference",
                            "name": "ChoiceTokenStyleProps",
                            "id": 11421
                        },
                        {
                            "type": "reference",
                            "name": "ColorPaletteStyleProps",
                            "id": 11491
                        },
                        {
                            "type": "reference",
                            "name": "ProgressBarStyleProps",
                            "id": 11871
                        },
                        {
                            "type": "reference",
                            "name": "ButtonStyleProps",
                            "id": 11954
                        },
                        {
                            "type": "reference",
                            "name": "RecordCardStyleProps",
                            "id": 12117
                        },
                        {
                            "type": "reference",
                            "name": "RecordCardListStyleProps",
                            "id": 12428
                        },
                        {
                            "type": "reference",
                            "name": "SelectButtonsStyleProps",
                            "id": 12672
                        },
                        {
                            "type": "reference",
                            "name": "DialogCloseButtonStyleProps",
                            "id": 13047
                        },
                        {
                            "type": "reference",
                            "name": "SwitchStyleProps",
                            "id": 13748
                        },
                        {
                            "type": "reference",
                            "name": "LinkStyleProps",
                            "id": 13996
                        },
                        {
                            "type": "reference",
                            "name": "TextButtonStyleProps",
                            "id": 14115
                        },
                        {
                            "type": "reference",
                            "name": "FormFieldStyleProps",
                            "id": 14317
                        }
                    ]
                },
                {
                    "id": 7770,
                    "name": "FlexProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7771,
                            "name": "flex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flexGrow`, `flexShrink`, and `flexBasis`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex.ts",
                                    "line": 10,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7771]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_item/flex.ts",
                            "line": 8,
                            "character": 26
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7826
                        }
                    ]
                },
                {
                    "id": 7786,
                    "name": "FlexShrinkProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7787,
                            "name": "flexShrink",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the flex shrink factor of a flex item. If the size of flex items is larger than the flex container, items shrink to fit according to `flexShrink`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex_shrink.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalsNumber"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7787]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_item/flex_shrink.ts",
                            "line": 8,
                            "character": 32
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7826
                        }
                    ]
                },
                {
                    "id": 7818,
                    "name": "OrderProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7819,
                            "name": "order",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the order to lay out an item in a flex container. Items are sorted by ascending `order` value and then by their source code order."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/order.ts",
                                    "line": 10,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalsNumber"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7819]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_item/order.ts",
                            "line": 8,
                            "character": 27
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7826
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [7802, 7794, 7778, 7826, 7770, 7786, 7818]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/system/flex_item/flex.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 8134,
            "name": "@airtable/blocks/ui/system: Overflow",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/system/overflow.ts",
            "comment": {},
            "children": [
                {
                    "id": 8135,
                    "name": "OverflowProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props for the overflow behavior of an element.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/Style System/Overflow\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 8136,
                            "name": "overflow",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets what to do when an element's content is too big to fit in its block formatting context. It is a shorthand for `overflowX` and `overflowY`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/overflow.ts",
                                    "line": 14,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "OverflowProperty"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 8138,
                            "name": "overflowX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/overflow.ts",
                                    "line": 18,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "OverflowYProperty"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 8137,
                            "name": "overflowY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/overflow.ts",
                                    "line": 16,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "OverflowXProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8136, 8138, 8137]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/overflow.ts",
                            "line": 12,
                            "character": 30
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8147
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [8135]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/system/overflow.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 7837,
            "name": "@airtable/blocks/ui/system: Position",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/system/position/position.ts",
            "comment": {},
            "children": [
                {
                    "id": 7878,
                    "name": "BottomProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7879,
                            "name": "bottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the vertical position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/bottom.ts",
                                    "line": 11,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7879]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/position/bottom.ts",
                            "line": 9,
                            "character": 28
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7910
                        }
                    ]
                },
                {
                    "id": 7889,
                    "name": "LeftProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7890,
                            "name": "left",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/left.ts",
                                    "line": 11,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "LeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7890]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/position/left.ts",
                            "line": 9,
                            "character": 26
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7910
                        }
                    ]
                },
                {
                    "id": 7838,
                    "name": "PositionProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7839,
                            "name": "position",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/position.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PositionProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7839]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/position/position.ts",
                            "line": 8,
                            "character": 30
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7910
                        }
                    ]
                },
                {
                    "id": 7910,
                    "name": "PositionSetProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props for the position of an element.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/Style System/Position\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 7914,
                            "name": "bottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the vertical position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/bottom.ts",
                                    "line": 11,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BottomProps.bottom",
                                "id": 7879
                            }
                        },
                        {
                            "id": 7915,
                            "name": "left",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/left.ts",
                                    "line": 11,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "LeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "LeftProps.left",
                                "id": 7890
                            }
                        },
                        {
                            "id": 7911,
                            "name": "position",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/position.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PositionProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PositionProps.position",
                                "id": 7839
                            }
                        },
                        {
                            "id": 7913,
                            "name": "right",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/right.ts",
                                    "line": 11,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "RightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "RightProps.right",
                                "id": 7868
                            }
                        },
                        {
                            "id": 7912,
                            "name": "top",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the vertical position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/top.ts",
                                    "line": 11,
                                    "character": 7
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "TopProps.top",
                                "id": 7857
                            }
                        },
                        {
                            "id": 7916,
                            "name": "zIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with larger z-indexes cover those with smaller ones."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/z_index.ts",
                                    "line": 10,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "ZIndexProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "ZIndexProps.zIndex",
                                "id": 7901
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7914, 7915, 7911, 7913, 7912, 7916]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/position/position_set.ts",
                            "line": 16,
                            "character": 33
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "PositionProps",
                            "id": 7838
                        },
                        {
                            "type": "reference",
                            "name": "TopProps",
                            "id": 7856
                        },
                        {
                            "type": "reference",
                            "name": "RightProps",
                            "id": 7867
                        },
                        {
                            "type": "reference",
                            "name": "BottomProps",
                            "id": 7878
                        },
                        {
                            "type": "reference",
                            "name": "LeftProps",
                            "id": 7889
                        },
                        {
                            "type": "reference",
                            "name": "ZIndexProps",
                            "id": 7900
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8147
                        },
                        {
                            "type": "reference",
                            "name": "SelectStyleProps",
                            "id": 9119
                        },
                        {
                            "type": "reference",
                            "name": "InputStyleProps",
                            "id": 9996
                        },
                        {
                            "type": "reference",
                            "name": "CellRendererStyleProps",
                            "id": 10291
                        },
                        {
                            "type": "reference",
                            "name": "IconStyleProps",
                            "id": 10496
                        },
                        {
                            "type": "reference",
                            "name": "LoaderStyleProps",
                            "id": 10658
                        },
                        {
                            "type": "reference",
                            "name": "CollaboratorTokenStyleProps",
                            "id": 11351
                        },
                        {
                            "type": "reference",
                            "name": "ChoiceTokenStyleProps",
                            "id": 11421
                        },
                        {
                            "type": "reference",
                            "name": "ColorPaletteStyleProps",
                            "id": 11491
                        },
                        {
                            "type": "reference",
                            "name": "ProgressBarStyleProps",
                            "id": 11871
                        },
                        {
                            "type": "reference",
                            "name": "ButtonStyleProps",
                            "id": 11954
                        },
                        {
                            "type": "reference",
                            "name": "RecordCardStyleProps",
                            "id": 12117
                        },
                        {
                            "type": "reference",
                            "name": "RecordCardListStyleProps",
                            "id": 12428
                        },
                        {
                            "type": "reference",
                            "name": "SelectButtonsStyleProps",
                            "id": 12672
                        },
                        {
                            "type": "reference",
                            "name": "DialogCloseButtonStyleProps",
                            "id": 13047
                        },
                        {
                            "type": "reference",
                            "name": "SwitchStyleProps",
                            "id": 13748
                        },
                        {
                            "type": "reference",
                            "name": "LinkStyleProps",
                            "id": 13996
                        },
                        {
                            "type": "reference",
                            "name": "TextButtonStyleProps",
                            "id": 14115
                        },
                        {
                            "type": "reference",
                            "name": "FormFieldStyleProps",
                            "id": 14317
                        }
                    ]
                },
                {
                    "id": 7867,
                    "name": "RightProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7868,
                            "name": "right",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/right.ts",
                                    "line": 11,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "RightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7868]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/position/right.ts",
                            "line": 9,
                            "character": 27
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7910
                        }
                    ]
                },
                {
                    "id": 7856,
                    "name": "TopProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7857,
                            "name": "top",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the vertical position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/top.ts",
                                    "line": 11,
                                    "character": 7
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7857]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/position/top.ts",
                            "line": 9,
                            "character": 25
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7910
                        }
                    ]
                },
                {
                    "id": 7900,
                    "name": "ZIndexProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7901,
                            "name": "zIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with larger z-indexes cover those with smaller ones."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/z_index.ts",
                                    "line": 10,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "ZIndexProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7901]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/position/z_index.ts",
                            "line": 8,
                            "character": 28
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7910
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [7878, 7889, 7838, 7910, 7867, 7856, 7900]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/system/position/position.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 7521,
            "name": "@airtable/blocks/ui/system: Responsive props",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/system/utils/types.ts",
            "comment": {},
            "children": [
                {
                    "id": 7522,
                    "name": "ResponsivePropObject",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "An object that specifies the responsive behavior of a {@link ResponsiveProp}.\nFor each viewport size, you may specify the value that will be used for\nthe prop. This is equivalent to defining a media query in CSS."
                    },
                    "typeParameter": [
                        {
                            "id": 7523,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 7527,
                            "name": "largeViewport",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the value of this responsive prop in a large viewport."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/utils/types.ts",
                                    "line": 16,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "T",
                                "id": 7523
                            }
                        },
                        {
                            "id": 7526,
                            "name": "mediumViewport",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the value of this responsive prop in a medium viewport."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/utils/types.ts",
                                    "line": 14,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "T",
                                "id": 7523
                            }
                        },
                        {
                            "id": 7525,
                            "name": "smallViewport",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the value of this responsive prop in a small viewport."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/utils/types.ts",
                                    "line": 12,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "T",
                                "id": 7523
                            }
                        },
                        {
                            "id": 7524,
                            "name": "xsmallViewport",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the value of this responsive prop in an extra small viewport."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/utils/types.ts",
                                    "line": 10,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "T",
                                "id": 7523
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7527, 7526, 7525, 7524]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/utils/types.ts",
                            "line": 8,
                            "character": 37
                        }
                    ]
                },
                {
                    "id": 7531,
                    "name": "OptionalResponsiveProp",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "An optional {@link ResponsiveProp} that can be null or undefined."
                    },
                    "typeParameter": [
                        {
                            "id": 7532,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/utils/types.ts",
                            "line": 32,
                            "character": 34
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "reference",
                                "name": "ResponsiveProp",
                                "id": 7529,
                                "typeArguments": [
                                    {
                                        "type": "typeParameter",
                                        "name": "T"
                                    }
                                ]
                            },
                            {
                                "type": "intrinsic",
                                "name": "undefined"
                            },
                            {
                                "type": "intrinsic",
                                "name": "null"
                            }
                        ]
                    }
                },
                {
                    "id": 7529,
                    "name": "ResponsiveProp",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A React component prop that may vary based on the viewport width.\nYou can either pass in a single value that applies to all viewports\nor a {@link ResponsivePropObject} that specifies responsive behavior."
                    },
                    "typeParameter": [
                        {
                            "id": 7530,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/utils/types.ts",
                            "line": 27,
                            "character": 26
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "typeParameter",
                                "name": "T"
                            },
                            {
                                "type": "reference",
                                "name": "ResponsivePropObject",
                                "id": 7522,
                                "typeArguments": [
                                    {
                                        "type": "typeParameter",
                                        "name": "T"
                                    }
                                ]
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [7522]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [7531, 7529]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/system/utils/types.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 7920,
            "name": "@airtable/blocks/ui/system: Spacing",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/system/spacing/margin.ts",
            "comment": {},
            "children": [
                {
                    "id": 7921,
                    "name": "MarginProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7922,
                            "name": "margin",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on all four sides of an element. It is a shorthand for `marginTop`, `marginRight`, `marginBottom`, and `marginLeft`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 17,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7925,
                            "name": "marginBottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 23,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginBottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7926,
                            "name": "marginLeft",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the left of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 25,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginLeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7924,
                            "name": "marginRight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the right of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 21,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginRightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7923,
                            "name": "marginTop",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 19,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginTopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7927,
                            "name": "marginX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the left and right of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 27,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7928,
                            "name": "marginY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the top and bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 29,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7922, 7925, 7926, 7924, 7923, 7927, 7928]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/spacing/margin.ts",
                            "line": 15,
                            "character": 28
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "SpacingSetProps",
                            "id": 8003
                        },
                        {
                            "type": "reference",
                            "name": "SelectStyleProps",
                            "id": 9119
                        },
                        {
                            "type": "reference",
                            "name": "InputStyleProps",
                            "id": 9996
                        },
                        {
                            "type": "reference",
                            "name": "CellRendererStyleProps",
                            "id": 10291
                        },
                        {
                            "type": "reference",
                            "name": "IconStyleProps",
                            "id": 10496
                        },
                        {
                            "type": "reference",
                            "name": "LoaderStyleProps",
                            "id": 10658
                        },
                        {
                            "type": "reference",
                            "name": "CollaboratorTokenStyleProps",
                            "id": 11351
                        },
                        {
                            "type": "reference",
                            "name": "ChoiceTokenStyleProps",
                            "id": 11421
                        },
                        {
                            "type": "reference",
                            "name": "ColorPaletteStyleProps",
                            "id": 11491
                        },
                        {
                            "type": "reference",
                            "name": "ProgressBarStyleProps",
                            "id": 11871
                        },
                        {
                            "type": "reference",
                            "name": "ButtonStyleProps",
                            "id": 11954
                        },
                        {
                            "type": "reference",
                            "name": "RecordCardStyleProps",
                            "id": 12117
                        },
                        {
                            "type": "reference",
                            "name": "RecordCardListStyleProps",
                            "id": 12428
                        },
                        {
                            "type": "reference",
                            "name": "SelectButtonsStyleProps",
                            "id": 12672
                        }
                    ]
                },
                {
                    "id": 7962,
                    "name": "PaddingProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7963,
                            "name": "padding",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the padding area on all four sides of an element. It is a shorthand for `paddingTop`, `paddingRight`, `paddingBottom`, and `paddingLeft`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 17,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7966,
                            "name": "paddingBottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the height of the padding area on the bottom side of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 23,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingBottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7967,
                            "name": "paddingLeft",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width of the padding area on the left side of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 25,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingLeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7965,
                            "name": "paddingRight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width of the padding area on the right side of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 21,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingRightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7964,
                            "name": "paddingTop",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the height of the padding area on the top side of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 19,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingTopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7968,
                            "name": "paddingX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width of the padding area on the left and right sides of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 27,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7969,
                            "name": "paddingY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the height of the padding area on the top and bottom sides of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 29,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7963, 7966, 7967, 7965, 7964, 7968, 7969]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/spacing/padding.ts",
                            "line": 15,
                            "character": 29
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "SpacingSetProps",
                            "id": 8003
                        }
                    ]
                },
                {
                    "id": 8003,
                    "name": "SpacingSetProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props for the spacing of an element.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/Style System/Spacing\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 8004,
                            "name": "margin",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on all four sides of an element. It is a shorthand for `marginTop`, `marginRight`, `marginBottom`, and `marginLeft`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 17,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.margin",
                                "id": 7922
                            }
                        },
                        {
                            "id": 8007,
                            "name": "marginBottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 23,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginBottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginBottom",
                                "id": 7925
                            }
                        },
                        {
                            "id": 8008,
                            "name": "marginLeft",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the left of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 25,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginLeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginLeft",
                                "id": 7926
                            }
                        },
                        {
                            "id": 8006,
                            "name": "marginRight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the right of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 21,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginRightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginRight",
                                "id": 7924
                            }
                        },
                        {
                            "id": 8005,
                            "name": "marginTop",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 19,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginTopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginTop",
                                "id": 7923
                            }
                        },
                        {
                            "id": 8009,
                            "name": "marginX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the left and right of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 27,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginX",
                                "id": 7927
                            }
                        },
                        {
                            "id": 8010,
                            "name": "marginY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the top and bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 29,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginY",
                                "id": 7928
                            }
                        },
                        {
                            "id": 8011,
                            "name": "padding",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the padding area on all four sides of an element. It is a shorthand for `paddingTop`, `paddingRight`, `paddingBottom`, and `paddingLeft`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 17,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.padding",
                                "id": 7963
                            }
                        },
                        {
                            "id": 8014,
                            "name": "paddingBottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the height of the padding area on the bottom side of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 23,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingBottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.paddingBottom",
                                "id": 7966
                            }
                        },
                        {
                            "id": 8015,
                            "name": "paddingLeft",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width of the padding area on the left side of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 25,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingLeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.paddingLeft",
                                "id": 7967
                            }
                        },
                        {
                            "id": 8013,
                            "name": "paddingRight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width of the padding area on the right side of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 21,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingRightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.paddingRight",
                                "id": 7965
                            }
                        },
                        {
                            "id": 8012,
                            "name": "paddingTop",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the height of the padding area on the top side of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 19,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingTopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.paddingTop",
                                "id": 7964
                            }
                        },
                        {
                            "id": 8016,
                            "name": "paddingX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width of the padding area on the left and right sides of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 27,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.paddingX",
                                "id": 7968
                            }
                        },
                        {
                            "id": 8017,
                            "name": "paddingY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the height of the padding area on the top and bottom sides of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 29,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.paddingY",
                                "id": 7969
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                8004,
                                8007,
                                8008,
                                8006,
                                8005,
                                8009,
                                8010,
                                8011,
                                8014,
                                8015,
                                8013,
                                8012,
                                8016,
                                8017
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/spacing/spacing_set.ts",
                            "line": 12,
                            "character": 32
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7921
                        },
                        {
                            "type": "reference",
                            "name": "PaddingProps",
                            "id": 7962
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8147
                        },
                        {
                            "type": "reference",
                            "name": "DialogCloseButtonStyleProps",
                            "id": 13047
                        },
                        {
                            "type": "reference",
                            "name": "DialogStyleProps",
                            "id": 13189
                        },
                        {
                            "type": "reference",
                            "name": "SwitchStyleProps",
                            "id": 13748
                        },
                        {
                            "type": "reference",
                            "name": "LinkStyleProps",
                            "id": 13996
                        },
                        {
                            "type": "reference",
                            "name": "TextButtonStyleProps",
                            "id": 14115
                        },
                        {
                            "type": "reference",
                            "name": "FormFieldStyleProps",
                            "id": 14317
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [7921, 7962, 8003]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/system/spacing/margin.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 8021,
            "name": "@airtable/blocks/ui/system: Typography",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/system/typography/font_family.ts",
            "comment": {},
            "children": [
                {
                    "id": 8022,
                    "name": "FontFamilyProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 8023,
                            "name": "fontFamily",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies a prioritized list of one or more font family names and/or generic family names for the selected element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/font_family.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FontFamilyProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8023]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/typography/font_family.ts",
                            "line": 8,
                            "character": 32
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TypographySetProps",
                            "id": 8112
                        }
                    ]
                },
                {
                    "id": 8032,
                    "name": "FontSizeProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 8033,
                            "name": "fontSize",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the size of the font. This property is also used to compute the size of `em`, `ex`, and other relative length units."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/font_size.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FontSizeProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8033]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/typography/font_size.ts",
                            "line": 8,
                            "character": 30
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TypographySetProps",
                            "id": 8112
                        }
                    ]
                },
                {
                    "id": 8042,
                    "name": "FontStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 8043,
                            "name": "fontStyle",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets whether a font should be styled with a normal, italic, or oblique face."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/font_style.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FontStyleProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8043]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/typography/font_style.ts",
                            "line": 8,
                            "character": 31
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TypographySetProps",
                            "id": 8112
                        }
                    ]
                },
                {
                    "id": 8050,
                    "name": "FontWeightProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 8051,
                            "name": "fontWeight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the weight (or boldness) of the font."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/font_weight.ts",
                                    "line": 11,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "FontWeightProperty"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8051]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/typography/font_weight.ts",
                            "line": 8,
                            "character": 32
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TypographySetProps",
                            "id": 8112
                        },
                        {
                            "type": "reference",
                            "name": "LinkStyleProps",
                            "id": 13996
                        }
                    ]
                },
                {
                    "id": 8060,
                    "name": "LetterSpacingProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 8061,
                            "name": "letterSpacing",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the spacing behavior between text characters."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/letter_spacing.ts",
                                    "line": 10,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "LetterSpacingProperty",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Length"
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8061]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/typography/letter_spacing.ts",
                            "line": 8,
                            "character": 35
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TypographySetProps",
                            "id": 8112
                        }
                    ]
                },
                {
                    "id": 8070,
                    "name": "LineHeightProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 8071,
                            "name": "lineHeight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the amount of space used for lines, such as in text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/line_height.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "LineHeightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8071]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/typography/line_height.ts",
                            "line": 8,
                            "character": 32
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TypographySetProps",
                            "id": 8112
                        }
                    ]
                },
                {
                    "id": 8078,
                    "name": "TextAlignProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 8079,
                            "name": "textAlign",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the horizontal alignment of the text."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/text_align.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TextAlignProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8079]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/typography/text_align.ts",
                            "line": 8,
                            "character": 31
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TypographySetProps",
                            "id": 8112
                        }
                    ]
                },
                {
                    "id": 8086,
                    "name": "TextColorProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 8087,
                            "name": "textColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the foreground color value of an element's text and text decorations, and sets the `currentcolor` value.",
                                "tags": [
                                    {
                                        "tag": "see",
                                        "text": "{@link colors}\n"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/text_color.ts",
                                    "line": 14,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "ColorProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8087]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/typography/text_color.ts",
                            "line": 8,
                            "character": 31
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TypographySetProps",
                            "id": 8112
                        }
                    ]
                },
                {
                    "id": 8096,
                    "name": "TextDecorationProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 8097,
                            "name": "textDecoration",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the appearance of decorative lines on text."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/text_decoration.ts",
                                    "line": 12,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TextDecorationProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8097]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/typography/text_decoration.ts",
                            "line": 8,
                            "character": 36
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TypographySetProps",
                            "id": 8112
                        }
                    ]
                },
                {
                    "id": 8104,
                    "name": "TextTransformProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 8105,
                            "name": "textTransform",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/text_transform.ts",
                                    "line": 10,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TextTransformProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8105]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/typography/text_transform.ts",
                            "line": 8,
                            "character": 35
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TypographySetProps",
                            "id": 8112
                        }
                    ]
                },
                {
                    "id": 8112,
                    "name": "TypographySetProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props for the typography of an element.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/Style System/Typography\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 8113,
                            "name": "fontFamily",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies a prioritized list of one or more font family names and/or generic family names for the selected element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/font_family.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FontFamilyProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FontFamilyProps.fontFamily",
                                "id": 8023
                            }
                        },
                        {
                            "id": 8114,
                            "name": "fontSize",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the size of the font. This property is also used to compute the size of `em`, `ex`, and other relative length units."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/font_size.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FontSizeProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FontSizeProps.fontSize",
                                "id": 8033
                            }
                        },
                        {
                            "id": 8115,
                            "name": "fontStyle",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets whether a font should be styled with a normal, italic, or oblique face."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/font_style.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FontStyleProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FontStyleProps.fontStyle",
                                "id": 8043
                            }
                        },
                        {
                            "id": 8116,
                            "name": "fontWeight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the weight (or boldness) of the font."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/font_weight.ts",
                                    "line": 11,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "FontWeightProperty"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FontWeightProps.fontWeight",
                                "id": 8051
                            }
                        },
                        {
                            "id": 8117,
                            "name": "letterSpacing",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the spacing behavior between text characters."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/letter_spacing.ts",
                                    "line": 10,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "LetterSpacingProperty",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Length"
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "LetterSpacingProps.letterSpacing",
                                "id": 8061
                            }
                        },
                        {
                            "id": 8118,
                            "name": "lineHeight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the amount of space used for lines, such as in text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/line_height.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "LineHeightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "LineHeightProps.lineHeight",
                                "id": 8071
                            }
                        },
                        {
                            "id": 8119,
                            "name": "textAlign",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the horizontal alignment of the text."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/text_align.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TextAlignProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "TextAlignProps.textAlign",
                                "id": 8079
                            }
                        },
                        {
                            "id": 8120,
                            "name": "textColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the foreground color value of an element's text and text decorations, and sets the `currentcolor` value.",
                                "tags": [
                                    {
                                        "tag": "see",
                                        "text": "{@link colors}\n"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/text_color.ts",
                                    "line": 14,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "ColorProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "TextColorProps.textColor",
                                "id": 8087
                            }
                        },
                        {
                            "id": 8121,
                            "name": "textDecoration",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the appearance of decorative lines on text."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/text_decoration.ts",
                                    "line": 12,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TextDecorationProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "TextDecorationProps.textDecoration",
                                "id": 8097
                            }
                        },
                        {
                            "id": 8122,
                            "name": "textTransform",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/text_transform.ts",
                                    "line": 10,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TextTransformProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "TextTransformProps.textTransform",
                                "id": 8105
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8113, 8114, 8115, 8116, 8117, 8118, 8119, 8120, 8121, 8122]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/typography/typography_set.ts",
                            "line": 20,
                            "character": 35
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "FontFamilyProps",
                            "id": 8022
                        },
                        {
                            "type": "reference",
                            "name": "FontSizeProps",
                            "id": 8032
                        },
                        {
                            "type": "reference",
                            "name": "FontStyleProps",
                            "id": 8042
                        },
                        {
                            "type": "reference",
                            "name": "FontWeightProps",
                            "id": 8050
                        },
                        {
                            "type": "reference",
                            "name": "LetterSpacingProps",
                            "id": 8060
                        },
                        {
                            "type": "reference",
                            "name": "LineHeightProps",
                            "id": 8070
                        },
                        {
                            "type": "reference",
                            "name": "TextAlignProps",
                            "id": 8078
                        },
                        {
                            "type": "reference",
                            "name": "TextColorProps",
                            "id": 8086
                        },
                        {
                            "type": "reference",
                            "name": "TextDecorationProps",
                            "id": 8096
                        },
                        {
                            "type": "reference",
                            "name": "TextTransformProps",
                            "id": 8104
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8147
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [8022, 8032, 8042, 8050, 8060, 8070, 8078, 8086, 8096, 8104, 8112]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/system/typography/font_family.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 10977,
            "name": "@airtable/blocks/ui/types: Aria props",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/types/aria_props.ts",
            "comment": {},
            "children": [
                {
                    "id": 10978,
                    "name": "AriaProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 10982,
                            "name": "aria-controls",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Identifies the element (or elements) whose contents or presence are controlled by the current element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/types/aria_props.ts",
                                    "line": 14,
                                    "character": 21
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10981,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Identifies the element (or elements) that describes the current object."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/types/aria_props.ts",
                                    "line": 12,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10983,
                            "name": "aria-expanded",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/types/aria_props.ts",
                                    "line": 16,
                                    "character": 21
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "false"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10984,
                            "name": "aria-haspopup",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/types/aria_props.ts",
                                    "line": 18,
                                    "character": 21
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "grid"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "dialog"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "menu"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "listbox"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "false"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "true"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "tree"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10985,
                            "name": "aria-hidden",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Indicates whether the element is exposed to an accessibility API."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/types/aria_props.ts",
                                    "line": 20,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "false"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10979,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Defines a string value that labels the current element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/types/aria_props.ts",
                                    "line": 8,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10980,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Identifies the element (or elements) that labels the current object."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/types/aria_props.ts",
                                    "line": 10,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10986,
                            "name": "aria-live",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/types/aria_props.ts",
                                    "line": 22,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "off"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "assertive"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "polite"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [10982, 10981, 10983, 10984, 10985, 10979, 10980, 10986]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/types/aria_props.ts",
                            "line": 6,
                            "character": 26
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TextProps",
                            "id": 11005
                        },
                        {
                            "type": "reference",
                            "name": "BoxProps",
                            "id": 11244
                        },
                        {
                            "type": "reference",
                            "name": "ButtonProps",
                            "id": 11979
                        },
                        {
                            "type": "reference",
                            "name": "HeadingProps",
                            "id": 13361
                        },
                        {
                            "type": "reference",
                            "name": "LinkProps",
                            "id": 14029
                        },
                        {
                            "type": "reference",
                            "name": "TextButtonProps",
                            "id": 14147
                        },
                        {
                            "type": "reference",
                            "name": "LabelProps",
                            "id": 14227
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [10978]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/types/aria_props.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 11243,
            "name": "@airtable/blocks/ui: Box",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/box.tsx",
            "comment": {},
            "children": [
                {
                    "id": 11244,
                    "name": "BoxProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props for the Box component. Also accepts:\n* {@link AllStylesProps}\n* {@link AriaProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Box"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 11328,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 11245,
                            "name": "as",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The element that is rendered. Defaults to `div`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/box.tsx",
                                    "line": 21,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "stringLiteral",
                                        "value": "div"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "span"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "section"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "main"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "nav"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "header"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "footer"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "aside"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "article"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "address"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "hgroup"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "blockquote"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "figure"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "figcaption"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "ol"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "ul"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "li"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "pre"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11246,
                            "name": "children",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The contents of the box."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/box.tsx",
                                    "line": 41,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "React.ReactNode"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11250,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/box.tsx",
                                    "line": 49,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11252,
                            "name": "dataAttributes",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Data attributes that are spread onto the element, e.g. `dataAttributes={{'data-*': '...'}}`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/box.tsx",
                                    "line": 53,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "DataAttributesProp"
                            }
                        },
                        {
                            "id": 11249,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/box.tsx",
                                    "line": 47,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11248,
                            "name": "role",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `role` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/box.tsx",
                                    "line": 45,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11251,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/box.tsx",
                                    "line": 51,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 11247,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabIndex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/box.tsx",
                                    "line": 43,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [11245, 11246, 11250, 11252, 11249, 11248, 11251, 11247]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/box.tsx",
                            "line": 19,
                            "character": 25
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8147
                        },
                        {
                            "type": "reference",
                            "name": "AriaProps",
                            "id": 10978
                        },
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps"
                        }
                    ]
                },
                {
                    "id": 11342,
                    "name": "Box",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A box component for creating layouts.",
                        "text": "[[ Story id=\"box--example\" title=\"Box example\" ]]\n",
                        "tags": [
                            {
                                "tag": "component",
                                "text": ""
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/Box\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 11343,
                            "name": "Box",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A box component for creating layouts.",
                                "text": "[[ Story id=\"box--example\" title=\"Box example\" ]]\n"
                            },
                            "parameters": [
                                {
                                    "id": 11344,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "BoxProps",
                                        "id": 11244
                                    }
                                },
                                {
                                    "id": 11345,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/box.tsx",
                            "line": 64,
                            "character": 9
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [11244]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [11342]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/box.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 11953,
            "name": "@airtable/blocks/ui: Button",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/button.tsx",
            "comment": {},
            "children": [
                {
                    "id": 11979,
                    "name": "ButtonProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link Button} component. Also accepts:\n* {@link AriaProps}\n* {@link ButtonStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Button\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 11994,
                            "name": "aria-selected",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-selected` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 139,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11987,
                            "name": "children",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The contents of the button."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 129,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "React.ReactNode"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11992,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra `className`s to apply to the button, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 135,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11985,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Indicates whether or not the user can interact with the button."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 123,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11982,
                            "name": "icon",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The name of the icon or a React node. For more details, see the {@link IconName|list of supported icons}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 117,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "IconName",
                                        "id": 10484
                                    },
                                    {
                                        "type": "reference",
                                        "name": "ReactElement"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11984,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 121,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11988,
                            "name": "onClick",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Click event handler. Also handles Space and Enter keypress events."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 133,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 11989,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 11990,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 11991,
                                                            "name": "e",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {
                                                                "isOptional": true
                                                            },
                                                            "type": {
                                                                "type": "reference",
                                                                "name": "React.MouseEvent",
                                                                "typeArguments": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "HTMLButtonElement"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "overwrites": {
                                "type": "reference",
                                "name": "TooltipAnchorProps.onClick"
                            }
                        },
                        {
                            "id": 11980,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the button. Defaults to `default`. Can be a responsive prop object."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 113,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9100
                            }
                        },
                        {
                            "id": 11993,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra styles to apply to the button."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 137,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 11986,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Indicates if the button can be focused and if/where it participates in sequential keyboard navigation."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 125,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11983,
                            "name": "type",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The type of the button. Defaults to `button`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 119,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "stringLiteral",
                                        "value": "button"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "submit"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "reset"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11981,
                            "name": "variant",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The variant of the button. Defaults to `default`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 115,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ButtonVariant",
                                "id": 12039
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                11994,
                                11987,
                                11992,
                                11985,
                                11982,
                                11984,
                                11988,
                                11980,
                                11993,
                                11986,
                                11983,
                                11981
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/button.tsx",
                            "line": 111,
                            "character": 21
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AriaProps",
                            "id": 10978
                        },
                        {
                            "type": "reference",
                            "name": "ButtonStyleProps",
                            "id": 11954
                        },
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "HTMLButtonElement"
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 11954,
                    "name": "ButtonStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Style props for the {@link Button} component. Also accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link WidthProps}"
                    },
                    "children": [
                        {
                            "id": 11955,
                            "name": "display",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 59,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "stringLiteral",
                                                "value": "inline-flex"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "flex"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "none"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [11955]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/button.tsx",
                            "line": 51,
                            "character": 26
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "MaxWidthProps",
                            "id": 7660
                        },
                        {
                            "type": "reference",
                            "name": "MinWidthProps",
                            "id": 7680
                        },
                        {
                            "type": "reference",
                            "name": "WidthProps",
                            "id": 7690
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7826
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7910
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7921
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "ButtonProps",
                            "id": 11979
                        }
                    ]
                },
                {
                    "id": 12039,
                    "name": "ButtonVariant",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Variants for the {@link Button} component:",
                        "text": "• **default**\n\nGray button for toolbars and other generic actions.\n\n• **primary**\n\nBlue button used for primary actions and CTAs. There should only be one primary button present at a time. Often used in {@link Dialog} and bottom bars.\n\n• **secondary**\n\nTransparent button that pairs with the primary button. This is typically used for cancel or back buttons.\n\n• **danger**\n\nRed button that replaces primary buttons for dangerous or otherwise difficult-to-reverse actions like record deletion.\n"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/button.tsx",
                            "line": 93,
                            "character": 18
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "default"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "primary"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "secondary"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "danger"
                            }
                        ]
                    }
                },
                {
                    "id": 12046,
                    "name": "Button",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "Clickable button component.",
                        "text": "[[ Story id=\"button--example\" title=\"Box example\" ]]\n",
                        "tags": [
                            {
                                "tag": "component",
                                "text": ""
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/Button\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 12047,
                            "name": "Button",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Clickable button component.",
                                "text": "[[ Story id=\"button--example\" title=\"Box example\" ]]\n"
                            },
                            "parameters": [
                                {
                                    "id": 12048,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "ButtonProps",
                                        "id": 11979
                                    }
                                },
                                {
                                    "id": 12049,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLButtonElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/button.tsx",
                            "line": 150,
                            "character": 12
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [11979, 11954]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [12039]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [12046]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/button.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 10290,
            "name": "@airtable/blocks/ui: CellRenderer",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/cell_renderer.tsx",
            "comment": {},
            "children": [
                {
                    "id": 10362,
                    "name": "CellRenderer",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Displays the contents of a cell given a field and record.",
                        "text": "[[ Story id=\"cellrenderer--example\" title=\"Cell renderer example\" ]]\n",
                        "tags": [
                            {
                                "tag": "component",
                                "text": ""
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/CellRenderer\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 10385,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 10386,
                            "name": "SS",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 10427,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/cell_renderer.tsx",
                            "line": 110,
                            "character": 25
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Component",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "CellRendererProps",
                                    "id": 10316
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 10316,
                    "name": "CellRendererProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link CellRenderer} component. Also accepts:\n* {@link CellRendererStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/CellRenderer"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 10323,
                            "name": "cellClassName",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the cell itself, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/cell_renderer.tsx",
                                    "line": 97,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10324,
                            "name": "cellStyle",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the cell itself."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/cell_renderer.tsx",
                                    "line": 99,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 10318,
                            "name": "cellValue",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The cell value to render. Either `record` or `cellValue` must be provided to the CellRenderer. If both are provided, `record` will be used."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/cell_renderer.tsx",
                                    "line": 85,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "unknown"
                            }
                        },
                        {
                            "id": 10321,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the cell renderer container, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/cell_renderer.tsx",
                                    "line": 91,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10319,
                            "name": "field",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The {@link Field} for a given {@link Record} being rendered as a cell."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/cell_renderer.tsx",
                                    "line": 87,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Field",
                                "id": 1340
                            }
                        },
                        {
                            "id": 10317,
                            "name": "record",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The {@link Record} from which to render a cell. Either `record` or `cellValue` must be provided to the CellRenderer. If both are provided, `record` will be used."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/cell_renderer.tsx",
                                    "line": 83,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Record",
                                        "id": 2296
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10320,
                            "name": "shouldWrap",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Whether to wrap cell contents. Defaults to true."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/cell_renderer.tsx",
                                    "line": 89,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10322,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the cell renderer container."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/cell_renderer.tsx",
                                    "line": 93,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [10323, 10324, 10318, 10321, 10319, 10317, 10320, 10322]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/cell_renderer.tsx",
                            "line": 81,
                            "character": 27
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "CellRendererStyleProps",
                            "id": 10291
                        },
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "HTMLDivElement"
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 10291,
                    "name": "CellRendererStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Style props for the {@link CellRenderer} component. Also accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link WidthProps}"
                    },
                    "children": [
                        {
                            "id": 10292,
                            "name": "display",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/cell_renderer.tsx",
                                    "line": 58,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "stringLiteral",
                                                "value": "block"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "inline"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "inline-block"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [10292]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/cell_renderer.tsx",
                            "line": 50,
                            "character": 32
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7826
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7921
                        },
                        {
                            "type": "reference",
                            "name": "MaxWidthProps",
                            "id": 7660
                        },
                        {
                            "type": "reference",
                            "name": "MinWidthProps",
                            "id": 7680
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7910
                        },
                        {
                            "type": "reference",
                            "name": "WidthProps",
                            "id": 7690
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "CellRendererProps",
                            "id": 10316
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [10362]
                },
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [10316, 10291]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/cell_renderer.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 11420,
            "name": "@airtable/blocks/ui: ChoiceToken",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/choice_token.tsx",
            "comment": {},
            "children": [
                {
                    "id": 11442,
                    "name": "ChoiceOption",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "An option from a select field. You should not create these objects from scratch, but should instead grab them from base data."
                    },
                    "children": [
                        {
                            "id": 11445,
                            "name": "color",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The color of the select option."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/choice_token.tsx",
                                    "line": 52,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Color",
                                "id": 556
                            }
                        },
                        {
                            "id": 11443,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The ID of the select option."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/choice_token.tsx",
                                    "line": 48,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        },
                        {
                            "id": 11444,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The name of the select option."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/choice_token.tsx",
                                    "line": 50,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [11445, 11443, 11444]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/choice_token.tsx",
                            "line": 46,
                            "character": 22
                        }
                    ]
                },
                {
                    "id": 11446,
                    "name": "ChoiceTokenProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link ChoiceToken} component. Also accepts:\n* {@link ChoiceTokenStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/ChoiceToken"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 11470,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 11447,
                            "name": "choice",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "An object representing a select option. You should not create these objects from scratch, but should instead grab them from base data."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/choice_token.tsx",
                                    "line": 64,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ChoiceOption",
                                "id": 11442
                            }
                        },
                        {
                            "id": 11449,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the choice token."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/choice_token.tsx",
                                    "line": 68,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11448,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the choice token."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/choice_token.tsx",
                                    "line": 66,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [11447, 11449, 11448]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/choice_token.tsx",
                            "line": 62,
                            "character": 26
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "ChoiceTokenStyleProps",
                            "id": 11421
                        },
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps"
                        }
                    ]
                },
                {
                    "id": 11421,
                    "name": "ChoiceTokenStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Style props for the {@link ChoiceToken} component. Accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link PositionSetProps}"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/choice_token.tsx",
                            "line": 33,
                            "character": 31
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7826
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7910
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7921
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "ChoiceTokenProps",
                            "id": 11446
                        }
                    ]
                },
                {
                    "id": 11487,
                    "name": "ChoiceToken",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true,
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A component that shows a single choice in a small token, to be displayed inline or in a list of choices.",
                        "text": "[[ Story id=\"choicetoken--example\" title=\"Choice token example\" ]]\n",
                        "tags": [
                            {
                                "tag": "component",
                                "text": ""
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/ChoiceToken\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 11488,
                            "name": "ChoiceToken",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A component that shows a single choice in a small token, to be displayed inline or in a list of choices.",
                                "text": "[[ Story id=\"choicetoken--example\" title=\"Choice token example\" ]]\n"
                            },
                            "parameters": [
                                {
                                    "id": 11489,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "ChoiceTokenProps",
                                        "id": 11446
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/choice_token.tsx",
                            "line": 79,
                            "character": 17
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [11442, 11446, 11421]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [11487]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/choice_token.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 11350,
            "name": "@airtable/blocks/ui: CollaboratorToken",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/collaborator_token.tsx",
            "comment": {},
            "children": [
                {
                    "id": 11372,
                    "name": "CollaboratorTokenProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link CollaboratorToken} component. Also accepts:\n* {@link CollaboratorTokenStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/CollaboratorToken\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 11396,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 11374,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the collaborator token."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/collaborator_token.tsx",
                                    "line": 57,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11373,
                            "name": "collaborator",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "An object representing a collaborator. You should not create these objects from scratch, but should instead grab them from base data."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/collaborator_token.tsx",
                                    "line": 55,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Partial",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "CollaboratorData",
                                        "id": 692
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11375,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the collaborator token."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/collaborator_token.tsx",
                                    "line": 59,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [11374, 11373, 11375]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/collaborator_token.tsx",
                            "line": 53,
                            "character": 32
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "CollaboratorTokenStyleProps",
                            "id": 11351
                        },
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps"
                        }
                    ]
                },
                {
                    "id": 11351,
                    "name": "CollaboratorTokenStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Style props for the {@link CollaboratorToken} component. Accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link PositionSetProps}"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/collaborator_token.tsx",
                            "line": 36,
                            "character": 37
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7826
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7910
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7921
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "CollaboratorTokenProps",
                            "id": 11372
                        }
                    ]
                },
                {
                    "id": 11413,
                    "name": "CollaboratorToken",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true,
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A component that shows a single collaborator in a small token, to be displayed inline or in a list of choices.",
                        "text": "[[ Story id=\"collaboratortoken--example\" title=\"Collaborator token example\" ]]\n",
                        "tags": [
                            {
                                "tag": "component",
                                "text": ""
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/CollaboratorToken\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 11414,
                            "name": "CollaboratorToken",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A component that shows a single collaborator in a small token, to be displayed inline or in a list of choices.",
                                "text": "[[ Story id=\"collaboratortoken--example\" title=\"Collaborator token example\" ]]\n"
                            },
                            "parameters": [
                                {
                                    "id": 11415,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "CollaboratorTokenProps",
                                        "id": 11372
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/collaborator_token.tsx",
                            "line": 70,
                            "character": 23
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [11372, 11351]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [11413]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/collaborator_token.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 11490,
            "name": "@airtable/blocks/ui: ColorPalette",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/color_palette.tsx",
            "comment": {},
            "children": [
                {
                    "id": 11612,
                    "name": "ColorPalette",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A color selection component. Accepts a list of `allowedColors` to be displayed\nas selectable color squares.",
                        "text": "[[ Story id=\"colorpalette--example\" title=\"Color palette example\" ]]\n",
                        "tags": [
                            {
                                "tag": "component",
                                "text": ""
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/ColorPalette\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 11656,
                            "name": "SS",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/color_palette.tsx",
                            "line": 125,
                            "character": 25
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Component",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "ColorPaletteProps",
                                    "id": 11562
                                },
                                {
                                    "type": "reference",
                                    "name": "ColorPaletteState"
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 11784,
                    "name": "ColorPaletteSynced",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A wrapper around the {@link ColorPalette} component that syncs with {@link GlobalConfig}.",
                        "text": "[[ Story id=\"colorpalette--synced-example\" title=\"Synced color palette example\" ]]\n",
                        "tags": [
                            {
                                "tag": "component",
                                "text": ""
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/ColorPaletteSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/ColorPalette\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 11789,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 11790,
                            "name": "SS",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 11835,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/color_palette_synced.tsx",
                            "line": 34,
                            "character": 24
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Component",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "ColorPaletteSyncedProps",
                                    "id": 11736
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 11562,
                    "name": "ColorPaletteProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link ColorPalette} component. Also accepts:\n* {@link ColorPaletteStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/ColorPalette\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 11596,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 11564,
                            "name": "allowedColors",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The list of {@link Color|colors} to display in the color palette."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 77,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedColorPaletteProps.allowedColors",
                                "id": 11516
                            }
                        },
                        {
                            "id": 11570,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the color palette, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 83,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedColorPaletteProps.className",
                                "id": 11522
                            }
                        },
                        {
                            "id": 11563,
                            "name": "color",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The current selected {@link Color} option."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 108,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11572,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the color palette will not allow color selection."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 87,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedColorPaletteProps.disabled",
                                "id": 11524
                            }
                        },
                        {
                            "id": 11565,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected color changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 79,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 11566,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 11567,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 11568,
                                                            "name": "arg1",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "string"
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedColorPaletteProps.onChange",
                                "id": 11517
                            }
                        },
                        {
                            "id": 11569,
                            "name": "squareMargin",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The margin between color squares in the color palette."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 81,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedColorPaletteProps.squareMargin",
                                "id": 11521
                            }
                        },
                        {
                            "id": 11571,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the color palette."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 85,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedColorPaletteProps.style",
                                "id": 11523
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [11564, 11570, 11563, 11572, 11565, 11569, 11571]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/color_palette.tsx",
                            "line": 106,
                            "character": 27
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedColorPaletteProps",
                            "id": 11515
                        }
                    ]
                },
                {
                    "id": 11491,
                    "name": "ColorPaletteStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props shared between the {@link ColorPalette} and {@link ColorPaletteSynced} components. Accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link WidthProps}"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/color_palette.tsx",
                            "line": 53,
                            "character": 39
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "MaxWidthProps",
                            "id": 7660
                        },
                        {
                            "type": "reference",
                            "name": "MinWidthProps",
                            "id": 7680
                        },
                        {
                            "type": "reference",
                            "name": "WidthProps",
                            "id": 7690
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7826
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7910
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7921
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "SharedColorPaletteProps",
                            "id": 11515
                        }
                    ]
                },
                {
                    "id": 11736,
                    "name": "ColorPaletteSyncedProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link ColorPaletteSynced} component. Also accepts:\n* {@link ColorPaletteStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/ColorPaletteSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/ColorPalette\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 11770,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 11738,
                            "name": "allowedColors",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The list of {@link Color|colors} to display in the color palette."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 77,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedColorPaletteProps.allowedColors",
                                "id": 11516
                            }
                        },
                        {
                            "id": 11744,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the color palette, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 83,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedColorPaletteProps.className",
                                "id": 11522
                            }
                        },
                        {
                            "id": 11746,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the color palette will not allow color selection."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 87,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedColorPaletteProps.disabled",
                                "id": 11524
                            }
                        },
                        {
                            "id": 11737,
                            "name": "globalConfigKey",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "A string key or array key path in {@link GlobalConfig}. The selected color will always reflect the value stored in {@link GlobalConfig} for this key. Selecting a new color will update {@link GlobalConfig}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette_synced.tsx",
                                    "line": 22,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "GlobalConfigKey",
                                "id": 950
                            }
                        },
                        {
                            "id": 11739,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected color changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 79,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 11740,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 11741,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 11742,
                                                            "name": "arg1",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "string"
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedColorPaletteProps.onChange",
                                "id": 11517
                            }
                        },
                        {
                            "id": 11743,
                            "name": "squareMargin",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The margin between color squares in the color palette."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 81,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedColorPaletteProps.squareMargin",
                                "id": 11521
                            }
                        },
                        {
                            "id": 11745,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the color palette."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 85,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedColorPaletteProps.style",
                                "id": 11523
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [11738, 11744, 11746, 11737, 11739, 11743, 11745]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/color_palette_synced.tsx",
                            "line": 20,
                            "character": 33
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedColorPaletteProps",
                            "id": 11515
                        }
                    ]
                },
                {
                    "id": 11515,
                    "name": "SharedColorPaletteProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props shared between the {@link ColorPalette} and {@link ColorPaletteSynced} components."
                    },
                    "typeParameter": [
                        {
                            "id": 11548,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 11516,
                            "name": "allowedColors",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The list of {@link Color|colors} to display in the color palette."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 77,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11522,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the color palette, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 83,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11524,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the color palette will not allow color selection."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 87,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11517,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected color changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 79,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 11518,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 11519,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 11520,
                                                            "name": "arg1",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "string"
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11521,
                            "name": "squareMargin",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The margin between color squares in the color palette."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 81,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11523,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the color palette."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 85,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [11516, 11522, 11524, 11517, 11521, 11523]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/color_palette.tsx",
                            "line": 75,
                            "character": 40
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "ColorPaletteStyleProps",
                            "id": 11491
                        },
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps"
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "ColorPaletteProps",
                            "id": 11562
                        },
                        {
                            "type": "reference",
                            "name": "ColorPaletteSyncedProps",
                            "id": 11736
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [11612, 11784]
                },
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [11562, 11491, 11736, 11515]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/color_palette.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 13028,
            "name": "@airtable/blocks/ui: Dialog",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/dialog_close_button.tsx",
            "comment": {},
            "children": [
                {
                    "id": 13514,
                    "name": "ConfirmationDialog",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A styled modal dialog component that prompts the user to confirm or cancel an action.",
                        "text": "[[ Story id=\"confirmationdialog--example\" title=\"Confirmation dialog example\" ]]\n\nBy default, this component will focus the \"Confirm\" button on mount, so that pressing\nthe Enter key will confirm the action.\n",
                        "tags": [
                            {
                                "tag": "component",
                                "text": ""
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/ConfirmationDialog\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 13543,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 13544,
                            "name": "SS",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 13587,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/confirmation_dialog.tsx",
                            "line": 53,
                            "character": 24
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Component",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "ConfirmationDialogProps",
                                    "id": 13471
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 13253,
                    "name": "Dialog",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A styled modal dialog component.",
                        "text": "[[ Story id=\"dialog--example\" title=\"Dialog example\" ]]\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Dialog"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 13288,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 13289,
                            "name": "SS",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 13330,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/dialog.tsx",
                            "line": 75,
                            "character": 12
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Component",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "DialogProps",
                                    "id": 13217
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 13089,
                    "name": "DialogCloseButton",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A button that closes {@link Dialog}. Accessed via `Dialog.CloseButton`."
                    },
                    "typeParameter": [
                        {
                            "id": 13111,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 13112,
                            "name": "SS",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 13157,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/dialog_close_button.tsx",
                            "line": 97,
                            "character": 30
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Component",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "DialogCloseButtonProps",
                                    "id": 13029
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 13471,
                    "name": "ConfirmationDialogProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link ConfirmationDialog} component. Also accepts:\n* {@link DialogStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/ConfirmationDialog\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 13479,
                            "name": "backgroundClassName",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra `className`s to apply to the background element, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/confirmation_dialog.tsx",
                                    "line": 33,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13480,
                            "name": "backgroundStyle",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra styles to apply to the background element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/confirmation_dialog.tsx",
                                    "line": 35,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 13478,
                            "name": "body",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The body of the dialog. When it’s a string it will automatically be wrapped in a Text component."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/confirmation_dialog.tsx",
                                    "line": 31,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "React.ReactNode"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13474,
                            "name": "cancelButtonText",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The label for the cancel button. Defaults to 'Cancel'."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/confirmation_dialog.tsx",
                                    "line": 23,
                                    "character": 20
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13477,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra `className`s to apply to the dialog element, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/confirmation_dialog.tsx",
                                    "line": 29,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13475,
                            "name": "confirmButtonText",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The label for the confirm button. Defaults to 'Confirm'."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/confirmation_dialog.tsx",
                                    "line": 25,
                                    "character": 21
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13476,
                            "name": "isConfirmActionDangerous",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "Whether the action is dangerous (potentially destructive or not easily reversible). Defaults to `false`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/confirmation_dialog.tsx",
                                    "line": 27,
                                    "character": 28
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "boolean"
                            }
                        },
                        {
                            "id": 13481,
                            "name": "onCancel",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "Cancel button event handler. Handles click events and Space/Enter keypress events."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/confirmation_dialog.tsx",
                                    "line": 37,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reflection",
                                "declaration": {
                                    "id": 13482,
                                    "name": "__type",
                                    "kind": 65536,
                                    "kindString": "Type literal",
                                    "flags": {},
                                    "signatures": [
                                        {
                                            "id": 13483,
                                            "name": "__call",
                                            "kind": 4096,
                                            "kindString": "Call signature",
                                            "flags": {},
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "unknown"
                                            }
                                        }
                                    ],
                                    "sources": [
                                        {
                                            "fileName": "src/ui/confirmation_dialog.tsx",
                                            "line": 37,
                                            "character": 13
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "id": 13484,
                            "name": "onConfirm",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "Confirm button event handler. Handles click events and Space/Enter keypress events."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/confirmation_dialog.tsx",
                                    "line": 39,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reflection",
                                "declaration": {
                                    "id": 13485,
                                    "name": "__type",
                                    "kind": 65536,
                                    "kindString": "Type literal",
                                    "flags": {},
                                    "signatures": [
                                        {
                                            "id": 13486,
                                            "name": "__call",
                                            "kind": 4096,
                                            "kindString": "Call signature",
                                            "flags": {},
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "unknown"
                                            }
                                        }
                                    ],
                                    "sources": [
                                        {
                                            "fileName": "src/ui/confirmation_dialog.tsx",
                                            "line": 39,
                                            "character": 14
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "id": 13472,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra styles to apply to the dialog element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/confirmation_dialog.tsx",
                                    "line": 19,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 13473,
                            "name": "title",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The title of the dialog."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/confirmation_dialog.tsx",
                                    "line": 21,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                13479,
                                13480,
                                13478,
                                13474,
                                13477,
                                13475,
                                13476,
                                13481,
                                13484,
                                13472,
                                13473
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/confirmation_dialog.tsx",
                            "line": 17,
                            "character": 33
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "DialogStyleProps",
                            "id": 13189
                        }
                    ]
                },
                {
                    "id": 13029,
                    "name": "DialogCloseButtonProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props for the {@link DialogCloseButton} component. Also accepts:\n* {@link DialogCloseButtonStyleProps}"
                    },
                    "children": [
                        {
                            "id": 13033,
                            "name": "children",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The contents of the close button."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/dialog_close_button.tsx",
                                    "line": 48,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "React.ReactNode"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13030,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "`className`s to apply to the close button, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/dialog_close_button.tsx",
                                    "line": 42,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13031,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Styles to apply to the close button."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/dialog_close_button.tsx",
                                    "line": 44,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 13032,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Indicates if the button can be focused and if/where it participates in sequential keyboard navigation."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/dialog_close_button.tsx",
                                    "line": 46,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [13033, 13030, 13031, 13032]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/dialog_close_button.tsx",
                            "line": 40,
                            "character": 39
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "HTMLDivElement"
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 13047,
                    "name": "DialogCloseButtonStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props for the {@link DialogCloseButton} component. Accepts:\n* {@link BorderRadiusProps}\n* {@link DimensionsSetProps}\n* {@link DisplayProps}\n* {@link FlexContainerSetProps}\n* {@link FlexItemSetProps}\n* {@link PositionSetProps}\n* {@link SpacingSetProps}"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/dialog_close_button.tsx",
                            "line": 63,
                            "character": 44
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "BorderRadiusProps",
                            "id": 7591
                        },
                        {
                            "type": "reference",
                            "name": "DimensionsSetProps",
                            "id": 7700
                        },
                        {
                            "type": "reference",
                            "name": "DisplayProps",
                            "id": 8127
                        },
                        {
                            "type": "reference",
                            "name": "FlexContainerSetProps",
                            "id": 7759
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7826
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7910
                        },
                        {
                            "type": "reference",
                            "name": "SpacingSetProps",
                            "id": 8003
                        }
                    ]
                },
                {
                    "id": 13217,
                    "name": "DialogProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link Dialog} component. Also accepts:\n* {@link DialogStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Dialog\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 13223,
                            "name": "backgroundClassName",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra `className`s to apply to the background element, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/dialog.tsx",
                                    "line": 59,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13224,
                            "name": "backgroundStyle",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra styles to apply to the background element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/dialog.tsx",
                                    "line": 61,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 13225,
                            "name": "children",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The contents of the dialog element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/dialog.tsx",
                                    "line": 63,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.ReactNode"
                            }
                        },
                        {
                            "id": 13221,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra `className`s to apply to the dialog element, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/dialog.tsx",
                                    "line": 55,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13218,
                            "name": "onClose",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "Callback function to fire when the dialog is closed."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/dialog.tsx",
                                    "line": 53,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reflection",
                                "declaration": {
                                    "id": 13219,
                                    "name": "__type",
                                    "kind": 65536,
                                    "kindString": "Type literal",
                                    "flags": {},
                                    "signatures": [
                                        {
                                            "id": 13220,
                                            "name": "__call",
                                            "kind": 4096,
                                            "kindString": "Call signature",
                                            "flags": {},
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "unknown"
                                            }
                                        }
                                    ],
                                    "sources": [
                                        {
                                            "fileName": "src/ui/dialog.tsx",
                                            "line": 53,
                                            "character": 12
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "id": 13222,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra styles to apply to the dialog element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/dialog.tsx",
                                    "line": 57,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [13223, 13224, 13225, 13221, 13218, 13222]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/dialog.tsx",
                            "line": 51,
                            "character": 21
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "DialogStyleProps",
                            "id": 13189
                        }
                    ]
                },
                {
                    "id": 13189,
                    "name": "DialogStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props shared between the {@link Dialog} and {@link ConfirmationDialog} components. Also accepts:\n* {@link DimensionsSetProps}\n* {@link FlexContainerSetProps}\n* {@link SpacingSetProps}"
                    },
                    "children": [
                        {
                            "id": 13190,
                            "name": "display",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/dialog.tsx",
                                    "line": 33,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "stringLiteral",
                                                "value": "block"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "flex"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [13190]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/dialog.tsx",
                            "line": 28,
                            "character": 33
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "DimensionsSetProps",
                            "id": 7700
                        },
                        {
                            "type": "reference",
                            "name": "FlexContainerSetProps",
                            "id": 7759
                        },
                        {
                            "type": "reference",
                            "name": "SpacingSetProps",
                            "id": 8003
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "DialogProps",
                            "id": 13217
                        },
                        {
                            "type": "reference",
                            "name": "ConfirmationDialogProps",
                            "id": 13471
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [13514, 13253, 13089]
                },
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [13471, 13029, 13047, 13217, 13189]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/dialog_close_button.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 10612,
            "name": "@airtable/blocks/ui: FieldIcon",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/field_icon.tsx",
            "comment": {},
            "children": [
                {
                    "id": 10613,
                    "name": "FieldIconProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link FieldIcon} component. Also accepts:\n* {@link IconStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/FieldIcon\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 10617,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the icon."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 55,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedIconProps.className",
                                "id": 10520
                            }
                        },
                        {
                            "id": 10614,
                            "name": "field",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The field model to display an icon for."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_icon.tsx",
                                    "line": 18,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Field",
                                "id": 1340
                            }
                        },
                        {
                            "id": 10616,
                            "name": "fillColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The color of the icon."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 53,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedIconProps.fillColor",
                                "id": 10519
                            }
                        },
                        {
                            "id": 10619,
                            "name": "pathClassName",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the icon path."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 59,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedIconProps.pathClassName",
                                "id": 10522
                            }
                        },
                        {
                            "id": 10620,
                            "name": "pathStyle",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the icon path."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 61,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedIconProps.pathStyle",
                                "id": 10523
                            }
                        },
                        {
                            "id": 10615,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The width/height of the icon. Defaults to 16."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 51,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedIconProps.size",
                                "id": 10518
                            }
                        },
                        {
                            "id": 10618,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the icon."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 57,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedIconProps.style",
                                "id": 10521
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [10617, 10614, 10616, 10619, 10620, 10615, 10618]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/field_icon.tsx",
                            "line": 16,
                            "character": 24
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedIconProps",
                            "id": 10517
                        }
                    ]
                },
                {
                    "id": 10654,
                    "name": "FieldIcon",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true,
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A vector icon for a field’s type.",
                        "text": "[[ Story id=\"fieldicon--example\" title=\"FieldIcon example\" ]]\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/FieldIcon"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 10655,
                            "name": "FieldIcon",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A vector icon for a field’s type.",
                                "text": "[[ Story id=\"fieldicon--example\" title=\"FieldIcon example\" ]]\n"
                            },
                            "parameters": [
                                {
                                    "id": 10656,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "FieldIconProps",
                                        "id": 10613
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/field_icon.tsx",
                            "line": 29,
                            "character": 15
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [10613]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [10654]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/field_icon.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 9607,
            "name": "@airtable/blocks/ui: FieldPicker",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/field_picker.tsx",
            "comment": {},
            "children": [
                {
                    "id": 9665,
                    "name": "FieldPickerProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link FieldPicker} component. Also accepts:\n* {@link SelectStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/FieldPicker\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 9668,
                            "name": "allowedTypes",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "An array indicating which field types can be selected."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 20,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FieldType",
                                        "id": 591
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedFieldPickerProps.allowedTypes",
                                "id": 9610
                            }
                        },
                        {
                            "id": 9685,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-describedby']",
                                "id": 9155
                            }
                        },
                        {
                            "id": 9683,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-label']",
                                "id": 9153
                            }
                        },
                        {
                            "id": 9684,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-labelledby']",
                                "id": 9154
                            }
                        },
                        {
                            "id": 9677,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.autoFocus",
                                "id": 9147
                            }
                        },
                        {
                            "id": 9676,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.className",
                                "id": 9146
                            }
                        },
                        {
                            "id": 9681,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.disabled",
                                "id": 9151
                            }
                        },
                        {
                            "id": 9666,
                            "name": "field",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The selected field model."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 47,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Field",
                                        "id": 1340
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9678,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.id",
                                "id": 9148
                            }
                        },
                        {
                            "id": 9679,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.name",
                                "id": 9149
                            }
                        },
                        {
                            "id": 9671,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected field changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 26,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 9672,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 9673,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 9674,
                                                            "name": "fieldModel",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "Field",
                                                                        "id": 1340
                                                                    },
                                                                    {
                                                                        "type": "intrinsic",
                                                                        "name": "null"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedFieldPickerProps.onChange",
                                "id": 9613
                            }
                        },
                        {
                            "id": 9670,
                            "name": "placeholder",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The placeholder text when no field is selected."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 24,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedFieldPickerProps.placeholder",
                                "id": 9612
                            }
                        },
                        {
                            "id": 9669,
                            "name": "shouldAllowPickingNone",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user can unset the selected field."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 22,
                                    "character": 26
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedFieldPickerProps.shouldAllowPickingNone",
                                "id": 9611
                            }
                        },
                        {
                            "id": 9675,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9100
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.size",
                                "id": 9145
                            }
                        },
                        {
                            "id": 9682,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.style",
                                "id": 9152
                            }
                        },
                        {
                            "id": 9680,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.tabIndex",
                                "id": 9150
                            }
                        },
                        {
                            "id": 9667,
                            "name": "table",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The parent table model to select fields from. If `null` or `undefined`, the picker won't render."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 18,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Table",
                                        "id": 14669
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedFieldPickerProps.table",
                                "id": 9609
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                9668,
                                9685,
                                9683,
                                9684,
                                9677,
                                9676,
                                9681,
                                9666,
                                9678,
                                9679,
                                9671,
                                9670,
                                9669,
                                9675,
                                9682,
                                9680,
                                9667
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/field_picker.tsx",
                            "line": 45,
                            "character": 26
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedFieldPickerProps",
                            "id": 9608
                        }
                    ]
                },
                {
                    "id": 9738,
                    "name": "FieldPickerSyncedProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link FieldPickerSynced} component. Also accepts:\n* {@link SelectStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/FieldPickerSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/FieldPicker\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 9741,
                            "name": "allowedTypes",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "An array indicating which field types can be selected."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 20,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FieldType",
                                        "id": 591
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedFieldPickerProps.allowedTypes",
                                "id": 9610
                            }
                        },
                        {
                            "id": 9758,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-describedby']",
                                "id": 9155
                            }
                        },
                        {
                            "id": 9756,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-label']",
                                "id": 9153
                            }
                        },
                        {
                            "id": 9757,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-labelledby']",
                                "id": 9154
                            }
                        },
                        {
                            "id": 9750,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.autoFocus",
                                "id": 9147
                            }
                        },
                        {
                            "id": 9749,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.className",
                                "id": 9146
                            }
                        },
                        {
                            "id": 9754,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.disabled",
                                "id": 9151
                            }
                        },
                        {
                            "id": 9739,
                            "name": "globalConfigKey",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "A string key or array key path in {@link GlobalConfig}. The selected field will always reflect the field id stored in {@link GlobalConfig} for this key. Selecting a new field will update {@link GlobalConfig}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker_synced.tsx",
                                    "line": 20,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "GlobalConfigKey",
                                "id": 950
                            }
                        },
                        {
                            "id": 9751,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.id",
                                "id": 9148
                            }
                        },
                        {
                            "id": 9752,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.name",
                                "id": 9149
                            }
                        },
                        {
                            "id": 9744,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected field changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 26,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 9745,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 9746,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 9747,
                                                            "name": "fieldModel",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "Field",
                                                                        "id": 1340
                                                                    },
                                                                    {
                                                                        "type": "intrinsic",
                                                                        "name": "null"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedFieldPickerProps.onChange",
                                "id": 9613
                            }
                        },
                        {
                            "id": 9743,
                            "name": "placeholder",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The placeholder text when no field is selected."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 24,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedFieldPickerProps.placeholder",
                                "id": 9612
                            }
                        },
                        {
                            "id": 9742,
                            "name": "shouldAllowPickingNone",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user can unset the selected field."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 22,
                                    "character": 26
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedFieldPickerProps.shouldAllowPickingNone",
                                "id": 9611
                            }
                        },
                        {
                            "id": 9748,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9100
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.size",
                                "id": 9145
                            }
                        },
                        {
                            "id": 9755,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.style",
                                "id": 9152
                            }
                        },
                        {
                            "id": 9753,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.tabIndex",
                                "id": 9150
                            }
                        },
                        {
                            "id": 9740,
                            "name": "table",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The parent table model to select fields from. If `null` or `undefined`, the picker won't render."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 18,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Table",
                                        "id": 14669
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedFieldPickerProps.table",
                                "id": 9609
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                9741,
                                9758,
                                9756,
                                9757,
                                9750,
                                9749,
                                9754,
                                9739,
                                9751,
                                9752,
                                9744,
                                9743,
                                9742,
                                9748,
                                9755,
                                9753,
                                9740
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/field_picker_synced.tsx",
                            "line": 18,
                            "character": 32
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedFieldPickerProps",
                            "id": 9608
                        }
                    ]
                },
                {
                    "id": 9608,
                    "name": "SharedFieldPickerProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props shared between the {@link FieldPicker} and {@link FieldPickerSynced} components."
                    },
                    "children": [
                        {
                            "id": 9610,
                            "name": "allowedTypes",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "An array indicating which field types can be selected."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 20,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FieldType",
                                        "id": 591
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9627,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-describedby']",
                                "id": 9155
                            }
                        },
                        {
                            "id": 9625,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-label']",
                                "id": 9153
                            }
                        },
                        {
                            "id": 9626,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-labelledby']",
                                "id": 9154
                            }
                        },
                        {
                            "id": 9619,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.autoFocus",
                                "id": 9147
                            }
                        },
                        {
                            "id": 9618,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.className",
                                "id": 9146
                            }
                        },
                        {
                            "id": 9623,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.disabled",
                                "id": 9151
                            }
                        },
                        {
                            "id": 9620,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.id",
                                "id": 9148
                            }
                        },
                        {
                            "id": 9621,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.name",
                                "id": 9149
                            }
                        },
                        {
                            "id": 9613,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected field changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 26,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 9614,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 9615,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 9616,
                                                            "name": "fieldModel",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "Field",
                                                                        "id": 1340
                                                                    },
                                                                    {
                                                                        "type": "intrinsic",
                                                                        "name": "null"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9612,
                            "name": "placeholder",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The placeholder text when no field is selected."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 24,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9611,
                            "name": "shouldAllowPickingNone",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user can unset the selected field."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 22,
                                    "character": 26
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9617,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9100
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.size",
                                "id": 9145
                            }
                        },
                        {
                            "id": 9624,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.style",
                                "id": 9152
                            }
                        },
                        {
                            "id": 9622,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.tabIndex",
                                "id": 9150
                            }
                        },
                        {
                            "id": 9609,
                            "name": "table",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The parent table model to select fields from. If `null` or `undefined`, the picker won't render."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 18,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Table",
                                        "id": 14669
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                9610,
                                9627,
                                9625,
                                9626,
                                9619,
                                9618,
                                9623,
                                9620,
                                9621,
                                9613,
                                9612,
                                9611,
                                9617,
                                9624,
                                9622,
                                9609
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/field_picker.tsx",
                            "line": 16,
                            "character": 39
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedSelectBaseProps",
                            "id": 9144
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FieldPickerProps",
                            "id": 9665
                        },
                        {
                            "type": "reference",
                            "name": "FieldPickerSyncedProps",
                            "id": 9738
                        }
                    ]
                },
                {
                    "id": 9732,
                    "name": "FieldPicker",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "Dropdown menu component for selecting fields.",
                        "text": "[[ Story id=\"modelpickers--fieldpicker-example\" title=\"Field picker example\" ]]\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/FieldPicker"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 9733,
                            "name": "FieldPicker",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Dropdown menu component for selecting fields.",
                                "text": "[[ Story id=\"modelpickers--fieldpicker-example\" title=\"Field picker example\" ]]\n"
                            },
                            "parameters": [
                                {
                                    "id": 9734,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "FieldPickerProps",
                                        "id": 9665
                                    }
                                },
                                {
                                    "id": 9735,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLSelectElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    },
                                    {
                                        "type": "reference",
                                        "name": "Element"
                                    }
                                ]
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/field_picker.tsx",
                            "line": 58,
                            "character": 17
                        }
                    ]
                },
                {
                    "id": 9796,
                    "name": "FieldPickerSynced",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A wrapper around the {@link FieldPicker} component that syncs with {@link GlobalConfig}.",
                        "text": "[[ Story id=\"modelpickers--fieldpickersynced-example\" title=\"Synced field picker example\" ]]\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/FieldPickerSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/FieldPicker"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 9797,
                            "name": "FieldPickerSynced",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A wrapper around the {@link FieldPicker} component that syncs with {@link GlobalConfig}.",
                                "text": "[[ Story id=\"modelpickers--fieldpickersynced-example\" title=\"Synced field picker example\" ]]\n"
                            },
                            "parameters": [
                                {
                                    "id": 9798,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "FieldPickerSyncedProps",
                                        "id": 9738
                                    }
                                },
                                {
                                    "id": 9799,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLSelectElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/field_picker_synced.tsx",
                            "line": 32,
                            "character": 23
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [9665, 9738, 9608]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [9732, 9796]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/field_picker.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 14316,
            "name": "@airtable/blocks/ui: FormField",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/form_field.tsx",
            "comment": {},
            "children": [
                {
                    "id": 14348,
                    "name": "FormFieldProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link FormField} component. Also accepts:\n* {@link FormFieldStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/FormField\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 14355,
                            "name": "children",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The contents of the form field."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/form_field.tsx",
                                    "line": 84,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.ReactNode"
                            }
                        },
                        {
                            "id": 14350,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the form field."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/form_field.tsx",
                                    "line": 74,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14354,
                            "name": "description",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The description content for the form field. Displayed beneath the label and above the wrapped control field."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/form_field.tsx",
                                    "line": 82,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "React.ReactNode"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14353,
                            "name": "htmlFor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `for` attribute to be applied to the inner label. By default, the form field will automatically generate a random ID and set it on both the label and the wrapped input/select. Only use this property if you want to override the generated ID with your own custom ID."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/form_field.tsx",
                                    "line": 80,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14349,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/form_field.tsx",
                                    "line": 72,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14352,
                            "name": "label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The label content for the form field."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/form_field.tsx",
                                    "line": 78,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.ReactNode"
                            }
                        },
                        {
                            "id": 14351,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the form field."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/form_field.tsx",
                                    "line": 76,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [14355, 14350, 14354, 14353, 14349, 14352, 14351]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/form_field.tsx",
                            "line": 70,
                            "character": 24
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "FormFieldStyleProps",
                            "id": 14317
                        }
                    ]
                },
                {
                    "id": 14317,
                    "name": "FormFieldStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Style props for the {@link FormField} component. Accepts:\n* {@link FlexItemSetProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link SpacingSetProps}\n* {@link WidthProps}"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/form_field.tsx",
                            "line": 44,
                            "character": 29
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "MaxWidthProps",
                            "id": 7660
                        },
                        {
                            "type": "reference",
                            "name": "MinWidthProps",
                            "id": 7680
                        },
                        {
                            "type": "reference",
                            "name": "WidthProps",
                            "id": 7690
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7826
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7910
                        },
                        {
                            "type": "reference",
                            "name": "SpacingSetProps",
                            "id": 8003
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FormFieldProps",
                            "id": 14348
                        }
                    ]
                },
                {
                    "id": 14388,
                    "name": "FormField",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A form field component that wraps any control field, supplying a provided label and optional\ndescription.",
                        "text": "[[ Story id=\"formfield--example\" title=\"Form field example\" ]]\n\nThis component will automatically set up the `for` attribute on the outputted label with the `id` attribute\non the wrapped control field for the following UI components: Label, Select, FieldPicker,\nModelPicker, and ViewPicker. If you'd like to manually override this behavior, you can provide an\n`htmlFor` prop to this component and manually set the `id` attribute on your wrapped control to\nthe same value.\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/FormField"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14389,
                            "name": "FormField",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A form field component that wraps any control field, supplying a provided label and optional\ndescription.",
                                "text": "[[ Story id=\"formfield--example\" title=\"Form field example\" ]]\n\nThis component will automatically set up the `for` attribute on the outputted label with the `id` attribute\non the wrapped control field for the following UI components: Label, Select, FieldPicker,\nModelPicker, and ViewPicker. If you'd like to manually override this behavior, you can provide an\n`htmlFor` prop to this component and manually set the `id` attribute on your wrapped control to\nthe same value.\n"
                            },
                            "parameters": [
                                {
                                    "id": 14390,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "FormFieldProps",
                                        "id": 14348
                                    }
                                },
                                {
                                    "id": 14391,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLDivElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/form_field.tsx",
                            "line": 102,
                            "character": 15
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [14348, 14317]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [14388]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/form_field.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 13360,
            "name": "@airtable/blocks/ui: Heading",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/heading.tsx",
            "comment": {},
            "children": [
                {
                    "id": 13361,
                    "name": "HeadingProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link Heading} component. Also supports:\n* {@link AllStylesProps}\n* {@link AriaProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Heading"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 13363,
                            "name": "as",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The element that is rendered. Defaults to `h3`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/heading.tsx",
                                    "line": 105,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "stringLiteral",
                                        "value": "h1"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "h2"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "h3"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "h4"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "h5"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "h6"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13365,
                            "name": "children",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The contents of the heading."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/heading.tsx",
                                    "line": 109,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "React.ReactNode"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13369,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/heading.tsx",
                                    "line": 117,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13368,
                            "name": "dataAttributes",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Data attributes that are spread onto the element, e.g. `dataAttributes={{'data-*': '...'}}`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/heading.tsx",
                                    "line": 115,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "DataAttributesProp"
                            }
                        },
                        {
                            "id": 13366,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/heading.tsx",
                                    "line": 111,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13362,
                            "name": "role",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `role` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/heading.tsx",
                                    "line": 103,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13367,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the heading. Defaults to `default`. Can be a responsive prop object."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/heading.tsx",
                                    "line": 113,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "HeadingSizeProp",
                                "id": 13449
                            }
                        },
                        {
                            "id": 13370,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/heading.tsx",
                                    "line": 119,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 13364,
                            "name": "variant",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The variant of the heading. Defaults to `default`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/heading.tsx",
                                    "line": 107,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "HeadingVariant",
                                "id": 13451
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                13363,
                                13365,
                                13369,
                                13368,
                                13366,
                                13362,
                                13367,
                                13370,
                                13364
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/heading.tsx",
                            "line": 101,
                            "character": 22
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8147
                        },
                        {
                            "type": "reference",
                            "name": "AriaProps",
                            "id": 10978
                        }
                    ]
                },
                {
                    "id": 13446,
                    "name": "HeadingSize",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Sizes for the {@link Heading} component."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/heading.tsx",
                            "line": 26,
                            "character": 16
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "small"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "default"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "large"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "xsmall"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "xlarge"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "xxlarge"
                            }
                        ]
                    }
                },
                {
                    "id": 13449,
                    "name": "HeadingSizeProp",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Size prop for the {@link Heading} component."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/heading.tsx",
                            "line": 32,
                            "character": 20
                        }
                    ],
                    "type": {
                        "type": "reference",
                        "name": "ResponsiveProp",
                        "id": 7529,
                        "typeArguments": [
                            {
                                "type": "reference",
                                "name": "HeadingSize",
                                "id": 13446
                            }
                        ]
                    }
                },
                {
                    "id": 13451,
                    "name": "HeadingVariant",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Variant prop for the {@link Heading} component.\n• **default** - Headings typically used for titles.\n• **caps** - All-caps headings typically used for field names and smaller section headings."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/heading.tsx",
                            "line": 40,
                            "character": 19
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "default"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "caps"
                            }
                        ]
                    }
                },
                {
                    "id": 13465,
                    "name": "Heading",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A heading component with sizes and variants.",
                        "text": "[[ Story id=\"heading--example\" title=\"Heading example\" ]]\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Heading"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 13466,
                            "name": "Heading",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A heading component with sizes and variants.",
                                "text": "[[ Story id=\"heading--example\" title=\"Heading example\" ]]\n"
                            },
                            "parameters": [
                                {
                                    "id": 13467,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "HeadingProps",
                                        "id": 13361
                                    }
                                },
                                {
                                    "id": 13468,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLHeadingElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/heading.tsx",
                            "line": 130,
                            "character": 13
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [13361]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [13446, 13449, 13451]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [13465]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/heading.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 10495,
            "name": "@airtable/blocks/ui: Icon",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/icon.tsx",
            "comment": {},
            "children": [
                {
                    "id": 10557,
                    "name": "IconProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link Icon} component. Also accepts:\n* {@link IconStyleProps}"
                    },
                    "children": [
                        {
                            "id": 10561,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the icon."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 55,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedIconProps.className",
                                "id": 10520
                            }
                        },
                        {
                            "id": 10560,
                            "name": "fillColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The color of the icon."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 53,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedIconProps.fillColor",
                                "id": 10519
                            }
                        },
                        {
                            "id": 10558,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The name of the icon. For more details, see the {@link IconName|list of supported icons}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 81,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "IconName",
                                "id": 10484
                            }
                        },
                        {
                            "id": 10563,
                            "name": "pathClassName",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the icon path."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 59,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedIconProps.pathClassName",
                                "id": 10522
                            }
                        },
                        {
                            "id": 10564,
                            "name": "pathStyle",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the icon path."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 61,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedIconProps.pathStyle",
                                "id": 10523
                            }
                        },
                        {
                            "id": 10559,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The width/height of the icon. Defaults to 16."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 51,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedIconProps.size",
                                "id": 10518
                            }
                        },
                        {
                            "id": 10562,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the icon."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 57,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedIconProps.style",
                                "id": 10521
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [10561, 10560, 10558, 10563, 10564, 10559, 10562]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/icon.tsx",
                            "line": 79,
                            "character": 19
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedIconProps",
                            "id": 10517
                        }
                    ]
                },
                {
                    "id": 10496,
                    "name": "IconStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props shared between the {@link Icon} and {@link FieldIcon} components. Accepts:\n* {@link FlexItemSetProps}\n* {@link PositionSetProps}\n* {@link MarginProps}"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/icon.tsx",
                            "line": 33,
                            "character": 31
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7826
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7910
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7921
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "SharedIconProps",
                            "id": 10517
                        }
                    ]
                },
                {
                    "id": 10517,
                    "name": "SharedIconProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props shared between the {@link Icon} and {@link FieldIcon} components."
                    },
                    "children": [
                        {
                            "id": 10520,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the icon."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 55,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10519,
                            "name": "fillColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The color of the icon."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 53,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10522,
                            "name": "pathClassName",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the icon path."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 59,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10523,
                            "name": "pathStyle",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the icon path."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 61,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 10518,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The width/height of the icon. Defaults to 16."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 51,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10521,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the icon."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 57,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [10520, 10519, 10522, 10523, 10518, 10521]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/icon.tsx",
                            "line": 49,
                            "character": 32
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "IconStyleProps",
                            "id": 10496
                        },
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "SVGSVGElement"
                                }
                            ]
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "IconProps",
                            "id": 10557
                        },
                        {
                            "type": "reference",
                            "name": "FieldIconProps",
                            "id": 10613
                        }
                    ]
                },
                {
                    "id": 10607,
                    "name": "Icon",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A vector icon from the Airtable icon set.",
                        "text": "[[ Story id=\"icon--example\" title=\"Icon example\" height=\"576px\"]]\n",
                        "tags": [
                            {
                                "tag": "component",
                                "text": ""
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/Icon\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 10608,
                            "name": "Icon",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A vector icon from the Airtable icon set.",
                                "text": "[[ Story id=\"icon--example\" title=\"Icon example\" height=\"576px\"]]\n"
                            },
                            "parameters": [
                                {
                                    "id": 10609,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "IconProps",
                                        "id": 10557
                                    }
                                },
                                {
                                    "id": 10610,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "SVGSVGElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    },
                                    {
                                        "type": "reference",
                                        "name": "Element"
                                    }
                                ]
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/icon.tsx",
                            "line": 92,
                            "character": 10
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [10557, 10496, 10517]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [10607]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/icon.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 9995,
            "name": "@airtable/blocks/ui: Input",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/input.tsx",
            "comment": {},
            "children": [
                {
                    "id": 10082,
                    "name": "InputProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link Input} component. Also accepts:\n* {@link InputStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Input\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 10107,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 139,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.['aria-describedby']",
                                "id": 10044
                            }
                        },
                        {
                            "id": 10106,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 137,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.['aria-labelledby']",
                                "id": 10043
                            }
                        },
                        {
                            "id": 10100,
                            "name": "autoComplete",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoComplete` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 129,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.autoComplete",
                                "id": 10037
                            }
                        },
                        {
                            "id": 10092,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 113,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.autoFocus",
                                "id": 10029
                            }
                        },
                        {
                            "id": 10102,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the input, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 133,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.className",
                                "id": 10039
                            }
                        },
                        {
                            "id": 10086,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `disabled` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 101,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.disabled",
                                "id": 10023
                            }
                        },
                        {
                            "id": 10091,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 111,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.id",
                                "id": 10028
                            }
                        },
                        {
                            "id": 10093,
                            "name": "max",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `max` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 115,
                                    "character": 7
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.max",
                                "id": 10030
                            }
                        },
                        {
                            "id": 10094,
                            "name": "maxLength",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `maxLength` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 117,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.maxLength",
                                "id": 10031
                            }
                        },
                        {
                            "id": 10108,
                            "name": "min",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `min` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 141,
                                    "character": 7
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.min",
                                "id": 10045
                            }
                        },
                        {
                            "id": 10096,
                            "name": "minLength",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `minLength` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 121,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.minLength",
                                "id": 10033
                            }
                        },
                        {
                            "id": 10090,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 109,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.name",
                                "id": 10027
                            }
                        },
                        {
                            "id": 10098,
                            "name": "pattern",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `pattern` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 125,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.pattern",
                                "id": 10035
                            }
                        },
                        {
                            "id": 10095,
                            "name": "placeholder",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The placeholder for the input."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 119,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.placeholder",
                                "id": 10032
                            }
                        },
                        {
                            "id": 10099,
                            "name": "readOnly",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `readOnly` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 127,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.readOnly",
                                "id": 10036
                            }
                        },
                        {
                            "id": 10087,
                            "name": "required",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `required` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 103,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.required",
                                "id": 10024
                            }
                        },
                        {
                            "id": 10084,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the input. Defaults to `default`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 97,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9100
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.size",
                                "id": 10021
                            }
                        },
                        {
                            "id": 10088,
                            "name": "spellCheck",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `spellcheck` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 105,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.spellCheck",
                                "id": 10025
                            }
                        },
                        {
                            "id": 10097,
                            "name": "step",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `step` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 123,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.step",
                                "id": 10034
                            }
                        },
                        {
                            "id": 10101,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the input."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 131,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.style",
                                "id": 10038
                            }
                        },
                        {
                            "id": 10089,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 107,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.tabIndex",
                                "id": 10026
                            }
                        },
                        {
                            "id": 10085,
                            "name": "type",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `type` for the input. Defaults to `text`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 99,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "number"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "time"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "text"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "date"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "datetime-local"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "email"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "month"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "password"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "search"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "tel"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "url"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "week"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.type",
                                "id": 10022
                            }
                        },
                        {
                            "id": 10083,
                            "name": "value",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The input's current value."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 198,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        },
                        {
                            "id": 10103,
                            "name": "onChange",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the input changes."
                            },
                            "signatures": [
                                {
                                    "id": 10104,
                                    "name": "onChange",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "A function to be called when the input changes."
                                    },
                                    "parameters": [
                                        {
                                            "id": 10105,
                                            "name": "e",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "ChangeEvent",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "HTMLInputElement"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "unknown"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "SharedInputProps.onChange",
                                        "id": 10040
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 135,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.onChange",
                                "id": 10040
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                10107,
                                10106,
                                10100,
                                10092,
                                10102,
                                10086,
                                10091,
                                10093,
                                10094,
                                10108,
                                10096,
                                10090,
                                10098,
                                10095,
                                10099,
                                10087,
                                10084,
                                10088,
                                10097,
                                10101,
                                10089,
                                10085,
                                10083
                            ]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [10103]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/input.tsx",
                            "line": 196,
                            "character": 20
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedInputProps",
                            "id": 10020
                        }
                    ]
                },
                {
                    "id": 9996,
                    "name": "InputStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props shared between the {@link Input} and {@link InputSynced} components. Accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link WidthProps}"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/input.tsx",
                            "line": 71,
                            "character": 32
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "MaxWidthProps",
                            "id": 7660
                        },
                        {
                            "type": "reference",
                            "name": "MinWidthProps",
                            "id": 7680
                        },
                        {
                            "type": "reference",
                            "name": "WidthProps",
                            "id": 7690
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7826
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7910
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7921
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "SharedInputProps",
                            "id": 10020
                        }
                    ]
                },
                {
                    "id": 10191,
                    "name": "InputSyncedProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link InputSynced} component. Also accepts:\n* {@link InputStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/InputSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/Input\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 10216,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 139,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.['aria-describedby']",
                                "id": 10044
                            }
                        },
                        {
                            "id": 10215,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 137,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.['aria-labelledby']",
                                "id": 10043
                            }
                        },
                        {
                            "id": 10209,
                            "name": "autoComplete",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoComplete` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 129,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.autoComplete",
                                "id": 10037
                            }
                        },
                        {
                            "id": 10201,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 113,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.autoFocus",
                                "id": 10029
                            }
                        },
                        {
                            "id": 10211,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the input, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 133,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.className",
                                "id": 10039
                            }
                        },
                        {
                            "id": 10195,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `disabled` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 101,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.disabled",
                                "id": 10023
                            }
                        },
                        {
                            "id": 10192,
                            "name": "globalConfigKey",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "A string key or array key path in {@link GlobalConfig}. The input value will always reflect the value stored in {@link GlobalConfig} for this key. Changing the input value will update {@link GlobalConfig}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input_synced.tsx",
                                    "line": 18,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "GlobalConfigKey",
                                "id": 950
                            }
                        },
                        {
                            "id": 10200,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 111,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.id",
                                "id": 10028
                            }
                        },
                        {
                            "id": 10202,
                            "name": "max",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `max` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 115,
                                    "character": 7
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.max",
                                "id": 10030
                            }
                        },
                        {
                            "id": 10203,
                            "name": "maxLength",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `maxLength` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 117,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.maxLength",
                                "id": 10031
                            }
                        },
                        {
                            "id": 10217,
                            "name": "min",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `min` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 141,
                                    "character": 7
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.min",
                                "id": 10045
                            }
                        },
                        {
                            "id": 10205,
                            "name": "minLength",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `minLength` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 121,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.minLength",
                                "id": 10033
                            }
                        },
                        {
                            "id": 10199,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 109,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.name",
                                "id": 10027
                            }
                        },
                        {
                            "id": 10207,
                            "name": "pattern",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `pattern` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 125,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.pattern",
                                "id": 10035
                            }
                        },
                        {
                            "id": 10204,
                            "name": "placeholder",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The placeholder for the input."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 119,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.placeholder",
                                "id": 10032
                            }
                        },
                        {
                            "id": 10208,
                            "name": "readOnly",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `readOnly` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 127,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.readOnly",
                                "id": 10036
                            }
                        },
                        {
                            "id": 10196,
                            "name": "required",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `required` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 103,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.required",
                                "id": 10024
                            }
                        },
                        {
                            "id": 10193,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the input. Defaults to `default`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 97,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9100
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.size",
                                "id": 10021
                            }
                        },
                        {
                            "id": 10197,
                            "name": "spellCheck",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `spellcheck` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 105,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.spellCheck",
                                "id": 10025
                            }
                        },
                        {
                            "id": 10206,
                            "name": "step",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `step` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 123,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.step",
                                "id": 10034
                            }
                        },
                        {
                            "id": 10210,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the input."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 131,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.style",
                                "id": 10038
                            }
                        },
                        {
                            "id": 10198,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 107,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.tabIndex",
                                "id": 10026
                            }
                        },
                        {
                            "id": 10194,
                            "name": "type",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `type` for the input. Defaults to `text`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 99,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "number"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "time"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "text"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "date"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "datetime-local"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "email"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "month"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "password"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "search"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "tel"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "url"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "week"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.type",
                                "id": 10022
                            }
                        },
                        {
                            "id": 10212,
                            "name": "onChange",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the input changes."
                            },
                            "signatures": [
                                {
                                    "id": 10213,
                                    "name": "onChange",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "A function to be called when the input changes."
                                    },
                                    "parameters": [
                                        {
                                            "id": 10214,
                                            "name": "e",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "ChangeEvent",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "HTMLInputElement"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "unknown"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "SharedInputProps.onChange",
                                        "id": 10040
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 135,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.onChange",
                                "id": 10040
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                10216,
                                10215,
                                10209,
                                10201,
                                10211,
                                10195,
                                10192,
                                10200,
                                10202,
                                10203,
                                10217,
                                10205,
                                10199,
                                10207,
                                10204,
                                10208,
                                10196,
                                10193,
                                10197,
                                10206,
                                10210,
                                10198,
                                10194
                            ]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [10212]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/input_synced.tsx",
                            "line": 16,
                            "character": 26
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedInputProps",
                            "id": 10020
                        }
                    ]
                },
                {
                    "id": 10020,
                    "name": "SharedInputProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props shared between the {@link Input} and {@link InputSynced} components."
                    },
                    "children": [
                        {
                            "id": 10044,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 139,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10043,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 137,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10037,
                            "name": "autoComplete",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoComplete` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 129,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10029,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 113,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10039,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the input, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 133,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10023,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `disabled` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 101,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10028,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 111,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10030,
                            "name": "max",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `max` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 115,
                                    "character": 7
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10031,
                            "name": "maxLength",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `maxLength` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 117,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10045,
                            "name": "min",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `min` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 141,
                                    "character": 7
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10033,
                            "name": "minLength",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `minLength` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 121,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10027,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 109,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10035,
                            "name": "pattern",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `pattern` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 125,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10032,
                            "name": "placeholder",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The placeholder for the input."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 119,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10036,
                            "name": "readOnly",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `readOnly` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 127,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10024,
                            "name": "required",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `required` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 103,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10021,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the input. Defaults to `default`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 97,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9100
                            }
                        },
                        {
                            "id": 10025,
                            "name": "spellCheck",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `spellcheck` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 105,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10034,
                            "name": "step",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `step` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 123,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10038,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the input."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 131,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 10026,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 107,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10022,
                            "name": "type",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `type` for the input. Defaults to `text`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 99,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "number"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "time"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "text"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "date"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "datetime-local"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "email"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "month"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "password"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "search"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "tel"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "url"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "week"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10040,
                            "name": "onChange",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the input changes."
                            },
                            "signatures": [
                                {
                                    "id": 10041,
                                    "name": "onChange",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "A function to be called when the input changes."
                                    },
                                    "parameters": [
                                        {
                                            "id": 10042,
                                            "name": "e",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "ChangeEvent",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "HTMLInputElement"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "unknown"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 135,
                                    "character": 12
                                }
                            ]
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                10044,
                                10043,
                                10037,
                                10029,
                                10039,
                                10023,
                                10028,
                                10030,
                                10031,
                                10045,
                                10033,
                                10027,
                                10035,
                                10032,
                                10036,
                                10024,
                                10021,
                                10025,
                                10034,
                                10038,
                                10026,
                                10022
                            ]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [10040]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/input.tsx",
                            "line": 95,
                            "character": 33
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "InputStyleProps",
                            "id": 9996
                        },
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "HTMLInputElement"
                                }
                            ]
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "InputProps",
                            "id": 10082
                        },
                        {
                            "type": "reference",
                            "name": "InputSyncedProps",
                            "id": 10191
                        }
                    ]
                },
                {
                    "id": 10159,
                    "name": "SupportedInputType",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Supported types for the {@link Input} component. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#%3Cinput%3E_types|MDN} for more information."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/input.tsx",
                            "line": 161,
                            "character": 23
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "number"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "time"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "text"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "date"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "datetime-local"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "email"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "month"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "password"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "search"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "tel"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "url"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "week"
                            }
                        ]
                    }
                },
                {
                    "id": 10154,
                    "name": "ValidInputType",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/ui/input.tsx",
                            "line": 58,
                            "character": 19
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "number"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "time"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "text"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "date"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "datetime-local"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "email"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "month"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "password"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "search"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "tel"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "url"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "week"
                            }
                        ]
                    }
                },
                {
                    "id": 10185,
                    "name": "Input",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "An input component. A wrapper around `<input>` that fits in with Airtable's user interface.",
                        "text": "[[ Story id=\"input--example\" title=\"Input example\" ]]\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Input"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 10186,
                            "name": "Input",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "An input component. A wrapper around `<input>` that fits in with Airtable's user interface.",
                                "text": "[[ Story id=\"input--example\" title=\"Input example\" ]]\n"
                            },
                            "parameters": [
                                {
                                    "id": 10187,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "InputProps",
                                        "id": 10082
                                    }
                                },
                                {
                                    "id": 10188,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLInputElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/input.tsx",
                            "line": 209,
                            "character": 11
                        }
                    ]
                },
                {
                    "id": 10254,
                    "name": "InputSynced",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A wrapper around the {@link Input} component that syncs with {@link GlobalConfig}.",
                        "text": "[[ Story id=\"input--example-synced\" title=\"Synced input example\" ]]\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/InputSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/Input"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 10255,
                            "name": "InputSynced",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A wrapper around the {@link Input} component that syncs with {@link GlobalConfig}.",
                                "text": "[[ Story id=\"input--example-synced\" title=\"Synced input example\" ]]\n"
                            },
                            "parameters": [
                                {
                                    "id": 10256,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "InputSyncedProps",
                                        "id": 10191
                                    }
                                },
                                {
                                    "id": 10257,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLInputElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/input_synced.tsx",
                            "line": 30,
                            "character": 17
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [10082, 9996, 10191, 10020]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [10159, 10154]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [10185, 10254]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/input.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 14226,
            "name": "@airtable/blocks/ui: Label",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/label.tsx",
            "comment": {},
            "children": [
                {
                    "id": 14227,
                    "name": "LabelProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link Label} component. Also accepts:\n* {@link AllStylesProps}\n* {@link AriaProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Label\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 14231,
                            "name": "children",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The contents of the label."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/label.tsx",
                                    "line": 27,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "React.ReactNode"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14232,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/label.tsx",
                                    "line": 29,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14234,
                            "name": "dataAttributes",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Data attributes that are spread onto the element, e.g. `dataAttributes={{'data-*': '...'}}`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/label.tsx",
                                    "line": 33,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "DataAttributesProp"
                            }
                        },
                        {
                            "id": 14229,
                            "name": "htmlFor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `for` attribute. Should contain the `id` of the input."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/label.tsx",
                                    "line": 23,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14230,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/label.tsx",
                                    "line": 25,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14235,
                            "name": "role",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `role` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/label.tsx",
                                    "line": 35,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14228,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the label. Defaults to `default`. Can be a responsive prop object."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/label.tsx",
                                    "line": 21,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "TextSizeProp",
                                "id": 11097
                            }
                        },
                        {
                            "id": 14233,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/label.tsx",
                                    "line": 31,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [14231, 14232, 14234, 14229, 14230, 14235, 14228, 14233]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/label.tsx",
                            "line": 19,
                            "character": 20
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8147
                        },
                        {
                            "type": "reference",
                            "name": "AriaProps",
                            "id": 10978
                        }
                    ]
                },
                {
                    "id": 14311,
                    "name": "Label",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A label component.",
                        "text": "[[ Story id=\"label--example\" title=\"Label example\" ]]\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Label"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14312,
                            "name": "Label",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A label component.",
                                "text": "[[ Story id=\"label--example\" title=\"Label example\" ]]\n"
                            },
                            "parameters": [
                                {
                                    "id": 14313,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "LabelProps",
                                        "id": 14227
                                    }
                                },
                                {
                                    "id": 14314,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLLabelElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/label.tsx",
                            "line": 46,
                            "character": 11
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [14227]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [14311]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/label.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 13995,
            "name": "@airtable/blocks/ui: Link",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/link.tsx",
            "comment": {},
            "children": [
                {
                    "id": 14029,
                    "name": "LinkProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link Link} component. Also supports:\n* {@link AriaProps}\n* {@link LinkStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Link"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 14041,
                            "name": "children",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The contents of the link."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 145,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "React.ReactNode"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14038,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the link."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 139,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14040,
                            "name": "dataAttributes",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Data attributes that are spread onto the element, e.g. `dataAttributes={{'data-*': '...'}}`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 143,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "DataAttributesProp"
                            }
                        },
                        {
                            "id": 14034,
                            "name": "href",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The target URL or URL fragment for the link."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 131,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        },
                        {
                            "id": 14032,
                            "name": "icon",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The name of the icon or a react node. For more details, see the {@link IconName|list of supported icons}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 127,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "IconName",
                                        "id": 10484
                                    },
                                    {
                                        "type": "reference",
                                        "name": "ReactElement"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14036,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 135,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14030,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the link. Defaults to `default`. Can be a responsive prop object."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 123,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "TextSizeProp",
                                "id": 11097
                            }
                        },
                        {
                            "id": 14039,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the link."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 141,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 14037,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Indicates if the link can be focused and if/where it participates in sequential keyboard navigation."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 137,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14035,
                            "name": "target",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies where to display the linked URL."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 133,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14033,
                            "name": "underline",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Adds an underline to the link when true."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 129,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14031,
                            "name": "variant",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The variant of the link, which defines the color. Defaults to `default`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 125,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "LinkVariant",
                                "id": 14098
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                14041,
                                14038,
                                14040,
                                14034,
                                14032,
                                14036,
                                14030,
                                14039,
                                14037,
                                14035,
                                14033,
                                14031
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/link.tsx",
                            "line": 121,
                            "character": 19
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AriaProps",
                            "id": 10978
                        },
                        {
                            "type": "reference",
                            "name": "LinkStyleProps",
                            "id": 13996
                        },
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "HTMLAnchorElement"
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 13996,
                    "name": "LinkStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props for the {@link Link} component. Also accepts:\n* {@link FlexItemSetProps}\n* {@link FontWeightProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link SpacingSetProps}\n* {@link WidthProps}"
                    },
                    "children": [
                        {
                            "id": 13997,
                            "name": "display",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 63,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "stringLiteral",
                                                "value": "inline-flex"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "flex"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "none"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [13997]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/link.tsx",
                            "line": 54,
                            "character": 31
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "MaxWidthProps",
                            "id": 7660
                        },
                        {
                            "type": "reference",
                            "name": "MinWidthProps",
                            "id": 7680
                        },
                        {
                            "type": "reference",
                            "name": "WidthProps",
                            "id": 7690
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7826
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7910
                        },
                        {
                            "type": "reference",
                            "name": "FontWeightProps",
                            "id": 8050
                        },
                        {
                            "type": "reference",
                            "name": "SpacingSetProps",
                            "id": 8003
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "LinkProps",
                            "id": 14029
                        }
                    ]
                },
                {
                    "id": 14098,
                    "name": "LinkVariant",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Variants for the {@link Link} component:",
                        "text": "• **default**\n\nBlue text.\n\n• **dark**\n\nDark gray text.\n\n• **light**\n\nLight gray text.\n"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/link.tsx",
                            "line": 103,
                            "character": 16
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "default"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "dark"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "light"
                            }
                        ]
                    }
                },
                {
                    "id": 14109,
                    "name": "Link",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A styled link component with security benefits.",
                        "text": "[[ Story id=\"input--example-synced\" title=\"Synced input example\" ]]\n\n## Security benefits\n\nThis component is a styled wrapper around the `<a>` tag that offers a few security benefits:\n\n- Limited XSS protection. If the `href` starts with `javascript:` or `data:`, `http://` will be prepended.\n- There is [reverse tabnabbing prevention](https://www.owasp.org/index.php/Reverse_Tabnabbing). If `target` is set, the `rel` attribute will be set to `noopener noreferrer`.\n\nDevelopers should use `Link` instead of `a` when possible.\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Link"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14110,
                            "name": "Link",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A styled link component with security benefits.",
                                "text": "[[ Story id=\"input--example-synced\" title=\"Synced input example\" ]]\n\n## Security benefits\n\nThis component is a styled wrapper around the `<a>` tag that offers a few security benefits:\n\n- Limited XSS protection. If the `href` starts with `javascript:` or `data:`, `http://` will be prepended.\n- There is [reverse tabnabbing prevention](https://www.owasp.org/index.php/Reverse_Tabnabbing). If `target` is set, the `rel` attribute will be set to `noopener noreferrer`.\n\nDevelopers should use `Link` instead of `a` when possible.\n"
                            },
                            "parameters": [
                                {
                                    "id": 14111,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "LinkProps",
                                        "id": 14029
                                    }
                                },
                                {
                                    "id": 14112,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLAnchorElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/link.tsx",
                            "line": 197,
                            "character": 10
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [14029, 13996]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [14098]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [14109]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/link.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 10657,
            "name": "@airtable/blocks/ui: Loader",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/loader.tsx",
            "comment": {},
            "children": [
                {
                    "id": 10679,
                    "name": "LoaderProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link Loader} component. Also accepts:\n* {@link LoaderStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Loader"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 10682,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the loading spinner."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/loader.tsx",
                                    "line": 51,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10680,
                            "name": "fillColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The color of the loading spinner. Defaults to `'#888'`"
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/loader.tsx",
                                    "line": 47,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        },
                        {
                            "id": 10681,
                            "name": "scale",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "A scalar for the loading spinner. Increasing the scale increases the size of the loading spinner. Defaults to `0.3`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/loader.tsx",
                                    "line": 49,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "number"
                            }
                        },
                        {
                            "id": 10683,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the loading spinner."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/loader.tsx",
                                    "line": 53,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [10682, 10680, 10681, 10683]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/loader.tsx",
                            "line": 45,
                            "character": 21
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "LoaderStyleProps",
                            "id": 10658
                        }
                    ]
                },
                {
                    "id": 10658,
                    "name": "LoaderStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Style props for the {@link Loader} component. Accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link PositionSetProps}"
                    },
                    "children": [
                        {
                            "id": 10663,
                            "name": "alignSelf",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Aligns flex items of the current flex line, overriding the `alignItems` value."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/align_self.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "AlignSelfProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AlignSelfProps.alignSelf",
                                "id": 7803
                            }
                        },
                        {
                            "id": 10669,
                            "name": "bottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the vertical position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/bottom.ts",
                                    "line": 11,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BottomProps.bottom",
                                "id": 7879
                            }
                        },
                        {
                            "id": 10659,
                            "name": "flex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flexGrow`, `flexShrink`, and `flexBasis`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex.ts",
                                    "line": 10,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexProps.flex",
                                "id": 7771
                            }
                        },
                        {
                            "id": 10662,
                            "name": "flexBasis",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the initial main size of a flex item."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex_basis.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexBasisProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexBasisProps.flexBasis",
                                "id": 7795
                            }
                        },
                        {
                            "id": 10660,
                            "name": "flexGrow",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the flex grow factor of a flex item. If the size of flex items is smaller than the flex container, items grow to fit according to `flexGrow`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex_grow.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalsNumber"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexGrowProps.flexGrow",
                                "id": 7779
                            }
                        },
                        {
                            "id": 10661,
                            "name": "flexShrink",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the flex shrink factor of a flex item. If the size of flex items is larger than the flex container, items shrink to fit according to `flexShrink`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex_shrink.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalsNumber"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexShrinkProps.flexShrink",
                                "id": 7787
                            }
                        },
                        {
                            "id": 10670,
                            "name": "left",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/left.ts",
                                    "line": 11,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "LeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "LeftProps.left",
                                "id": 7890
                            }
                        },
                        {
                            "id": 10672,
                            "name": "margin",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on all four sides of an element. It is a shorthand for `marginTop`, `marginRight`, `marginBottom`, and `marginLeft`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 17,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.margin",
                                "id": 7922
                            }
                        },
                        {
                            "id": 10675,
                            "name": "marginBottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 23,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginBottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginBottom",
                                "id": 7925
                            }
                        },
                        {
                            "id": 10676,
                            "name": "marginLeft",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the left of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 25,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginLeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginLeft",
                                "id": 7926
                            }
                        },
                        {
                            "id": 10674,
                            "name": "marginRight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the right of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 21,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginRightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginRight",
                                "id": 7924
                            }
                        },
                        {
                            "id": 10673,
                            "name": "marginTop",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 19,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginTopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginTop",
                                "id": 7923
                            }
                        },
                        {
                            "id": 10677,
                            "name": "marginX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the left and right of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 27,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginX",
                                "id": 7927
                            }
                        },
                        {
                            "id": 10678,
                            "name": "marginY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the top and bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 29,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginY",
                                "id": 7928
                            }
                        },
                        {
                            "id": 10665,
                            "name": "order",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the order to lay out an item in a flex container. Items are sorted by ascending `order` value and then by their source code order."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/order.ts",
                                    "line": 10,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalsNumber"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "OrderProps.order",
                                "id": 7819
                            }
                        },
                        {
                            "id": 10666,
                            "name": "position",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/position.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PositionProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PositionProps.position",
                                "id": 7839
                            }
                        },
                        {
                            "id": 10668,
                            "name": "right",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/right.ts",
                                    "line": 11,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "RightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "RightProps.right",
                                "id": 7868
                            }
                        },
                        {
                            "id": 10667,
                            "name": "top",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the vertical position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/top.ts",
                                    "line": 11,
                                    "character": 7
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "TopProps.top",
                                "id": 7857
                            }
                        },
                        {
                            "id": 10671,
                            "name": "zIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with larger z-indexes cover those with smaller ones."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/z_index.ts",
                                    "line": 10,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "ZIndexProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "ZIndexProps.zIndex",
                                "id": 7901
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                10663,
                                10669,
                                10659,
                                10662,
                                10660,
                                10661,
                                10670,
                                10672,
                                10675,
                                10676,
                                10674,
                                10673,
                                10677,
                                10678,
                                10665,
                                10666,
                                10668,
                                10667,
                                10671
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/loader.tsx",
                            "line": 28,
                            "character": 26
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7826
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7910
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7921
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "LoaderProps",
                            "id": 10679
                        }
                    ]
                },
                {
                    "id": 10707,
                    "name": "Loader",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true,
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A loading spinner component.",
                        "text": "[[ Story id=\"loader--example\" title=\"Loader example\" ]]\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Loader"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 10708,
                            "name": "Loader",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A loading spinner component.",
                                "text": "[[ Story id=\"loader--example\" title=\"Loader example\" ]]\n"
                            },
                            "parameters": [
                                {
                                    "id": 10709,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "LoaderProps",
                                        "id": 10679
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/loader.tsx",
                            "line": 65,
                            "character": 12
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [10679, 10658]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [10707]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/loader.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 14393,
            "name": "@airtable/blocks/ui: Loading external resources",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/remote_utils.ts",
            "comment": {},
            "children": [
                {
                    "id": 14394,
                    "name": "loadCSSFromString",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Injects CSS from a string into the page. Returns the HTML style element inserted into the page.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {loadCSSFromString} from '@airtable/blocks/ui';\nloadCSSFromString('body { background: red; }');\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/utils/loadCSSFromString\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14395,
                            "name": "loadCSSFromString",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Injects CSS from a string into the page. Returns the HTML style element inserted into the page.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {loadCSSFromString} from '@airtable/blocks/ui';\nloadCSSFromString('body { background: red; }');\n```"
                                    },
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/loadCSSFromString\n"
                                    }
                                ]
                            },
                            "parameters": [
                                {
                                    "id": 14396,
                                    "name": "css",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The CSS string."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "HTMLStyleElement"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/remote_utils.ts",
                            "line": 15,
                            "character": 33
                        }
                    ]
                },
                {
                    "id": 14397,
                    "name": "loadCSSFromURLAsync",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Injects CSS from a remote URL.",
                        "text": "Returns a promise that resolves to the HTML style element inserted into the page.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {loadCSSFromURLAsync} from '@airtable/blocks/ui';\nloadCSSFromURLAsync('https://example.com/style.css');\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/utils/loadCSSFromURLAsync\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14398,
                            "name": "loadCSSFromURLAsync",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Injects CSS from a remote URL.",
                                "text": "Returns a promise that resolves to the HTML style element inserted into the page.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {loadCSSFromURLAsync} from '@airtable/blocks/ui';\nloadCSSFromURLAsync('https://example.com/style.css');\n```"
                                    },
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/loadCSSFromURLAsync\n"
                                    }
                                ]
                            },
                            "parameters": [
                                {
                                    "id": 14399,
                                    "name": "url",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The URL of the stylesheet."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Promise",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "HTMLLinkElement"
                                    }
                                ]
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/remote_utils.ts",
                            "line": 38,
                            "character": 35
                        }
                    ]
                },
                {
                    "id": 14400,
                    "name": "loadScriptFromURLAsync",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Injects Javascript from a remote URL.",
                        "text": "Returns a promise that resolves to the HTML script element inserted into the page.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {loadScriptFromURLAsync} from '@airtable/blocks/ui';\nloadScriptFromURLAsync('https://example.com/script.js');\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/utils/loadScriptFromURLAsync\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14401,
                            "name": "loadScriptFromURLAsync",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Injects Javascript from a remote URL.",
                                "text": "Returns a promise that resolves to the HTML script element inserted into the page.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {loadScriptFromURLAsync} from '@airtable/blocks/ui';\nloadScriptFromURLAsync('https://example.com/script.js');\n```"
                                    },
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/loadScriptFromURLAsync\n"
                                    }
                                ]
                            },
                            "parameters": [
                                {
                                    "id": 14402,
                                    "name": "url",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The URL of the script."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Promise",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "HTMLScriptElement"
                                    }
                                ]
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/remote_utils.ts",
                            "line": 71,
                            "character": 38
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [14394, 14397, 14400]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/remote_utils.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 10768,
            "name": "@airtable/blocks/ui: Popover",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/popover.tsx",
            "comment": {},
            "children": [
                {
                    "id": 10775,
                    "name": "FitInWindowModes",
                    "kind": 4,
                    "kindString": "Enumeration",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Dictates how a {@link Popover} or {@link Tooltip} component should be kept within the viewport. Accessed via `Popover.fitInWindowModes` or `Tooltip.fitInWindowModes`."
                    },
                    "children": [
                        {
                            "id": 10777,
                            "name": "FLIP",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "If the popover would be placed offscreen, flip the placement to the other side."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 56,
                                    "character": 8
                                }
                            ],
                            "defaultValue": "\"flip\""
                        },
                        {
                            "id": 10776,
                            "name": "NONE",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Allow the popover to be placed offscreen."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 54,
                                    "character": 8
                                }
                            ],
                            "defaultValue": "\"none\""
                        },
                        {
                            "id": 10778,
                            "name": "NUDGE",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "If the popover would be placed offscreen, nudge the popover just enough so that it stays in the viewport."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 58,
                                    "character": 9
                                }
                            ],
                            "defaultValue": "\"nudge\""
                        }
                    ],
                    "groups": [
                        {
                            "title": "Enumeration members",
                            "kind": 16,
                            "children": [10777, 10776, 10778]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/popover.tsx",
                            "line": 52,
                            "character": 28
                        }
                    ]
                },
                {
                    "id": 10769,
                    "name": "PopoverPlacements",
                    "kind": 4,
                    "kindString": "Enumeration",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Dictates how a {@link Popover} or {@link Tooltip} component should be positioned relative\nto the anchor element. Accessed via `Popover.placements` or `Tooltip.placements`."
                    },
                    "children": [
                        {
                            "id": 10771,
                            "name": "BOTTOM",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Positions the popover below the anchor element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 25,
                                    "character": 10
                                }
                            ],
                            "defaultValue": "\"bottom\""
                        },
                        {
                            "id": 10772,
                            "name": "CENTER",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Positions the popover so it's center aligned with the anchor element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 27,
                                    "character": 10
                                }
                            ],
                            "defaultValue": "\"center\""
                        },
                        {
                            "id": 10773,
                            "name": "LEFT",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Positions the popover left of the anchor element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 29,
                                    "character": 8
                                }
                            ],
                            "defaultValue": "\"left\""
                        },
                        {
                            "id": 10774,
                            "name": "RIGHT",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Positions the popover right of the anchor element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 31,
                                    "character": 9
                                }
                            ],
                            "defaultValue": "\"right\""
                        },
                        {
                            "id": 10770,
                            "name": "TOP",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Positions the popover above the anchor element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 23,
                                    "character": 7
                                }
                            ],
                            "defaultValue": "\"top\""
                        }
                    ],
                    "groups": [
                        {
                            "title": "Enumeration members",
                            "kind": 16,
                            "children": [10771, 10772, 10773, 10774, 10770]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/popover.tsx",
                            "line": 21,
                            "character": 29
                        }
                    ]
                },
                {
                    "id": 10795,
                    "name": "Popover",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A popover component, which is used to \"float\" some content above some other content.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Popover"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 10912,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 10913,
                            "name": "SS",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 10945,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/popover.tsx",
                            "line": 102,
                            "character": 13
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Component",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "PopoverProps"
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 10976,
                    "name": "FitInWindowMode",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Any of the supported {@link FitInWindowModes}."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/popover.tsx",
                            "line": 64,
                            "character": 27
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "reference",
                                "name": "NONE",
                                "id": 10776
                            },
                            {
                                "type": "reference",
                                "name": "FLIP",
                                "id": 10777
                            },
                            {
                                "type": "reference",
                                "name": "NUDGE",
                                "id": 10778
                            }
                        ]
                    }
                },
                {
                    "id": 10974,
                    "name": "PopoverPlacementX",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Any of the supported {@link PopoverPlacements} for horizontal positioning."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/popover.tsx",
                            "line": 36,
                            "character": 29
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "reference",
                                "name": "LEFT",
                                "id": 10773
                            },
                            {
                                "type": "reference",
                                "name": "CENTER",
                                "id": 10772
                            },
                            {
                                "type": "reference",
                                "name": "RIGHT",
                                "id": 10774
                            }
                        ]
                    }
                },
                {
                    "id": 10975,
                    "name": "PopoverPlacementY",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Any of the supported {@link PopoverPlacements} for vertical positioning."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/popover.tsx",
                            "line": 43,
                            "character": 29
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "reference",
                                "name": "TOP",
                                "id": 10770
                            },
                            {
                                "type": "reference",
                                "name": "CENTER",
                                "id": 10772
                            },
                            {
                                "type": "reference",
                                "name": "BOTTOM",
                                "id": 10771
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Enumerations",
                    "kind": 4,
                    "children": [10775, 10769]
                },
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [10795]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [10976, 10974, 10975]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/popover.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 11870,
            "name": "@airtable/blocks/ui: ProgressBar",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/progress_bar.tsx",
            "comment": {},
            "children": [
                {
                    "id": 11898,
                    "name": "ProgressBarProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link ProgressBar} component. Also accepts:\n* {@link ProgressBarStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/ProgressBar"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 11929,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 11899,
                            "name": "barColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A CSS color, such as `#ff9900`. Defaults to a blue color."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/progress_bar.tsx",
                                    "line": 103,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11901,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra `className`s to apply to the element, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/progress_bar.tsx",
                                    "line": 107,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11900,
                            "name": "progress",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "A number between 0 and 1. 0 is 0% complete, 0.5 is 50% complete, 1 is 100% complete. If you include a number outside of the range, the value will be clamped to be inside of the range."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/progress_bar.tsx",
                                    "line": 105,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "number"
                            }
                        },
                        {
                            "id": 11902,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra styles to apply to the progress bar."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/progress_bar.tsx",
                                    "line": 109,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [11899, 11901, 11900, 11902]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/progress_bar.tsx",
                            "line": 101,
                            "character": 26
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "ProgressBarStyleProps",
                            "id": 11871
                        },
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps"
                        }
                    ]
                },
                {
                    "id": 11871,
                    "name": "ProgressBarStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Style props for the {@link ProgressBar} component. Also accepts:\n* {@link BackgroundColorProps}\n* {@link FlexItemSetProps}\n* {@link HeightProps}\n* {@link MarginProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link WidthProps}"
                    },
                    "children": [
                        {
                            "id": 11872,
                            "name": "display",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/progress_bar.tsx",
                                    "line": 66,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "stringLiteral",
                                                "value": "block"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "inline"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "inline-block"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [11872]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/progress_bar.tsx",
                            "line": 56,
                            "character": 31
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "BackgroundColorProps",
                            "id": 7535
                        },
                        {
                            "type": "reference",
                            "name": "MaxWidthProps",
                            "id": 7660
                        },
                        {
                            "type": "reference",
                            "name": "MinWidthProps",
                            "id": 7680
                        },
                        {
                            "type": "reference",
                            "name": "WidthProps",
                            "id": 7690
                        },
                        {
                            "type": "reference",
                            "name": "HeightProps",
                            "id": 7640
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7826
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7910
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7921
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "ProgressBarProps",
                            "id": 11898
                        }
                    ]
                },
                {
                    "id": 11946,
                    "name": "ProgressBar",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true,
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A progress bar.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {ProgressBar} from '@airtable/blocks/ui';\n\nfunction MyComponent() {\n    return (\n        <ProgressBar\n            progress={0.6}\n            barColor='#ff9900'\n        />\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/ProgressBar"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 11947,
                            "name": "ProgressBar",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A progress bar."
                            },
                            "parameters": [
                                {
                                    "id": 11948,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "ProgressBarProps",
                                        "id": 11898
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/progress_bar.tsx",
                            "line": 138,
                            "character": 17
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [11898, 11871]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [11946]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/progress_bar.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 12116,
            "name": "@airtable/blocks/ui: RecordCard",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/record_card.tsx",
            "comment": {},
            "children": [
                {
                    "id": 12187,
                    "name": "RecordCard",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A card component that displays an Airtable record.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {RecordCard} from '@airtable/blocks/ui';\nimport React from 'react';\n\nfunction Block() {\n    const base = useBase();\n    const table = base.getTableByName('Table 1');\n    const fields = table ? table.fields : null;\n    const records = useRecords(table);\n\n    return (\n        <RecordCard\n            record={records[0]}\n            fields={fields}\n            expandRecordOptions={{records}}\n        />\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/RecordCard"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 12263,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 12264,
                            "name": "SS",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 12305,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/record_card.tsx",
                            "line": 249,
                            "character": 23
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Component",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "RecordCardProps",
                                    "id": 12143
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 12143,
                    "name": "RecordCardProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link RecordCard} component. Also accepts:\n* {@link RecordCardStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/RecordCard\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 12146,
                            "name": "attachmentCoverField",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Attachment field to display as an image in the square preview for the card. If omitted or not an attachment field, it uses for the first attachment field in `fields`. If `fields` is not defined, it uses the first attachment field in the view."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card.tsx",
                                    "line": 136,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Field",
                                "id": 1340
                            }
                        },
                        {
                            "id": 12164,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the record card."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card.tsx",
                                    "line": 156,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12149,
                            "name": "expandRecordOptions",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Options object for expanding a record."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card.tsx",
                                    "line": 142,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "ExpandRecordOpts",
                                        "id": 10459
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12150,
                            "name": "fields",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Fields to display in the card. The primary field is always displayed."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card.tsx",
                                    "line": 144,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "Field",
                                        "id": 1340
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12148,
                            "name": "height",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Height of the record card."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card.tsx",
                                    "line": 140,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12159,
                            "name": "onClick",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Click event handler for the record card. If undefined, uses default behavior to expand record. If null, no operation is performed."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card.tsx",
                                    "line": 152,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 12160,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 12161,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 12162,
                                                            "name": "e",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "reference",
                                                                "name": "MouseEvent",
                                                                "typeArguments": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "HTMLAnchorElement"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ],
                                            "sources": [
                                                {
                                                    "fileName": "src/ui/record_card.tsx",
                                                    "line": 152,
                                                    "character": 13
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12151,
                            "name": "onMouseEnter",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Mouse enter event handler for the record card."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card.tsx",
                                    "line": 147,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 12152,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 12153,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 12154,
                                                            "name": "e",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "reference",
                                                                "name": "MouseEvent",
                                                                "typeArguments": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "HTMLAnchorElement"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ],
                                            "sources": [
                                                {
                                                    "fileName": "src/ui/record_card.tsx",
                                                    "line": 147,
                                                    "character": 18
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12155,
                            "name": "onMouseLeave",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Mouse leave event handler for the record card."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card.tsx",
                                    "line": 149,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 12156,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 12157,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 12158,
                                                            "name": "e",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "reference",
                                                                "name": "MouseEvent",
                                                                "typeArguments": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "HTMLAnchorElement"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ],
                                            "sources": [
                                                {
                                                    "fileName": "src/ui/record_card.tsx",
                                                    "line": 149,
                                                    "character": 18
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12144,
                            "name": "record",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "Record to display in the card."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card.tsx",
                                    "line": 132,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Record",
                                        "id": 2296
                                    },
                                    {
                                        "type": "reference",
                                        "name": "RecordDef",
                                        "id": 645
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12165,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the record card."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card.tsx",
                                    "line": 158,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 12145,
                            "name": "view",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The view model to use for field order and record coloring."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card.tsx",
                                    "line": 134,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "View",
                                "id": 1973
                            }
                        },
                        {
                            "id": 12147,
                            "name": "width",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Width of the record card."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card.tsx",
                                    "line": 138,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                12146,
                                12164,
                                12149,
                                12150,
                                12148,
                                12159,
                                12151,
                                12155,
                                12144,
                                12165,
                                12145,
                                12147
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/record_card.tsx",
                            "line": 130,
                            "character": 25
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "RecordCardStyleProps",
                            "id": 12117
                        }
                    ]
                },
                {
                    "id": 12117,
                    "name": "RecordCardStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Style props for the {@link RecordCard} component. Accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link PositionSetProps}"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/record_card.tsx",
                            "line": 59,
                            "character": 30
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7826
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7910
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7921
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "RecordCardProps",
                            "id": 12143
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [12187]
                },
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [12143, 12117]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/record_card.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 12363,
            "name": "@airtable/blocks/ui: RecordCardList",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/record_card_list.tsx",
            "comment": {},
            "children": [
                {
                    "id": 12459,
                    "name": "RecordCardList",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Scrollable list of record cards.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {RecordCardList} from '@airtable/blocks/ui';\nimport React, {useState} from 'react';\n\nfunction Block() {\n    const base = useBase();\n    const [selectedRecord, setSelectedRecord] = useState(null);\n    const table = base.getTableByName('Table 1');\n    const view = table ? table.getViewByName('View 1') : null;\n    const records = useRecords(table);\n\n    return (\n        <RecordCardList\n            records={records}\n            view={view}\n            onRecordClick={record => {setSelectedRecord(record)}}\n        />\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/RecordCardList"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 12526,
                            "name": "SS",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/record_card_list.tsx",
                            "line": 299,
                            "character": 27
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Component",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "RecordCardListProps",
                                    "id": 12402
                                },
                                {
                                    "type": "reference",
                                    "name": "RecordCardListState"
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 12402,
                    "name": "RecordCardListProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link RecordCardList} component. Also accepts:\n* {@link RecordCardListStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/RecordCardList\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 12425,
                            "name": "attachmentCoverField",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Attachment field to display as an image in the square preview for each record card. If omitted or not an attachment field, it uses for the first attachment field in `fields`. If `fields` is not defined, it uses the first attachment field in the view."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 234,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Field",
                                "id": 1340
                            }
                        },
                        {
                            "id": 12426,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the record card list."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 236,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12423,
                            "name": "fields",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Fields to display in each record card. The primary field is always displayed."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 230,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "Field",
                                        "id": 1340
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12408,
                            "name": "onRecordClick",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Click event handler for an individual record card. If undefined, uses default behavior to expand record. If null, no operation is performed."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 224,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 12409,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 12410,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 12411,
                                                            "name": "record",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "Record",
                                                                        "id": 2296
                                                                    },
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "RecordDef",
                                                                        "id": 645
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "id": 12412,
                                                            "name": "index",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "number"
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ],
                                            "sources": [
                                                {
                                                    "fileName": "src/ui/record_card_list.tsx",
                                                    "line": 224,
                                                    "character": 26
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12413,
                            "name": "onRecordMouseEnter",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Mouse enter event handler for an individual record card."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 226,
                                    "character": 22
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 12414,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 12415,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 12416,
                                                            "name": "record",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "Record",
                                                                        "id": 2296
                                                                    },
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "RecordDef",
                                                                        "id": 645
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "id": 12417,
                                                            "name": "index",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "number"
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12418,
                            "name": "onRecordMouseLeave",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Mouse leave event handler for an individual record card."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 228,
                                    "character": 22
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 12419,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 12420,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 12421,
                                                            "name": "record",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "Record",
                                                                        "id": 2296
                                                                    },
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "RecordDef",
                                                                        "id": 645
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "id": 12422,
                                                            "name": "index",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "number"
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12404,
                            "name": "onScroll",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Scroll event handler for the list window."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 222,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 12405,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 12406,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 12407,
                                                            "name": "scrollEvent",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "reference",
                                                                "name": "RecordCardListScrollEvent",
                                                                "id": 12398
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12403,
                            "name": "records",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "Records to display in card list."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 220,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Record",
                                                "id": 2296
                                            }
                                        ]
                                    },
                                    {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "RecordDef",
                                                "id": 645
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12427,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the record card list."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 238,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 12424,
                            "name": "view",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The view model to use for field order and record coloring."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 232,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "View",
                                "id": 1973
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                12425,
                                12426,
                                12423,
                                12408,
                                12413,
                                12418,
                                12404,
                                12403,
                                12427,
                                12424
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/record_card_list.tsx",
                            "line": 218,
                            "character": 29
                        }
                    ]
                },
                {
                    "id": 12398,
                    "name": "RecordCardListScrollEvent",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Scroll event for {@link RecordCardList}."
                    },
                    "children": [
                        {
                            "id": 12399,
                            "name": "scrollDirection",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The direction of the scroll event."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 203,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "stringLiteral",
                                        "value": "forward"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "backward"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12400,
                            "name": "scrollOffset",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The vertical offset of the scrollable area."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 205,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "number"
                            }
                        },
                        {
                            "id": 12401,
                            "name": "scrollUpdateWasRequested",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "`true` for programmatic scrolling and `false` if the scroll was the result of a user interaction in the browser."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 207,
                                    "character": 28
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "boolean"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [12399, 12400, 12401]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/record_card_list.tsx",
                            "line": 201,
                            "character": 35
                        }
                    ]
                },
                {
                    "id": 12428,
                    "name": "RecordCardListStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Style props for the {@link RecordCardList} component. Accepts:\n* {@link DimensionsSetProps}\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link PositionSetProps}"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/record_card_list.tsx",
                            "line": 250,
                            "character": 34
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "DimensionsSetProps",
                            "id": 7700
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7826
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7910
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7921
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [12459]
                },
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [12402, 12398, 12428]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/record_card_list.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 9057,
            "name": "@airtable/blocks/ui: Select",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/select_and_select_buttons_helpers.ts",
            "comment": {},
            "children": [
                {
                    "id": 9058,
                    "name": "SelectOption",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A select option for {@link Select}, {@link TablePicker}, {@link ViewPicker}, {@link FieldPicker}, and their `Synced` counterparts."
                    },
                    "children": [
                        {
                            "id": 9061,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, this option will not be selectable."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_and_select_buttons_helpers.ts",
                                    "line": 32,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9060,
                            "name": "label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The label for the select option."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_and_select_buttons_helpers.ts",
                                    "line": 30,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.ReactNode"
                            }
                        },
                        {
                            "id": 9059,
                            "name": "value",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The value for the select option."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_and_select_buttons_helpers.ts",
                                    "line": 28,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "SelectOptionValue",
                                "id": 9062
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [9061, 9060, 9059]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select_and_select_buttons_helpers.ts",
                            "line": 26,
                            "character": 29
                        }
                    ]
                },
                {
                    "id": 9247,
                    "name": "SelectProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props for the {@link Select} component. Also accepts:\n* {@link SelectStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Select\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 9264,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-describedby']",
                                "id": 9155
                            }
                        },
                        {
                            "id": 9262,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-label']",
                                "id": 9153
                            }
                        },
                        {
                            "id": 9263,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-labelledby']",
                                "id": 9154
                            }
                        },
                        {
                            "id": 9256,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.autoFocus",
                                "id": 9147
                            }
                        },
                        {
                            "id": 9255,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.className",
                                "id": 9146
                            }
                        },
                        {
                            "id": 9260,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.disabled",
                                "id": 9151
                            }
                        },
                        {
                            "id": 9257,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.id",
                                "id": 9148
                            }
                        },
                        {
                            "id": 9258,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.name",
                                "id": 9149
                            }
                        },
                        {
                            "id": 9250,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected option changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 156,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 9251,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 9252,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 9253,
                                                            "name": "value",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "reference",
                                                                "name": "SelectOptionValue",
                                                                "id": 9062
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectProps.onChange",
                                "id": 9195
                            }
                        },
                        {
                            "id": 9249,
                            "name": "options",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The list of select options."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 154,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "SelectOption",
                                        "id": 9058
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectProps.options",
                                "id": 9194
                            }
                        },
                        {
                            "id": 9254,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9100
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.size",
                                "id": 9145
                            }
                        },
                        {
                            "id": 9261,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.style",
                                "id": 9152
                            }
                        },
                        {
                            "id": 9259,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.tabIndex",
                                "id": 9150
                            }
                        },
                        {
                            "id": 9248,
                            "name": "value",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The value of the selected option."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 181,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "SelectOptionValue",
                                "id": 9062
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                9264,
                                9262,
                                9263,
                                9256,
                                9255,
                                9260,
                                9257,
                                9258,
                                9250,
                                9249,
                                9254,
                                9261,
                                9259,
                                9248
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select.tsx",
                            "line": 179,
                            "character": 28
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedSelectProps",
                            "id": 9193
                        }
                    ]
                },
                {
                    "id": 9119,
                    "name": "SelectStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Style props shared between the following components.\n* {@link Select}, {@link SelectSynced}\n* {@link TablePicker}, {@link TablePickerSynced}\n* {@link ViewPicker}, {@link ViewPickerSynced}\n* {@link FieldPicker}, {@link FieldPickerSynced}",
                        "text": "Also accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link MaxWidthProps}\n"
                    },
                    "children": [
                        {
                            "id": 9120,
                            "name": "display",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 84,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "stringLiteral",
                                                "value": "inline-flex"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "flex"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "none"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [9120]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select.tsx",
                            "line": 76,
                            "character": 26
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "MaxWidthProps",
                            "id": 7660
                        },
                        {
                            "type": "reference",
                            "name": "MinWidthProps",
                            "id": 7680
                        },
                        {
                            "type": "reference",
                            "name": "WidthProps",
                            "id": 7690
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7826
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7910
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7921
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "SharedSelectBaseProps",
                            "id": 9144
                        }
                    ]
                },
                {
                    "id": 12611,
                    "name": "SelectSyncedProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link SelectSynced} component. Also accepts:\n* {@link SelectStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/SelectSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/Select\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 12628,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-describedby']",
                                "id": 9155
                            }
                        },
                        {
                            "id": 12626,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-label']",
                                "id": 9153
                            }
                        },
                        {
                            "id": 12627,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-labelledby']",
                                "id": 9154
                            }
                        },
                        {
                            "id": 12620,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.autoFocus",
                                "id": 9147
                            }
                        },
                        {
                            "id": 12619,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.className",
                                "id": 9146
                            }
                        },
                        {
                            "id": 12624,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.disabled",
                                "id": 9151
                            }
                        },
                        {
                            "id": 12612,
                            "name": "globalConfigKey",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "A string key or array key path in {@link GlobalConfig}. The selected option will always reflect the value stored in {@link GlobalConfig} for this key. Selecting a new option will update {@link GlobalConfig}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_synced.tsx",
                                    "line": 18,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "GlobalConfigKey",
                                "id": 950
                            }
                        },
                        {
                            "id": 12621,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.id",
                                "id": 9148
                            }
                        },
                        {
                            "id": 12622,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.name",
                                "id": 9149
                            }
                        },
                        {
                            "id": 12614,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected option changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 156,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 12615,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 12616,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 12617,
                                                            "name": "value",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "reference",
                                                                "name": "SelectOptionValue",
                                                                "id": 9062
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectProps.onChange",
                                "id": 9195
                            }
                        },
                        {
                            "id": 12613,
                            "name": "options",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The list of select options."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 154,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "SelectOption",
                                        "id": 9058
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectProps.options",
                                "id": 9194
                            }
                        },
                        {
                            "id": 12618,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9100
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.size",
                                "id": 9145
                            }
                        },
                        {
                            "id": 12625,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.style",
                                "id": 9152
                            }
                        },
                        {
                            "id": 12623,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.tabIndex",
                                "id": 9150
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                12628,
                                12626,
                                12627,
                                12620,
                                12619,
                                12624,
                                12612,
                                12621,
                                12622,
                                12614,
                                12613,
                                12618,
                                12625,
                                12623
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select_synced.tsx",
                            "line": 16,
                            "character": 27
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedSelectProps",
                            "id": 9193
                        }
                    ]
                },
                {
                    "id": 9144,
                    "name": "SharedSelectBaseProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props shared between the following components:\n* {@link Select}, {@link SelectSynced}\n* {@link TablePicker}, {@link TablePickerSynced}\n* {@link ViewPicker}, {@link ViewPickerSynced}\n* {@link FieldPicker}, {@link FieldPickerSynced}"
                    },
                    "children": [
                        {
                            "id": 9155,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9153,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9154,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9147,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9146,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9151,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9148,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9149,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9145,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9100
                            }
                        },
                        {
                            "id": 9152,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 9150,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                9155,
                                9153,
                                9154,
                                9147,
                                9146,
                                9151,
                                9148,
                                9149,
                                9145,
                                9152,
                                9150
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select.tsx",
                            "line": 96,
                            "character": 38
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "HTMLSelectElement"
                                }
                            ]
                        },
                        {
                            "type": "reference",
                            "name": "SelectStyleProps",
                            "id": 9119
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "SharedSelectProps",
                            "id": 9193
                        },
                        {
                            "type": "reference",
                            "name": "SharedTablePickerProps",
                            "id": 9408
                        },
                        {
                            "type": "reference",
                            "name": "SharedFieldPickerProps",
                            "id": 9608
                        },
                        {
                            "type": "reference",
                            "name": "SharedViewPickerProps",
                            "id": 9802
                        }
                    ]
                },
                {
                    "id": 9193,
                    "name": "SharedSelectProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props shared between the {@link Select} and {@link SelectSynced} components."
                    },
                    "children": [
                        {
                            "id": 9209,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-describedby']",
                                "id": 9155
                            }
                        },
                        {
                            "id": 9207,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-label']",
                                "id": 9153
                            }
                        },
                        {
                            "id": 9208,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-labelledby']",
                                "id": 9154
                            }
                        },
                        {
                            "id": 9201,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.autoFocus",
                                "id": 9147
                            }
                        },
                        {
                            "id": 9200,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.className",
                                "id": 9146
                            }
                        },
                        {
                            "id": 9205,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.disabled",
                                "id": 9151
                            }
                        },
                        {
                            "id": 9202,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.id",
                                "id": 9148
                            }
                        },
                        {
                            "id": 9203,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.name",
                                "id": 9149
                            }
                        },
                        {
                            "id": 9195,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected option changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 156,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 9196,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 9197,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 9198,
                                                            "name": "value",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "reference",
                                                                "name": "SelectOptionValue",
                                                                "id": 9062
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9194,
                            "name": "options",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The list of select options."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 154,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "SelectOption",
                                        "id": 9058
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9199,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9100
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.size",
                                "id": 9145
                            }
                        },
                        {
                            "id": 9206,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.style",
                                "id": 9152
                            }
                        },
                        {
                            "id": 9204,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.tabIndex",
                                "id": 9150
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                9209,
                                9207,
                                9208,
                                9201,
                                9200,
                                9205,
                                9202,
                                9203,
                                9195,
                                9194,
                                9199,
                                9206,
                                9204
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select.tsx",
                            "line": 152,
                            "character": 34
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedSelectBaseProps",
                            "id": 9144
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "SelectProps",
                            "id": 9247
                        },
                        {
                            "type": "reference",
                            "name": "SelectSyncedProps",
                            "id": 12611
                        }
                    ]
                },
                {
                    "id": 9062,
                    "name": "SelectOptionValue",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Supported value types for {@link SelectOption}."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/select_and_select_buttons_helpers.ts",
                            "line": 10,
                            "character": 29
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "intrinsic",
                                "name": "string"
                            },
                            {
                                "type": "intrinsic",
                                "name": "number"
                            },
                            {
                                "type": "intrinsic",
                                "name": "boolean"
                            },
                            {
                                "type": "intrinsic",
                                "name": "null"
                            },
                            {
                                "type": "intrinsic",
                                "name": "undefined"
                            }
                        ]
                    }
                },
                {
                    "id": 9331,
                    "name": "Select",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "Dropdown menu component. A wrapper around `<select>` that fits in with Airtable's user interface.",
                        "text": "[[ Story id=\"select--example\" title=\"Select example\" ]]\n",
                        "tags": [
                            {
                                "tag": "component",
                                "text": ""
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/Select\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 9332,
                            "name": "Select",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Dropdown menu component. A wrapper around `<select>` that fits in with Airtable's user interface.",
                                "text": "[[ Story id=\"select--example\" title=\"Select example\" ]]\n"
                            },
                            "parameters": [
                                {
                                    "id": 9333,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "SelectProps",
                                        "id": 9247
                                    }
                                },
                                {
                                    "id": 9334,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLSelectElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select.tsx",
                            "line": 194,
                            "character": 12
                        }
                    ]
                },
                {
                    "id": 12666,
                    "name": "SelectSynced",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A wrapper around the {@link Select} component that syncs with {@link GlobalConfig}.",
                        "text": "[[ Story id=\"select--synced-example\" title=\"Synced select example\" ]]\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/SelectSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/Select"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 12667,
                            "name": "SelectSynced",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A wrapper around the {@link Select} component that syncs with {@link GlobalConfig}.",
                                "text": "[[ Story id=\"select--synced-example\" title=\"Synced select example\" ]]\n"
                            },
                            "parameters": [
                                {
                                    "id": 12668,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "SelectSyncedProps",
                                        "id": 12611
                                    }
                                },
                                {
                                    "id": 12669,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLSelectElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select_synced.tsx",
                            "line": 30,
                            "character": 18
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [9058, 9247, 9119, 12611, 9144, 9193]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [9062]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [9331, 12666]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/select_and_select_buttons_helpers.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 12671,
            "name": "@airtable/blocks/ui: SelectButtons",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/select_buttons.tsx",
            "comment": {},
            "children": [
                {
                    "id": 12746,
                    "name": "SelectButtonsProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link SelectButtons} component. Also accepts:\n* {@link SelectButtonsStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/SelectButtons\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 12783,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 12759,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 109,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.['aria-describedby']",
                                "id": 12708
                            }
                        },
                        {
                            "id": 12757,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 105,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.['aria-label']",
                                "id": 12706
                            }
                        },
                        {
                            "id": 12758,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 107,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.['aria-labelledby']",
                                "id": 12707
                            }
                        },
                        {
                            "id": 12754,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 99,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.className",
                                "id": 12703
                            }
                        },
                        {
                            "id": 12753,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 97,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.disabled",
                                "id": 12702
                            }
                        },
                        {
                            "id": 12749,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected option changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 95,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 12750,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 12751,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 12752,
                                                            "name": "value",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "reference",
                                                                "name": "SelectOptionValue",
                                                                "id": 9062
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.onChange",
                                "id": 12698
                            }
                        },
                        {
                            "id": 12748,
                            "name": "options",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The list of select options."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 93,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "SelectOption",
                                        "id": 9058
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.options",
                                "id": 12697
                            }
                        },
                        {
                            "id": 12755,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select buttons."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 101,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9100
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.size",
                                "id": 12704
                            }
                        },
                        {
                            "id": 12756,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 103,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.style",
                                "id": 12705
                            }
                        },
                        {
                            "id": 12747,
                            "name": "value",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The value of the selected option."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 141,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "SelectOptionValue",
                                "id": 9062
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                12759,
                                12757,
                                12758,
                                12754,
                                12753,
                                12749,
                                12748,
                                12755,
                                12756,
                                12747
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select_buttons.tsx",
                            "line": 139,
                            "character": 28
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedSelectButtonsProps",
                            "id": 12696
                        }
                    ]
                },
                {
                    "id": 12672,
                    "name": "SelectButtonsStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props shared between the {@link SelectButtons} and {@link SelectButtonsSynced} components. Accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link WidthProps}"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/select_buttons.tsx",
                            "line": 67,
                            "character": 40
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "MaxWidthProps",
                            "id": 7660
                        },
                        {
                            "type": "reference",
                            "name": "MinWidthProps",
                            "id": 7680
                        },
                        {
                            "type": "reference",
                            "name": "WidthProps",
                            "id": 7690
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7826
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7910
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7921
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "SharedSelectButtonsProps",
                            "id": 12696
                        }
                    ]
                },
                {
                    "id": 12829,
                    "name": "SelectButtonsSyncedProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link SelectButtonsSynced} component. Also accepts:\n* {@link SelectButtonsStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/SelectButtonsSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/SelectButtons\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 12866,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 12842,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 109,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.['aria-describedby']",
                                "id": 12708
                            }
                        },
                        {
                            "id": 12840,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 105,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.['aria-label']",
                                "id": 12706
                            }
                        },
                        {
                            "id": 12841,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 107,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.['aria-labelledby']",
                                "id": 12707
                            }
                        },
                        {
                            "id": 12837,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 99,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.className",
                                "id": 12703
                            }
                        },
                        {
                            "id": 12836,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 97,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.disabled",
                                "id": 12702
                            }
                        },
                        {
                            "id": 12830,
                            "name": "globalConfigKey",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "A string key or array key path in {@link GlobalConfig}. The selected option will always reflect the value stored in {@link GlobalConfig} for this key. Selecting a new option will update {@link GlobalConfig}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons_synced.tsx",
                                    "line": 21,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "GlobalConfigKey",
                                "id": 950
                            }
                        },
                        {
                            "id": 12832,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected option changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 95,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 12833,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 12834,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 12835,
                                                            "name": "value",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "reference",
                                                                "name": "SelectOptionValue",
                                                                "id": 9062
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.onChange",
                                "id": 12698
                            }
                        },
                        {
                            "id": 12831,
                            "name": "options",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The list of select options."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 93,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "SelectOption",
                                        "id": 9058
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.options",
                                "id": 12697
                            }
                        },
                        {
                            "id": 12838,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select buttons."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 101,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9100
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.size",
                                "id": 12704
                            }
                        },
                        {
                            "id": 12839,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 103,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.style",
                                "id": 12705
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                12842,
                                12840,
                                12841,
                                12837,
                                12836,
                                12830,
                                12832,
                                12831,
                                12838,
                                12839
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select_buttons_synced.tsx",
                            "line": 19,
                            "character": 34
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedSelectButtonsProps",
                            "id": 12696
                        }
                    ]
                },
                {
                    "id": 12696,
                    "name": "SharedSelectButtonsProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props shared between the {@link SelectButtons} and {@link SelectButtonsSynced} components."
                    },
                    "typeParameter": [
                        {
                            "id": 12732,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 12708,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 109,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12706,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 105,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12707,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 107,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12703,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 99,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12702,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 97,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12698,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected option changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 95,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 12699,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 12700,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 12701,
                                                            "name": "value",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "reference",
                                                                "name": "SelectOptionValue",
                                                                "id": 9062
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12697,
                            "name": "options",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The list of select options."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 93,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "SelectOption",
                                        "id": 9058
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12704,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select buttons."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 101,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9100
                            }
                        },
                        {
                            "id": 12705,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 103,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                12708,
                                12706,
                                12707,
                                12703,
                                12702,
                                12698,
                                12697,
                                12704,
                                12705
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select_buttons.tsx",
                            "line": 91,
                            "character": 41
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SelectButtonsStyleProps",
                            "id": 12672
                        },
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps"
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "SelectButtonsProps",
                            "id": 12746
                        },
                        {
                            "type": "reference",
                            "name": "SelectButtonsSyncedProps",
                            "id": 12829
                        }
                    ]
                },
                {
                    "id": 12823,
                    "name": "SelectButtons",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A segmented control for selecting one value from a set of options.",
                        "text": "[[ Story id=\"selectbuttons--example\" title=\"Select buttons example\" ]]\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/SelectButtons"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 12824,
                            "name": "SelectButtons",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A segmented control for selecting one value from a set of options.",
                                "text": "[[ Story id=\"selectbuttons--example\" title=\"Select buttons example\" ]]\n"
                            },
                            "parameters": [
                                {
                                    "id": 12825,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "SelectButtonsProps",
                                        "id": 12746
                                    }
                                },
                                {
                                    "id": 12826,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLDivElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select_buttons.tsx",
                            "line": 152,
                            "character": 19
                        }
                    ]
                },
                {
                    "id": 12880,
                    "name": "SelectButtonsSynced",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": " A wrapper around the {@link SelectButtons} component that syncs with {@link GlobalConfig}.",
                        "text": "[[ Story id=\"selectbuttons--synced-example\" title=\"SelectButtonsSynced example\" ]]\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/SelectButtonsSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/SelectButtons"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 12881,
                            "name": "SelectButtonsSynced",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": " A wrapper around the {@link SelectButtons} component that syncs with {@link GlobalConfig}.",
                                "text": "[[ Story id=\"selectbuttons--synced-example\" title=\"SelectButtonsSynced example\" ]]\n"
                            },
                            "parameters": [
                                {
                                    "id": 12882,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "SelectButtonsSyncedProps",
                                        "id": 12829
                                    }
                                },
                                {
                                    "id": 12883,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLDivElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select_buttons_synced.tsx",
                            "line": 33,
                            "character": 25
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [12746, 12672, 12829, 12696]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [12823, 12880]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/select_buttons.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 13622,
            "name": "@airtable/blocks/ui: Switch",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/switch.tsx",
            "comment": {},
            "children": [
                {
                    "id": 13623,
                    "name": "SharedSwitchProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props shared between the {@link Switch} and {@link SwitchSynced} components."
                    },
                    "typeParameter": [
                        {
                            "id": 13639,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 13638,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 88,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13636,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The label for the switch. Use this if the switch lacks a visible text label."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 84,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13637,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 86,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13624,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the switch."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 66,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13625,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the switch."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 68,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13634,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The ID of the switch element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 80,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13626,
                            "name": "label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The label node for the switch."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 70,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "React.ReactNode"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13627,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the switch is toggled."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 72,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 13628,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 13629,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 13630,
                                                            "name": "newValue",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "boolean"
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13633,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the switch. Defaults to `default`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 78,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9100
                            }
                        },
                        {
                            "id": 13635,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the switch."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 82,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 13631,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Indicates if the switch can be focused and if/where it participates in sequential keyboard navigation."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 74,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13632,
                            "name": "variant",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The variant of the switch. Defaults to `default` (green)."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 76,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "SwitchVariant",
                                "id": 13781
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                13638,
                                13636,
                                13637,
                                13624,
                                13625,
                                13634,
                                13626,
                                13627,
                                13633,
                                13635,
                                13631,
                                13632
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/switch.tsx",
                            "line": 64,
                            "character": 34
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps"
                        },
                        {
                            "type": "reference",
                            "name": "SwitchStyleProps",
                            "id": 13748
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "SwitchProps",
                            "id": 13685
                        },
                        {
                            "type": "reference",
                            "name": "SwitchSyncedProps",
                            "id": 13815
                        }
                    ]
                },
                {
                    "id": 13685,
                    "name": "SwitchProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link Switch} component. Also accepts:\n* {@link SwitchStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Switch\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 13702,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 13701,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 88,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.['aria-describedby']",
                                "id": 13638
                            }
                        },
                        {
                            "id": 13699,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The label for the switch. Use this if the switch lacks a visible text label."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 84,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.['aria-label']",
                                "id": 13636
                            }
                        },
                        {
                            "id": 13700,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 86,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.['aria-labelledby']",
                                "id": 13637
                            }
                        },
                        {
                            "id": 13687,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the switch."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 66,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.className",
                                "id": 13624
                            }
                        },
                        {
                            "id": 13688,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the switch."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 68,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.disabled",
                                "id": 13625
                            }
                        },
                        {
                            "id": 13697,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The ID of the switch element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 80,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.id",
                                "id": 13634
                            }
                        },
                        {
                            "id": 13689,
                            "name": "label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The label node for the switch."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 70,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "React.ReactNode"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.label",
                                "id": 13626
                            }
                        },
                        {
                            "id": 13690,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the switch is toggled."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 72,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 13691,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 13692,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 13693,
                                                            "name": "newValue",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "boolean"
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.onChange",
                                "id": 13627
                            }
                        },
                        {
                            "id": 13696,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the switch. Defaults to `default`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 78,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9100
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.size",
                                "id": 13633
                            }
                        },
                        {
                            "id": 13698,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the switch."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 82,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.style",
                                "id": 13635
                            }
                        },
                        {
                            "id": 13694,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Indicates if the switch can be focused and if/where it participates in sequential keyboard navigation."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 74,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.tabIndex",
                                "id": 13631
                            }
                        },
                        {
                            "id": 13686,
                            "name": "value",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "If set to `true`, the switch will be switchd on."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 99,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "boolean"
                            }
                        },
                        {
                            "id": 13695,
                            "name": "variant",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The variant of the switch. Defaults to `default` (green)."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 76,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "SwitchVariant",
                                "id": 13781
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.variant",
                                "id": 13632
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                13701,
                                13699,
                                13700,
                                13687,
                                13688,
                                13697,
                                13689,
                                13690,
                                13696,
                                13698,
                                13694,
                                13686,
                                13695
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/switch.tsx",
                            "line": 97,
                            "character": 21
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedSwitchProps",
                            "id": 13623
                        }
                    ]
                },
                {
                    "id": 13748,
                    "name": "SwitchStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props for the {@link Switch} component. Also accepts:\n* {@link BackgroundColorProps}\n* {@link FlexItemSetProps}\n* {@link MinWidthProps}\n* {@link MaxWidthProps}\n* {@link PositionSetProps}\n* {@link SpacingSetProps}\n* {@link WidthProps}"
                    },
                    "children": [
                        {
                            "id": 13749,
                            "name": "display",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 151,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "stringLiteral",
                                                "value": "flex"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "inline-flex"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [13749]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/switch.tsx",
                            "line": 142,
                            "character": 33
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "MaxWidthProps",
                            "id": 7660
                        },
                        {
                            "type": "reference",
                            "name": "MinWidthProps",
                            "id": 7680
                        },
                        {
                            "type": "reference",
                            "name": "WidthProps",
                            "id": 7690
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7826
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7910
                        },
                        {
                            "type": "reference",
                            "name": "SpacingSetProps",
                            "id": 8003
                        },
                        {
                            "type": "reference",
                            "name": "BackgroundColorProps",
                            "id": 7535
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "SharedSwitchProps",
                            "id": 13623
                        }
                    ]
                },
                {
                    "id": 13815,
                    "name": "SwitchSyncedProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link SwitchSynced} component. Also accepts:\n* {@link SwitchStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/SwitchSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/Switch\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 13832,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 13831,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 88,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.['aria-describedby']",
                                "id": 13638
                            }
                        },
                        {
                            "id": 13829,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The label for the switch. Use this if the switch lacks a visible text label."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 84,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.['aria-label']",
                                "id": 13636
                            }
                        },
                        {
                            "id": 13830,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 86,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.['aria-labelledby']",
                                "id": 13637
                            }
                        },
                        {
                            "id": 13817,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the switch."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 66,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.className",
                                "id": 13624
                            }
                        },
                        {
                            "id": 13818,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the switch."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 68,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.disabled",
                                "id": 13625
                            }
                        },
                        {
                            "id": 13816,
                            "name": "globalConfigKey",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "A string key or array key path in {@link GlobalConfig}. The switch option will always reflect the boolean value stored in `globalConfig` for this key. Toggling the switch will update `globalConfig`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch_synced.tsx",
                                    "line": 17,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "GlobalConfigKey",
                                "id": 950
                            }
                        },
                        {
                            "id": 13827,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The ID of the switch element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 80,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.id",
                                "id": 13634
                            }
                        },
                        {
                            "id": 13819,
                            "name": "label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The label node for the switch."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 70,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "React.ReactNode"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.label",
                                "id": 13626
                            }
                        },
                        {
                            "id": 13820,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the switch is toggled."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 72,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 13821,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 13822,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 13823,
                                                            "name": "newValue",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "boolean"
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.onChange",
                                "id": 13627
                            }
                        },
                        {
                            "id": 13826,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the switch. Defaults to `default`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 78,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9100
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.size",
                                "id": 13633
                            }
                        },
                        {
                            "id": 13828,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the switch."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 82,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.style",
                                "id": 13635
                            }
                        },
                        {
                            "id": 13824,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Indicates if the switch can be focused and if/where it participates in sequential keyboard navigation."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 74,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.tabIndex",
                                "id": 13631
                            }
                        },
                        {
                            "id": 13825,
                            "name": "variant",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The variant of the switch. Defaults to `default` (green)."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 76,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "SwitchVariant",
                                "id": 13781
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.variant",
                                "id": 13632
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                13831,
                                13829,
                                13830,
                                13817,
                                13818,
                                13816,
                                13827,
                                13819,
                                13820,
                                13826,
                                13828,
                                13824,
                                13825
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/switch_synced.tsx",
                            "line": 15,
                            "character": 27
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedSwitchProps",
                            "id": 13623
                        }
                    ]
                },
                {
                    "id": 13781,
                    "name": "SwitchVariant",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Variants for the {@link Switch} component:",
                        "text": "• **default**\n\nGreen switch for toggling a setting or other boolean property.\n\n• **danger**\n\nRed switch for toggling a dangerous or infrequently-used setting.\n"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/switch.tsx",
                            "line": 49,
                            "character": 18
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "default"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "danger"
                            }
                        ]
                    }
                },
                {
                    "id": 13809,
                    "name": "Switch",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A toggle switch for controlling boolean values. Similar to a checkbox.",
                        "text": "[[ Story id=\"switch--example\" title=\"Switch example\" ]]\n\nBy default, the Switch component is styled to be full-width (`width=\"100%\"`) with a gray\nbackground to match other controls like Select, SelectButtons, Input, etc. This behavior can be\noverridden using style props. For example, you can set `backgroundColor=\"transparent\"` on the\nSwitch for a transparent background.\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Switch"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 13810,
                            "name": "Switch",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A toggle switch for controlling boolean values. Similar to a checkbox.",
                                "text": "[[ Story id=\"switch--example\" title=\"Switch example\" ]]\n\nBy default, the Switch component is styled to be full-width (`width=\"100%\"`) with a gray\nbackground to match other controls like Select, SelectButtons, Input, etc. This behavior can be\noverridden using style props. For example, you can set `backgroundColor=\"transparent\"` on the\nSwitch for a transparent background.\n"
                            },
                            "parameters": [
                                {
                                    "id": 13811,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "SwitchProps",
                                        "id": 13685
                                    }
                                },
                                {
                                    "id": 13812,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLDivElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/switch.tsx",
                            "line": 178,
                            "character": 12
                        }
                    ]
                },
                {
                    "id": 13878,
                    "name": "SwitchSynced",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A toggleable switch for controlling boolean values, synced with {@link GlobalConfig}. Similar to a checkbox.",
                        "text": "[[ Story id=\"switch--example-synced\" title=\"Synced switch example\" ]]\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/SwitchSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/Switch"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 13879,
                            "name": "SwitchSynced",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A toggleable switch for controlling boolean values, synced with {@link GlobalConfig}. Similar to a checkbox.",
                                "text": "[[ Story id=\"switch--example-synced\" title=\"Synced switch example\" ]]\n"
                            },
                            "parameters": [
                                {
                                    "id": 13880,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "SwitchSyncedProps",
                                        "id": 13815
                                    }
                                },
                                {
                                    "id": 13881,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLDivElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/switch_synced.tsx",
                            "line": 29,
                            "character": 18
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [13623, 13685, 13748, 13815]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [13781]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [13809, 13878]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/switch.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 9407,
            "name": "@airtable/blocks/ui: TablePicker",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/table_picker.tsx",
            "comment": {},
            "children": [
                {
                    "id": 9408,
                    "name": "SharedTablePickerProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props shared between the {@link TablePicker} and {@link TablePickerSynced} components."
                    },
                    "children": [
                        {
                            "id": 9425,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-describedby']",
                                "id": 9155
                            }
                        },
                        {
                            "id": 9423,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-label']",
                                "id": 9153
                            }
                        },
                        {
                            "id": 9424,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-labelledby']",
                                "id": 9154
                            }
                        },
                        {
                            "id": 9417,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.autoFocus",
                                "id": 9147
                            }
                        },
                        {
                            "id": 9416,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.className",
                                "id": 9146
                            }
                        },
                        {
                            "id": 9421,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.disabled",
                                "id": 9151
                            }
                        },
                        {
                            "id": 9418,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.id",
                                "id": 9148
                            }
                        },
                        {
                            "id": 9419,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.name",
                                "id": 9149
                            }
                        },
                        {
                            "id": 9411,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected table changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/table_picker.tsx",
                                    "line": 19,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 9412,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 9413,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 9414,
                                                            "name": "tableModel",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "Table",
                                                                        "id": 14669
                                                                    },
                                                                    {
                                                                        "type": "intrinsic",
                                                                        "name": "null"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9410,
                            "name": "placeholder",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The placeholder text when no table is selected."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/table_picker.tsx",
                                    "line": 17,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9409,
                            "name": "shouldAllowPickingNone",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user can unset the selected table."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/table_picker.tsx",
                                    "line": 15,
                                    "character": 26
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9415,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9100
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.size",
                                "id": 9145
                            }
                        },
                        {
                            "id": 9422,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.style",
                                "id": 9152
                            }
                        },
                        {
                            "id": 9420,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.tabIndex",
                                "id": 9150
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                9425,
                                9423,
                                9424,
                                9417,
                                9416,
                                9421,
                                9418,
                                9419,
                                9411,
                                9410,
                                9409,
                                9415,
                                9422,
                                9420
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/table_picker.tsx",
                            "line": 13,
                            "character": 39
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedSelectBaseProps",
                            "id": 9144
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TablePickerProps",
                            "id": 9463
                        },
                        {
                            "type": "reference",
                            "name": "TablePickerSyncedProps",
                            "id": 9543
                        }
                    ]
                },
                {
                    "id": 9463,
                    "name": "TablePickerProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link TablePicker} component. Also accepts:\n* {@link SelectStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/TablePicker\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 9481,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-describedby']",
                                "id": 9155
                            }
                        },
                        {
                            "id": 9479,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-label']",
                                "id": 9153
                            }
                        },
                        {
                            "id": 9480,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-labelledby']",
                                "id": 9154
                            }
                        },
                        {
                            "id": 9473,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.autoFocus",
                                "id": 9147
                            }
                        },
                        {
                            "id": 9472,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.className",
                                "id": 9146
                            }
                        },
                        {
                            "id": 9477,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.disabled",
                                "id": 9151
                            }
                        },
                        {
                            "id": 9474,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.id",
                                "id": 9148
                            }
                        },
                        {
                            "id": 9475,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.name",
                                "id": 9149
                            }
                        },
                        {
                            "id": 9467,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected table changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/table_picker.tsx",
                                    "line": 19,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 9468,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 9469,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 9470,
                                                            "name": "tableModel",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "Table",
                                                                        "id": 14669
                                                                    },
                                                                    {
                                                                        "type": "intrinsic",
                                                                        "name": "null"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedTablePickerProps.onChange",
                                "id": 9411
                            }
                        },
                        {
                            "id": 9466,
                            "name": "placeholder",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The placeholder text when no table is selected."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/table_picker.tsx",
                                    "line": 17,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedTablePickerProps.placeholder",
                                "id": 9410
                            }
                        },
                        {
                            "id": 9465,
                            "name": "shouldAllowPickingNone",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user can unset the selected table."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/table_picker.tsx",
                                    "line": 15,
                                    "character": 26
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedTablePickerProps.shouldAllowPickingNone",
                                "id": 9409
                            }
                        },
                        {
                            "id": 9471,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9100
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.size",
                                "id": 9145
                            }
                        },
                        {
                            "id": 9478,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.style",
                                "id": 9152
                            }
                        },
                        {
                            "id": 9476,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.tabIndex",
                                "id": 9150
                            }
                        },
                        {
                            "id": 9464,
                            "name": "table",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The selected table model."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/table_picker.tsx",
                                    "line": 38,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Table",
                                        "id": 14669
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                9481,
                                9479,
                                9480,
                                9473,
                                9472,
                                9477,
                                9474,
                                9475,
                                9467,
                                9466,
                                9465,
                                9471,
                                9478,
                                9476,
                                9464
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/table_picker.tsx",
                            "line": 36,
                            "character": 26
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedTablePickerProps",
                            "id": 9408
                        }
                    ]
                },
                {
                    "id": 9543,
                    "name": "TablePickerSyncedProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link TablePickerSynced} component. Also accepts:\n* {@link SelectStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/TablePickerSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/TablePicker\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 9561,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-describedby']",
                                "id": 9155
                            }
                        },
                        {
                            "id": 9559,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-label']",
                                "id": 9153
                            }
                        },
                        {
                            "id": 9560,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-labelledby']",
                                "id": 9154
                            }
                        },
                        {
                            "id": 9553,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.autoFocus",
                                "id": 9147
                            }
                        },
                        {
                            "id": 9552,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.className",
                                "id": 9146
                            }
                        },
                        {
                            "id": 9557,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.disabled",
                                "id": 9151
                            }
                        },
                        {
                            "id": 9544,
                            "name": "globalConfigKey",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "A string key or array key path in {@link GlobalConfig}. The selected table will always reflect the table id stored in {@link GlobalConfig} for this key. Selecting a new table will update {@link GlobalConfig}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/table_picker_synced.tsx",
                                    "line": 20,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "GlobalConfigKey",
                                "id": 950
                            }
                        },
                        {
                            "id": 9554,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.id",
                                "id": 9148
                            }
                        },
                        {
                            "id": 9555,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.name",
                                "id": 9149
                            }
                        },
                        {
                            "id": 9547,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected table changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/table_picker.tsx",
                                    "line": 19,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 9548,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 9549,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 9550,
                                                            "name": "tableModel",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "Table",
                                                                        "id": 14669
                                                                    },
                                                                    {
                                                                        "type": "intrinsic",
                                                                        "name": "null"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedTablePickerProps.onChange",
                                "id": 9411
                            }
                        },
                        {
                            "id": 9546,
                            "name": "placeholder",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The placeholder text when no table is selected."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/table_picker.tsx",
                                    "line": 17,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedTablePickerProps.placeholder",
                                "id": 9410
                            }
                        },
                        {
                            "id": 9545,
                            "name": "shouldAllowPickingNone",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user can unset the selected table."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/table_picker.tsx",
                                    "line": 15,
                                    "character": 26
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedTablePickerProps.shouldAllowPickingNone",
                                "id": 9409
                            }
                        },
                        {
                            "id": 9551,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9100
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.size",
                                "id": 9145
                            }
                        },
                        {
                            "id": 9558,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.style",
                                "id": 9152
                            }
                        },
                        {
                            "id": 9556,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.tabIndex",
                                "id": 9150
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                9561,
                                9559,
                                9560,
                                9553,
                                9552,
                                9557,
                                9544,
                                9554,
                                9555,
                                9547,
                                9546,
                                9545,
                                9551,
                                9558,
                                9556
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/table_picker_synced.tsx",
                            "line": 18,
                            "character": 32
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedTablePickerProps",
                            "id": 9408
                        }
                    ]
                },
                {
                    "id": 9526,
                    "name": "TablePicker",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "Dropdown menu component for selecting tables.",
                        "text": "[[ Story id=\"modelpickers--tablepicker-example\" title=\"Table picker example\" ]]\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/TablePicker"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 9527,
                            "name": "TablePicker",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Dropdown menu component for selecting tables.",
                                "text": "[[ Story id=\"modelpickers--tablepicker-example\" title=\"Table picker example\" ]]\n"
                            },
                            "parameters": [
                                {
                                    "id": 9528,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "TablePickerProps",
                                        "id": 9463
                                    }
                                },
                                {
                                    "id": 9529,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLSelectElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/table_picker.tsx",
                            "line": 49,
                            "character": 17
                        }
                    ]
                },
                {
                    "id": 9602,
                    "name": "TablePickerSynced",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A wrapper around the {@link TablePicker} component that syncs with {@link GlobalConfig}.",
                        "text": "[[ Story id=\"modelpickers--tablepickersynced-example\" title=\"Synced table picker example\" ]]\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/TablePickerSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/TablePicker"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 9603,
                            "name": "TablePickerSynced",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A wrapper around the {@link TablePicker} component that syncs with {@link GlobalConfig}.",
                                "text": "[[ Story id=\"modelpickers--tablepickersynced-example\" title=\"Synced table picker example\" ]]\n"
                            },
                            "parameters": [
                                {
                                    "id": 9604,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "TablePickerSyncedProps",
                                        "id": 9543
                                    }
                                },
                                {
                                    "id": 9605,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLSelectElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/table_picker_synced.tsx",
                            "line": 37,
                            "character": 23
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [9408, 9463, 9543]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [9526, 9602]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/table_picker.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 11004,
            "name": "@airtable/blocks/ui: Text",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/text.tsx",
            "comment": {},
            "children": [
                {
                    "id": 11005,
                    "name": "TextProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link Text} component. Also supports:\n* {@link AriaProps}\n* {@link AllStylesProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Text\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 11006,
                            "name": "as",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The element that is rendered. Defaults to `p`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text.tsx",
                                    "line": 69,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "stringLiteral",
                                        "value": "p"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "h1"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "h2"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "h3"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "h4"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "h5"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "h6"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "span"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "li"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "em"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "strong"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "kbd"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "mark"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "q"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "s"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "samp"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "small"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "sub"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "sup"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "time"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "var"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "blockquote"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11008,
                            "name": "children",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The contents of the text."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text.tsx",
                                    "line": 95,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "React.ReactNode"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11012,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text.tsx",
                                    "line": 103,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11011,
                            "name": "dataAttributes",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Data attributes that are spread onto the element, e.g. `dataAttributes={{'data-*': '...'}}`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text.tsx",
                                    "line": 101,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "DataAttributesProp"
                            }
                        },
                        {
                            "id": 11009,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text.tsx",
                                    "line": 97,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11014,
                            "name": "role",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `role` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text.tsx",
                                    "line": 107,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11010,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the text. Defaults to `default`. Can be a responsive prop object."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text.tsx",
                                    "line": 99,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "TextSizeProp",
                                "id": 11097
                            }
                        },
                        {
                            "id": 11013,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text.tsx",
                                    "line": 105,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 11007,
                            "name": "variant",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The variant of the text. Defaults to `default`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text.tsx",
                                    "line": 93,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "TextVariant",
                                "id": 11090
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                11006,
                                11008,
                                11012,
                                11011,
                                11009,
                                11014,
                                11010,
                                11013,
                                11007
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/text.tsx",
                            "line": 67,
                            "character": 19
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AriaProps",
                            "id": 10978
                        },
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8147
                        }
                    ]
                },
                {
                    "id": 11094,
                    "name": "TextSize",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Sizes for the {@link Text} component."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/text.tsx",
                            "line": 37,
                            "character": 20
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "small"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "default"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "large"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "xlarge"
                            }
                        ]
                    }
                },
                {
                    "id": 11097,
                    "name": "TextSizeProp",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/ui/text.tsx",
                            "line": 40,
                            "character": 24
                        }
                    ],
                    "type": {
                        "type": "reference",
                        "name": "ResponsiveProp",
                        "id": 7529,
                        "typeArguments": [
                            {
                                "type": "reference",
                                "name": "TextSize",
                                "id": 11094
                            }
                        ]
                    }
                },
                {
                    "id": 11090,
                    "name": "TextVariant",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Variants for the {@link Text} component:",
                        "text": "• **default**\n\nSingle-line text.\n\n• **paragraph**\n\nMulti-line text such as body copy.\n"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/text.tsx",
                            "line": 30,
                            "character": 23
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "default"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "paragraph"
                            }
                        ]
                    }
                },
                {
                    "id": 11103,
                    "name": "Text",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A text component with sizes and variants.",
                        "text": "[[ Story id=\"text--example\" title=\"Text example\" ]]\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Text"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 11104,
                            "name": "Text",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A text component with sizes and variants.",
                                "text": "[[ Story id=\"text--example\" title=\"Text example\" ]]\n"
                            },
                            "parameters": [
                                {
                                    "id": 11105,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "TextProps",
                                        "id": 11005
                                    }
                                },
                                {
                                    "id": 11106,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/text.tsx",
                            "line": 118,
                            "character": 10
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [11005]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [11094, 11097, 11090]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [11103]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/text.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 14114,
            "name": "@airtable/blocks/ui: TextButton",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/text_button.tsx",
            "comment": {},
            "children": [
                {
                    "id": 14147,
                    "name": "TextButtonProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link TextButton} component. Also supports:\n* {@link AriaProps}\n* {@link TextButtonStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/TextButton\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 14162,
                            "name": "aria-selected",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-selected` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 146,
                                    "character": 21
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14152,
                            "name": "children",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The contents of the button."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 129,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "React.ReactNode"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14159,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 140,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14161,
                            "name": "dataAttributes",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Data attributes that are spread onto the element, e.g. `dataAttributes={{'data-*': '...'}}`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 144,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "DataAttributesProp"
                            }
                        },
                        {
                            "id": 14151,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Indicates whether or not the user can interact with the button."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 127,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14150,
                            "name": "icon",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The name of the icon or a react node. For more details, see the {@link IconName|list of supported icons}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 125,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "IconName",
                                        "id": 10484
                                    },
                                    {
                                        "type": "reference",
                                        "name": "ReactElement"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14157,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 136,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14153,
                            "name": "onClick",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Click event handler. Also handles Space and Enter keypress events."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 132,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 14154,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 14155,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 14156,
                                                            "name": "e",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "MouseEvent",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "reference",
                                                                                "name": "HTMLSpanElement"
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "KeyboardEvent",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "reference",
                                                                                "name": "HTMLSpanElement"
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "overwrites": {
                                "type": "reference",
                                "name": "TooltipAnchorProps.onClick"
                            }
                        },
                        {
                            "id": 14148,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the button. Defaults to `default`. Can be a responsive prop object."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 121,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "TextSizeProp",
                                "id": 11097
                            }
                        },
                        {
                            "id": 14160,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 142,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 14158,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabIndex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 138,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14149,
                            "name": "variant",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The variant of the button, which defines the color. Defaults to `default`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 123,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "TextButtonVariant",
                                "id": 14214
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                14162,
                                14152,
                                14159,
                                14161,
                                14151,
                                14150,
                                14157,
                                14153,
                                14148,
                                14160,
                                14158,
                                14149
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/text_button.tsx",
                            "line": 116,
                            "character": 25
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "HTMLSpanElement"
                                }
                            ]
                        },
                        {
                            "type": "reference",
                            "name": "AriaProps",
                            "id": 10978
                        },
                        {
                            "type": "reference",
                            "name": "TextButtonStyleProps",
                            "id": 14115
                        }
                    ]
                },
                {
                    "id": 14115,
                    "name": "TextButtonStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props for the {@link TextButton} component. Also accepts:\n* {@link FlexItemSetProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link SpacingSetProps}\n* {@link WidthProps}"
                    },
                    "children": [
                        {
                            "id": 14116,
                            "name": "display",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 60,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7531,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "stringLiteral",
                                                "value": "inline-flex"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "flex"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "none"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [14116]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/text_button.tsx",
                            "line": 52,
                            "character": 37
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "MaxWidthProps",
                            "id": 7660
                        },
                        {
                            "type": "reference",
                            "name": "MinWidthProps",
                            "id": 7680
                        },
                        {
                            "type": "reference",
                            "name": "WidthProps",
                            "id": 7690
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7826
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7910
                        },
                        {
                            "type": "reference",
                            "name": "SpacingSetProps",
                            "id": 8003
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TextButtonProps",
                            "id": 14147
                        }
                    ]
                },
                {
                    "id": 14214,
                    "name": "TextButtonVariant",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Variants for the {@link TextButton} component:",
                        "text": "• **default**\n\nBlue text.\n\n• **dark**\n\nDark gray text.\n\n• **light**\n\nLight gray text.\n"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/text_button.tsx",
                            "line": 98,
                            "character": 22
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "default"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "dark"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "light"
                            }
                        ]
                    }
                },
                {
                    "id": 14221,
                    "name": "TextButton",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A text button component with sizes and variants.",
                        "text": "[[ Story id=\"textbutton--example\" title=\"Text button example\" ]]\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/TextButton"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14222,
                            "name": "TextButton",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A text button component with sizes and variants.",
                                "text": "[[ Story id=\"textbutton--example\" title=\"Text button example\" ]]\n"
                            },
                            "parameters": [
                                {
                                    "id": 14223,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "TextButtonProps",
                                        "id": 14147
                                    }
                                },
                                {
                                    "id": 14224,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLSpanElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/text_button.tsx",
                            "line": 157,
                            "character": 16
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [14147, 14115]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [14214]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [14221]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/text_button.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 11108,
            "name": "@airtable/blocks/ui: Tooltip",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/tooltip.tsx",
            "comment": {},
            "children": [
                {
                    "id": 11125,
                    "name": "Tooltip",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A component that renders a tooltip on hover. Wraps its children.",
                        "text": "[[ Story id=\"tooltip--example\" title=\"Tooltip example\" ]]\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Tooltip"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 11169,
                            "name": "SS",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/tooltip.tsx",
                            "line": 56,
                            "character": 13
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Component",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "TooltipProps",
                                    "id": 11109
                                },
                                {
                                    "type": "reference",
                                    "name": "TooltipState"
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 11109,
                    "name": "TooltipProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link Tooltip} component.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Tooltip\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 11110,
                            "name": "children",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "Child components to render."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/tooltip.tsx",
                                    "line": 20,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ReactElement",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TooltipAnchorProps"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11121,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to attach to the tooltip, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/tooltip.tsx",
                                    "line": 38,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11115,
                            "name": "content",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A string representing the contents. Alternatively, you can include a function that returns a React node to place into the tooltip, which is useful for things like italicization in the tooltip."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/tooltip.tsx",
                                    "line": 30,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 11116,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 11117,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "type": {
                                                        "type": "reference",
                                                        "name": "ReactElement",
                                                        "typeArguments": [
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "any"
                                                            }
                                                        ]
                                                    }
                                                }
                                            ],
                                            "sources": [
                                                {
                                                    "fileName": "src/ui/tooltip.tsx",
                                                    "line": 30,
                                                    "character": 22
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11120,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, this tooltip will not be shown. Useful when trying to disable the tooltip dynamically."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/tooltip.tsx",
                                    "line": 36,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11118,
                            "name": "fitInWindowMode",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Dictates the behavior when the \"normal\" placement of the tooltip would be outside of the viewport. Defaults to {@link FitInWindowModes.FLIP}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/tooltip.tsx",
                                    "line": 32,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "FitInWindowMode",
                                "id": 10976
                            }
                        },
                        {
                            "id": 11113,
                            "name": "placementOffsetX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The horizontal offset, in pixels, of the tooltip. If `placementX` is set to {@link PopoverPlacements.LEFT}, a higher number will move the tooltip to the left. If `placementX` is set to {@link PopoverPlacements.RIGHT}, a higher number moves the tooltip to the right. If `placementX` is set to {@link PopoverPlacements.CENTER}, this value has no effect. Defaults to 12."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/tooltip.tsx",
                                    "line": 26,
                                    "character": 20
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11114,
                            "name": "placementOffsetY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The vertical offset, in pixels, of the tooltip. If `placementY` is set to {@link PopoverPlacements.TOP}, a higher number will move the tooltip upward. If `placementY` is set to {@link PopoverPlacements.BOTTOM}, a higher number moves the tooltip downard. If `placementY` is set to {@link PopoverPlacements.CENTER}, this value has no effect. Defaults to 0."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/tooltip.tsx",
                                    "line": 28,
                                    "character": 20
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11111,
                            "name": "placementX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The horizontal placement of the tooltip. Defaults to {@link PopoverPlacements.RIGHT}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/tooltip.tsx",
                                    "line": 22,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "PopoverPlacementX",
                                "id": 10974
                            }
                        },
                        {
                            "id": 11112,
                            "name": "placementY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The vertical placement of the tooltip. Defaults to {@link PopoverPlacements.CENTER}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/tooltip.tsx",
                                    "line": 24,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "PopoverPlacementY",
                                "id": 10975
                            }
                        },
                        {
                            "id": 11119,
                            "name": "shouldHideTooltipOnClick",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Should the tooltip be hidden when clicked? Defaults to `false`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/tooltip.tsx",
                                    "line": 34,
                                    "character": 28
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11122,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles names to attach to the tooltip."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/tooltip.tsx",
                                    "line": 40,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                11110,
                                11121,
                                11115,
                                11120,
                                11118,
                                11113,
                                11114,
                                11111,
                                11112,
                                11119,
                                11122
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/tooltip.tsx",
                            "line": 18,
                            "character": 22
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [11125]
                },
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [11109]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/tooltip.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 9801,
            "name": "@airtable/blocks/ui: ViewPicker",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/view_picker.tsx",
            "comment": {},
            "children": [
                {
                    "id": 9802,
                    "name": "SharedViewPickerProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props shared between the {@link ViewPicker} and {@link ViewPickerSynced} components."
                    },
                    "children": [
                        {
                            "id": 9804,
                            "name": "allowedTypes",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "An array indicating which view types can be selected."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 20,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "ViewType",
                                        "id": 647
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9821,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-describedby']",
                                "id": 9155
                            }
                        },
                        {
                            "id": 9819,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-label']",
                                "id": 9153
                            }
                        },
                        {
                            "id": 9820,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-labelledby']",
                                "id": 9154
                            }
                        },
                        {
                            "id": 9813,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.autoFocus",
                                "id": 9147
                            }
                        },
                        {
                            "id": 9812,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.className",
                                "id": 9146
                            }
                        },
                        {
                            "id": 9817,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.disabled",
                                "id": 9151
                            }
                        },
                        {
                            "id": 9814,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.id",
                                "id": 9148
                            }
                        },
                        {
                            "id": 9815,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.name",
                                "id": 9149
                            }
                        },
                        {
                            "id": 9807,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected view changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 26,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 9808,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 9809,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 9810,
                                                            "name": "viewModel",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "View",
                                                                        "id": 1973
                                                                    },
                                                                    {
                                                                        "type": "intrinsic",
                                                                        "name": "null"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9806,
                            "name": "placeholder",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The placeholder text when no view is selected. Defaults to `'Pick a view...'`"
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 24,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9805,
                            "name": "shouldAllowPickingNone",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user can unset the selected view."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 22,
                                    "character": 26
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9811,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9100
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.size",
                                "id": 9145
                            }
                        },
                        {
                            "id": 9818,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.style",
                                "id": 9152
                            }
                        },
                        {
                            "id": 9816,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.tabIndex",
                                "id": 9150
                            }
                        },
                        {
                            "id": 9803,
                            "name": "table",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The parent table model to select views from. If `null` or `undefined`, the picker won't render."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 18,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Table",
                                        "id": 14669
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                9804,
                                9821,
                                9819,
                                9820,
                                9813,
                                9812,
                                9817,
                                9814,
                                9815,
                                9807,
                                9806,
                                9805,
                                9811,
                                9818,
                                9816,
                                9803
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/view_picker.tsx",
                            "line": 16,
                            "character": 38
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedSelectBaseProps",
                            "id": 9144
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "ViewPickerProps",
                            "id": 9859
                        },
                        {
                            "type": "reference",
                            "name": "ViewPickerSyncedProps",
                            "id": 9932
                        }
                    ]
                },
                {
                    "id": 9859,
                    "name": "ViewPickerProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link ViewPicker} component. Also accepts:\n* {@link SelectStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/ViewPicker\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 9862,
                            "name": "allowedTypes",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "An array indicating which view types can be selected."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 20,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "ViewType",
                                        "id": 647
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedViewPickerProps.allowedTypes",
                                "id": 9804
                            }
                        },
                        {
                            "id": 9879,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-describedby']",
                                "id": 9155
                            }
                        },
                        {
                            "id": 9877,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-label']",
                                "id": 9153
                            }
                        },
                        {
                            "id": 9878,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-labelledby']",
                                "id": 9154
                            }
                        },
                        {
                            "id": 9871,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.autoFocus",
                                "id": 9147
                            }
                        },
                        {
                            "id": 9870,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.className",
                                "id": 9146
                            }
                        },
                        {
                            "id": 9875,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.disabled",
                                "id": 9151
                            }
                        },
                        {
                            "id": 9872,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.id",
                                "id": 9148
                            }
                        },
                        {
                            "id": 9873,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.name",
                                "id": 9149
                            }
                        },
                        {
                            "id": 9865,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected view changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 26,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 9866,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 9867,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 9868,
                                                            "name": "viewModel",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "View",
                                                                        "id": 1973
                                                                    },
                                                                    {
                                                                        "type": "intrinsic",
                                                                        "name": "null"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedViewPickerProps.onChange",
                                "id": 9807
                            }
                        },
                        {
                            "id": 9864,
                            "name": "placeholder",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The placeholder text when no view is selected. Defaults to `'Pick a view...'`"
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 24,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedViewPickerProps.placeholder",
                                "id": 9806
                            }
                        },
                        {
                            "id": 9863,
                            "name": "shouldAllowPickingNone",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user can unset the selected view."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 22,
                                    "character": 26
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedViewPickerProps.shouldAllowPickingNone",
                                "id": 9805
                            }
                        },
                        {
                            "id": 9869,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9100
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.size",
                                "id": 9145
                            }
                        },
                        {
                            "id": 9876,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.style",
                                "id": 9152
                            }
                        },
                        {
                            "id": 9874,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.tabIndex",
                                "id": 9150
                            }
                        },
                        {
                            "id": 9861,
                            "name": "table",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The parent table model to select views from. If `null` or `undefined`, the picker won't render."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 18,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Table",
                                        "id": 14669
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedViewPickerProps.table",
                                "id": 9803
                            }
                        },
                        {
                            "id": 9860,
                            "name": "view",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The selected view model."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 47,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "View",
                                        "id": 1973
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                9862,
                                9879,
                                9877,
                                9878,
                                9871,
                                9870,
                                9875,
                                9872,
                                9873,
                                9865,
                                9864,
                                9863,
                                9869,
                                9876,
                                9874,
                                9861,
                                9860
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/view_picker.tsx",
                            "line": 45,
                            "character": 25
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedViewPickerProps",
                            "id": 9802
                        }
                    ]
                },
                {
                    "id": 9932,
                    "name": "ViewPickerSyncedProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link ViewPickerSynced} component. Also accepts:\n* {@link SelectStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/ViewPickerSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/ViewPicker\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 9935,
                            "name": "allowedTypes",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "An array indicating which view types can be selected."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 20,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "ViewType",
                                        "id": 647
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedViewPickerProps.allowedTypes",
                                "id": 9804
                            }
                        },
                        {
                            "id": 9952,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-describedby']",
                                "id": 9155
                            }
                        },
                        {
                            "id": 9950,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-label']",
                                "id": 9153
                            }
                        },
                        {
                            "id": 9951,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-labelledby']",
                                "id": 9154
                            }
                        },
                        {
                            "id": 9944,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.autoFocus",
                                "id": 9147
                            }
                        },
                        {
                            "id": 9943,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.className",
                                "id": 9146
                            }
                        },
                        {
                            "id": 9948,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.disabled",
                                "id": 9151
                            }
                        },
                        {
                            "id": 9933,
                            "name": "globalConfigKey",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "A string key or array key path in {@link GlobalConfig}. The selected view will always reflect the view id stored in {@link GlobalConfig} for this key. Selecting a new view will update {@link GlobalConfig}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker_synced.tsx",
                                    "line": 20,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "GlobalConfigKey",
                                "id": 950
                            }
                        },
                        {
                            "id": 9945,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.id",
                                "id": 9148
                            }
                        },
                        {
                            "id": 9946,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.name",
                                "id": 9149
                            }
                        },
                        {
                            "id": 9938,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected view changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 26,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 9939,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 9940,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 9941,
                                                            "name": "viewModel",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "View",
                                                                        "id": 1973
                                                                    },
                                                                    {
                                                                        "type": "intrinsic",
                                                                        "name": "null"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedViewPickerProps.onChange",
                                "id": 9807
                            }
                        },
                        {
                            "id": 9937,
                            "name": "placeholder",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The placeholder text when no view is selected. Defaults to `'Pick a view...'`"
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 24,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedViewPickerProps.placeholder",
                                "id": 9806
                            }
                        },
                        {
                            "id": 9936,
                            "name": "shouldAllowPickingNone",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user can unset the selected view."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 22,
                                    "character": 26
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedViewPickerProps.shouldAllowPickingNone",
                                "id": 9805
                            }
                        },
                        {
                            "id": 9942,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9100
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.size",
                                "id": 9145
                            }
                        },
                        {
                            "id": 9949,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.style",
                                "id": 9152
                            }
                        },
                        {
                            "id": 9947,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.tabIndex",
                                "id": 9150
                            }
                        },
                        {
                            "id": 9934,
                            "name": "table",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The parent table model to select views from. If `null` or `undefined`, the picker won't render."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 18,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Table",
                                        "id": 14669
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedViewPickerProps.table",
                                "id": 9803
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                9935,
                                9952,
                                9950,
                                9951,
                                9944,
                                9943,
                                9948,
                                9933,
                                9945,
                                9946,
                                9938,
                                9937,
                                9936,
                                9942,
                                9949,
                                9947,
                                9934
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/view_picker_synced.tsx",
                            "line": 18,
                            "character": 31
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedViewPickerProps",
                            "id": 9802
                        }
                    ]
                },
                {
                    "id": 9926,
                    "name": "ViewPicker",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "Dropdown menu component for selecting views.",
                        "text": "[[ Story id=\"modelpickers--viewpicker-example\" title=\"View picker example\" ]]\n",
                        "tags": [
                            {
                                "tag": "component",
                                "text": ""
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/ViewPicker\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 9927,
                            "name": "ViewPicker",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Dropdown menu component for selecting views.",
                                "text": "[[ Story id=\"modelpickers--viewpicker-example\" title=\"View picker example\" ]]\n"
                            },
                            "parameters": [
                                {
                                    "id": 9928,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "ViewPickerProps",
                                        "id": 9859
                                    }
                                },
                                {
                                    "id": 9929,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLSelectElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    },
                                    {
                                        "type": "reference",
                                        "name": "Element"
                                    }
                                ]
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/view_picker.tsx",
                            "line": 58,
                            "character": 16
                        }
                    ]
                },
                {
                    "id": 9990,
                    "name": "ViewPickerSynced",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A wrapper around the {@link ViewPicker} component that syncs with {@link GlobalConfig}.",
                        "text": "[[ Story id=\"modelpickers--viewpickersynced-example\" title=\"Synced view picker example\" ]]\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/ViewPickerSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/ViewPicker"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 9991,
                            "name": "ViewPickerSynced",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A wrapper around the {@link ViewPicker} component that syncs with {@link GlobalConfig}.",
                                "text": "[[ Story id=\"modelpickers--viewpickersynced-example\" title=\"Synced view picker example\" ]]\n"
                            },
                            "parameters": [
                                {
                                    "id": 9992,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "ViewPickerSyncedProps",
                                        "id": 9932
                                    }
                                },
                                {
                                    "id": 9993,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLSelectElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/view_picker_synced.tsx",
                            "line": 32,
                            "character": 22
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [9802, 9859, 9932]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [9926, 9990]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/view_picker.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 13883,
            "name": "@airtable/blocks/ui: ViewportConstraint",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/viewport_constraint.tsx",
            "comment": {
                "tags": [
                    {
                        "tag": "docspath",
                        "text": "UI/components/ViewportConstraint\n"
                    }
                ]
            },
            "children": [
                {
                    "id": 13888,
                    "name": "ViewportConstraint",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "When mounted, this wrapper component applies size constraints to the {@link Viewport}.\nLike {@link addMinSize}, this will fullscreen the block if necessary and possible when\n`minSize` is updated.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {ViewportConstraint} from '@airtable/blocks/ui';\n<ViewportConstraint minSize={{width: 400}} />\n```\n"
                            },
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {ViewportConstraint} from '@airtable/blocks/ui';\n<ViewportConstraint maxFullScreenSize={{width: 600, height: 400}}>\n     <div>I need a max fullscreen size!</div>\n</ViewportConstraint>\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/ViewportConstraint"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 13923,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 13924,
                            "name": "SS",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 13955,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/viewport_constraint.tsx",
                            "line": 55,
                            "character": 24
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Component",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "ViewportConstraintProps",
                                    "id": 13884
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 13884,
                    "name": "ViewportConstraintProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link ViewportConstraint} component.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/ViewportConstraint\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 13887,
                            "name": "children",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The contents of the viewport constraint."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/viewport_constraint.tsx",
                                    "line": 24,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.ReactNode"
                            }
                        },
                        {
                            "id": 13886,
                            "name": "maxFullscreenSize",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The maximum viewport size of the block when it is in fullscreen mode."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/viewport_constraint.tsx",
                                    "line": 22,
                                    "character": 21
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ViewportSizeConstraintProp",
                                "id": 13990
                            }
                        },
                        {
                            "id": 13885,
                            "name": "minSize",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The minimum viewport size of the block."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/viewport_constraint.tsx",
                                    "line": 20,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ViewportSizeConstraintProp",
                                "id": 13990
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [13887, 13886, 13885]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/viewport_constraint.tsx",
                            "line": 18,
                            "character": 33
                        }
                    ]
                },
                {
                    "id": 13990,
                    "name": "ViewportSizeConstraintProp",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "An object specifying a width and/or height for the block's viewport."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/viewport_constraint.tsx",
                            "line": 11,
                            "character": 31
                        }
                    ],
                    "type": {
                        "type": "reference",
                        "name": "Partial",
                        "typeArguments": [
                            {
                                "type": "reference",
                                "name": "ViewportSizeConstraint",
                                "id": 965
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [13888]
                },
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [13884]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [13990]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/viewport_constraint.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 559,
            "name": "@airtable/blocks/ui: colorUtils",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/color_utils.ts",
            "comment": {},
            "children": [
                {
                    "id": 564,
                    "name": "ColorUtils",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Utilities for working with {@link Color} names from the {@link colors} enum.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/utils/ColorUtils"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/utils/Colors\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 565,
                            "name": "getHexForColor",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {},
                            "comment": {
                                "shortText": "Given a {@link Color}, return the hex color value for that color, or null if the value isn't a {@link Color}",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {colorUtils, colors} from '@airtable/blocks/ui';\n\ncolorUtils.getHexForColor(colors.RED);\n// => '#ef3061'\n\ncolorUtils.getHexForColor('uncomfortable beige');\n// => null\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 566,
                                    "name": "getHexForColor",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Given a {@link Color}, return the hex color value for that color, or null if the value isn't a {@link Color}",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {colorUtils, colors} from '@airtable/blocks/ui';\n\ncolorUtils.getHexForColor(colors.RED);\n// => '#ef3061'\n\ncolorUtils.getHexForColor('uncomfortable beige');\n// => null\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 567,
                                            "name": "colorString",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {},
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "id": 568,
                                    "name": "getHexForColor",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Given a {@link Color}, return the hex color value for that color, or null if the value isn't a {@link Color}"
                                    },
                                    "parameters": [
                                        {
                                            "id": 569,
                                            "name": "colorString",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "Color",
                                                "id": 556
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/color_utils.ts",
                                    "line": 37,
                                    "character": 18
                                },
                                {
                                    "fileName": "src/color_utils.ts",
                                    "line": 39,
                                    "character": 18
                                }
                            ]
                        },
                        {
                            "id": 570,
                            "name": "getRgbForColor",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {},
                            "comment": {
                                "shortText": "Given a {@link Color}, return an {@link RGB} object representing it, or null if the value isn't a {@link Color}",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {colorUtils, colors} from '@airtable/blocks/ui';\n\ncolorUtils.getRgbForColor(colors.PURPLE_DARK_1);\n// => {r: 107, g: 28, b: 176}\n\ncolorUtils.getRgbForColor('disgruntled pink');\n// => null\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 571,
                                    "name": "getRgbForColor",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Given a {@link Color}, return an {@link RGB} object representing it, or null if the value isn't a {@link Color}",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {colorUtils, colors} from '@airtable/blocks/ui';\n\ncolorUtils.getRgbForColor(colors.PURPLE_DARK_1);\n// => {r: 107, g: 28, b: 176}\n\ncolorUtils.getRgbForColor('disgruntled pink');\n// => null\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 572,
                                            "name": "colorString",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {},
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "RGB",
                                                "id": 560
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "id": 573,
                                    "name": "getRgbForColor",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Given a {@link Color}, return an {@link RGB} object representing it, or null if the value isn't a {@link Color}"
                                    },
                                    "parameters": [
                                        {
                                            "id": 574,
                                            "name": "colorString",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "Color",
                                                "id": 556
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "RGB",
                                        "id": 560
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/color_utils.ts",
                                    "line": 56,
                                    "character": 18
                                },
                                {
                                    "fileName": "src/color_utils.ts",
                                    "line": 58,
                                    "character": 18
                                }
                            ]
                        },
                        {
                            "id": 575,
                            "name": "shouldUseLightTextOnColor",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {},
                            "comment": {
                                "shortText": "Given a {@link Color}, returns true or false to indicate whether that color should have light text on top of it when used as a background color.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {colorUtils, colors} from '@airtable/blocks/ui';\n\ncolorUtils.shouldUseLightTextOnColor(colors.PINK_LIGHT_1);\n// => false\n\ncolorUtils.shouldUseLightTextOnColor(colors.PINK_DARK_1);\n// => true\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 576,
                                    "name": "shouldUseLightTextOnColor",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Given a {@link Color}, returns true or false to indicate whether that color should have light text on top of it when used as a background color.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {colorUtils, colors} from '@airtable/blocks/ui';\n\ncolorUtils.shouldUseLightTextOnColor(colors.PINK_LIGHT_1);\n// => false\n\ncolorUtils.shouldUseLightTextOnColor(colors.PINK_DARK_1);\n// => true\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 577,
                                            "name": "colorString",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {},
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/color_utils.ts",
                                    "line": 75,
                                    "character": 29
                                }
                            ]
                        }
                    ],
                    "groups": [
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [565, 570, 575]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/color_utils.ts",
                            "line": 21,
                            "character": 20
                        }
                    ]
                },
                {
                    "id": 560,
                    "name": "RGB",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "A red/green/blue color object. Each property is a number from 0 to 255."
                    },
                    "children": [
                        {
                            "id": 563,
                            "name": "b",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The blue component."
                            },
                            "sources": [
                                {
                                    "fileName": "src/color_utils.ts",
                                    "line": 12,
                                    "character": 5
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "number"
                            }
                        },
                        {
                            "id": 562,
                            "name": "g",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The green component."
                            },
                            "sources": [
                                {
                                    "fileName": "src/color_utils.ts",
                                    "line": 10,
                                    "character": 5
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "number"
                            }
                        },
                        {
                            "id": 561,
                            "name": "r",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The red component."
                            },
                            "sources": [
                                {
                                    "fileName": "src/color_utils.ts",
                                    "line": 8,
                                    "character": 5
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "number"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [563, 562, 561]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/color_utils.ts",
                            "line": 6,
                            "character": 13
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [564, 560]
                }
            ],
            "sources": [
                {
                    "fileName": "src/color_utils.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 504,
            "name": "@airtable/blocks/ui: colors",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/colors.ts",
            "comment": {},
            "children": [
                {
                    "id": 556,
                    "name": "Color",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A color name from the list of {@link Colors}."
                    },
                    "sources": [
                        {
                            "fileName": "src/colors.ts",
                            "line": 125,
                            "character": 17
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "blueBright"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "blueDark1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "blueLight1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "blueLight2"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "blue"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "cyanBright"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "cyanDark1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "cyanLight1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "cyanLight2"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "cyan"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "grayBright"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "grayDark1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "grayLight1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "grayLight2"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "gray"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "greenBright"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "greenDark1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "greenLight1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "greenLight2"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "green"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "orangeBright"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "orangeDark1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "orangeLight1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "orangeLight2"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "orange"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "pinkBright"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "pinkDark1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "pinkLight1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "pinkLight2"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "pink"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "purpleBright"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "purpleDark1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "purpleLight1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "purpleLight2"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "purple"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "redBright"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "redDark1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "redLight1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "redLight2"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "red"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "tealBright"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "tealDark1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "tealLight1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "tealLight2"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "teal"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "yellowBright"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "yellowDark1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "yellowLight1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "yellowLight2"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "yellow"
                            }
                        ]
                    }
                },
                {
                    "id": 505,
                    "name": "Colors",
                    "kind": 2097152,
                    "kindString": "Object literal",
                    "flags": {
                        "isExported": true,
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "Airtable color names.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/utils/Colors\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 510,
                            "name": "BLUE",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 18,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "blue"
                            },
                            "defaultValue": " 'blue' as const"
                        },
                        {
                            "id": 506,
                            "name": "BLUE_BRIGHT",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 10,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "blueBright"
                            },
                            "defaultValue": " 'blueBright' as const"
                        },
                        {
                            "id": 507,
                            "name": "BLUE_DARK_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 12,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "blueDark1"
                            },
                            "defaultValue": " 'blueDark1' as const"
                        },
                        {
                            "id": 508,
                            "name": "BLUE_LIGHT_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 14,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "blueLight1"
                            },
                            "defaultValue": " 'blueLight1' as const"
                        },
                        {
                            "id": 509,
                            "name": "BLUE_LIGHT_2",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 16,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "blueLight2"
                            },
                            "defaultValue": " 'blueLight2' as const"
                        },
                        {
                            "id": 515,
                            "name": "CYAN",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 29,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "cyan"
                            },
                            "defaultValue": " 'cyan' as const"
                        },
                        {
                            "id": 511,
                            "name": "CYAN_BRIGHT",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 21,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "cyanBright"
                            },
                            "defaultValue": " 'cyanBright' as const"
                        },
                        {
                            "id": 512,
                            "name": "CYAN_DARK_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 23,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "cyanDark1"
                            },
                            "defaultValue": " 'cyanDark1' as const"
                        },
                        {
                            "id": 513,
                            "name": "CYAN_LIGHT_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 25,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "cyanLight1"
                            },
                            "defaultValue": " 'cyanLight1' as const"
                        },
                        {
                            "id": 514,
                            "name": "CYAN_LIGHT_2",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 27,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "cyanLight2"
                            },
                            "defaultValue": " 'cyanLight2' as const"
                        },
                        {
                            "id": 520,
                            "name": "GRAY",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 40,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "gray"
                            },
                            "defaultValue": " 'gray' as const"
                        },
                        {
                            "id": 516,
                            "name": "GRAY_BRIGHT",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 32,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "grayBright"
                            },
                            "defaultValue": " 'grayBright' as const"
                        },
                        {
                            "id": 517,
                            "name": "GRAY_DARK_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 34,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "grayDark1"
                            },
                            "defaultValue": " 'grayDark1' as const"
                        },
                        {
                            "id": 518,
                            "name": "GRAY_LIGHT_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 36,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "grayLight1"
                            },
                            "defaultValue": " 'grayLight1' as const"
                        },
                        {
                            "id": 519,
                            "name": "GRAY_LIGHT_2",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 38,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "grayLight2"
                            },
                            "defaultValue": " 'grayLight2' as const"
                        },
                        {
                            "id": 525,
                            "name": "GREEN",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 51,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "green"
                            },
                            "defaultValue": " 'green' as const"
                        },
                        {
                            "id": 521,
                            "name": "GREEN_BRIGHT",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 43,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "greenBright"
                            },
                            "defaultValue": " 'greenBright' as const"
                        },
                        {
                            "id": 522,
                            "name": "GREEN_DARK_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 45,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "greenDark1"
                            },
                            "defaultValue": " 'greenDark1' as const"
                        },
                        {
                            "id": 523,
                            "name": "GREEN_LIGHT_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 47,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "greenLight1"
                            },
                            "defaultValue": " 'greenLight1' as const"
                        },
                        {
                            "id": 524,
                            "name": "GREEN_LIGHT_2",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 49,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "greenLight2"
                            },
                            "defaultValue": " 'greenLight2' as const"
                        },
                        {
                            "id": 530,
                            "name": "ORANGE",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 62,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "orange"
                            },
                            "defaultValue": " 'orange' as const"
                        },
                        {
                            "id": 526,
                            "name": "ORANGE_BRIGHT",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 54,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "orangeBright"
                            },
                            "defaultValue": " 'orangeBright' as const"
                        },
                        {
                            "id": 527,
                            "name": "ORANGE_DARK_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 56,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "orangeDark1"
                            },
                            "defaultValue": " 'orangeDark1' as const"
                        },
                        {
                            "id": 528,
                            "name": "ORANGE_LIGHT_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 58,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "orangeLight1"
                            },
                            "defaultValue": " 'orangeLight1' as const"
                        },
                        {
                            "id": 529,
                            "name": "ORANGE_LIGHT_2",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 60,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "orangeLight2"
                            },
                            "defaultValue": " 'orangeLight2' as const"
                        },
                        {
                            "id": 535,
                            "name": "PINK",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 73,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "pink"
                            },
                            "defaultValue": " 'pink' as const"
                        },
                        {
                            "id": 531,
                            "name": "PINK_BRIGHT",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 65,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "pinkBright"
                            },
                            "defaultValue": " 'pinkBright' as const"
                        },
                        {
                            "id": 532,
                            "name": "PINK_DARK_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 67,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "pinkDark1"
                            },
                            "defaultValue": " 'pinkDark1' as const"
                        },
                        {
                            "id": 533,
                            "name": "PINK_LIGHT_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 69,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "pinkLight1"
                            },
                            "defaultValue": " 'pinkLight1' as const"
                        },
                        {
                            "id": 534,
                            "name": "PINK_LIGHT_2",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 71,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "pinkLight2"
                            },
                            "defaultValue": " 'pinkLight2' as const"
                        },
                        {
                            "id": 540,
                            "name": "PURPLE",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 84,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "purple"
                            },
                            "defaultValue": " 'purple' as const"
                        },
                        {
                            "id": 536,
                            "name": "PURPLE_BRIGHT",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 76,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "purpleBright"
                            },
                            "defaultValue": " 'purpleBright' as const"
                        },
                        {
                            "id": 537,
                            "name": "PURPLE_DARK_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 78,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "purpleDark1"
                            },
                            "defaultValue": " 'purpleDark1' as const"
                        },
                        {
                            "id": 538,
                            "name": "PURPLE_LIGHT_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 80,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "purpleLight1"
                            },
                            "defaultValue": " 'purpleLight1' as const"
                        },
                        {
                            "id": 539,
                            "name": "PURPLE_LIGHT_2",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 82,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "purpleLight2"
                            },
                            "defaultValue": " 'purpleLight2' as const"
                        },
                        {
                            "id": 545,
                            "name": "RED",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 95,
                                    "character": 7
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "red"
                            },
                            "defaultValue": " 'red' as const"
                        },
                        {
                            "id": 541,
                            "name": "RED_BRIGHT",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 87,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "redBright"
                            },
                            "defaultValue": " 'redBright' as const"
                        },
                        {
                            "id": 542,
                            "name": "RED_DARK_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 89,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "redDark1"
                            },
                            "defaultValue": " 'redDark1' as const"
                        },
                        {
                            "id": 543,
                            "name": "RED_LIGHT_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 91,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "redLight1"
                            },
                            "defaultValue": " 'redLight1' as const"
                        },
                        {
                            "id": 544,
                            "name": "RED_LIGHT_2",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 93,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "redLight2"
                            },
                            "defaultValue": " 'redLight2' as const"
                        },
                        {
                            "id": 550,
                            "name": "TEAL",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 106,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "teal"
                            },
                            "defaultValue": " 'teal' as const"
                        },
                        {
                            "id": 546,
                            "name": "TEAL_BRIGHT",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 98,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "tealBright"
                            },
                            "defaultValue": " 'tealBright' as const"
                        },
                        {
                            "id": 547,
                            "name": "TEAL_DARK_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 100,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "tealDark1"
                            },
                            "defaultValue": " 'tealDark1' as const"
                        },
                        {
                            "id": 548,
                            "name": "TEAL_LIGHT_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 102,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "tealLight1"
                            },
                            "defaultValue": " 'tealLight1' as const"
                        },
                        {
                            "id": 549,
                            "name": "TEAL_LIGHT_2",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 104,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "tealLight2"
                            },
                            "defaultValue": " 'tealLight2' as const"
                        },
                        {
                            "id": 555,
                            "name": "YELLOW",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 117,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "yellow"
                            },
                            "defaultValue": " 'yellow' as const"
                        },
                        {
                            "id": 551,
                            "name": "YELLOW_BRIGHT",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 109,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "yellowBright"
                            },
                            "defaultValue": " 'yellowBright' as const"
                        },
                        {
                            "id": 552,
                            "name": "YELLOW_DARK_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 111,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "yellowDark1"
                            },
                            "defaultValue": " 'yellowDark1' as const"
                        },
                        {
                            "id": 553,
                            "name": "YELLOW_LIGHT_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 113,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "yellowLight1"
                            },
                            "defaultValue": " 'yellowLight1' as const"
                        },
                        {
                            "id": 554,
                            "name": "YELLOW_LIGHT_2",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 115,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "yellowLight2"
                            },
                            "defaultValue": " 'yellowLight2' as const"
                        }
                    ],
                    "groups": [
                        {
                            "title": "Variables",
                            "kind": 32,
                            "children": [
                                510,
                                506,
                                507,
                                508,
                                509,
                                515,
                                511,
                                512,
                                513,
                                514,
                                520,
                                516,
                                517,
                                518,
                                519,
                                525,
                                521,
                                522,
                                523,
                                524,
                                530,
                                526,
                                527,
                                528,
                                529,
                                535,
                                531,
                                532,
                                533,
                                534,
                                540,
                                536,
                                537,
                                538,
                                539,
                                545,
                                541,
                                542,
                                543,
                                544,
                                550,
                                546,
                                547,
                                548,
                                549,
                                555,
                                551,
                                552,
                                553,
                                554
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/colors.ts",
                            "line": 8,
                            "character": 12
                        }
                    ],
                    "type": {
                        "type": "intrinsic",
                        "name": "object"
                    }
                }
            ],
            "groups": [
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [556]
                },
                {
                    "title": "Object literals",
                    "kind": 2097152,
                    "children": [505]
                }
            ],
            "sources": [
                {
                    "fileName": "src/colors.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 10458,
            "name": "@airtable/blocks/ui: expandRecord",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/expand_record.ts",
            "comment": {},
            "children": [
                {
                    "id": 10459,
                    "name": "ExpandRecordOpts",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Options object for expanding a record."
                    },
                    "children": [
                        {
                            "id": 10460,
                            "name": "records",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If `records` is provided, the list will be used to page through records from the expanded record dialog."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/expand_record.ts",
                                    "line": 10,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "Record",
                                        "id": 2296
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [10460]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/expand_record.ts",
                            "line": 8,
                            "character": 33
                        }
                    ]
                },
                {
                    "id": 10461,
                    "name": "expandRecord",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Expands the given record in the Airtable UI.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {expandRecord} from '@airtable/blocks/ui';\nexpandRecord(record1, {\n    records: [record1, record2, record3],\n});\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/utils/expandRecord\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 10462,
                            "name": "expandRecord",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Expands the given record in the Airtable UI.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {expandRecord} from '@airtable/blocks/ui';\nexpandRecord(record1, {\n    records: [record1, record2, record3],\n});\n```"
                                    },
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/expandRecord\n"
                                    }
                                ]
                            },
                            "parameters": [
                                {
                                    "id": 10463,
                                    "name": "record",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The record to expand."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Record",
                                        "id": 2296
                                    }
                                },
                                {
                                    "id": 10464,
                                    "name": "opts",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {
                                        "isOptional": true
                                    },
                                    "comment": {
                                        "shortText": "An optional options object.\n"
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "ExpandRecordOpts",
                                        "id": 10459
                                    }
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "void"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/expand_record.ts",
                            "line": 28,
                            "character": 21
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [10459]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [10461]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/expand_record.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 10465,
            "name": "@airtable/blocks/ui: expandRecordList",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/expand_record_list.ts",
            "comment": {},
            "children": [
                {
                    "id": 10466,
                    "name": "ExpandRecordListOpts",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Options object for expanding a record list."
                    },
                    "children": [
                        {
                            "id": 10467,
                            "name": "fields",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The fields to include in the record cards. The primary field will always be shown. Duplicate fields will be removed."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/expand_record_list.ts",
                                    "line": 12,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "Field",
                                        "id": 1340
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [10467]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/expand_record_list.ts",
                            "line": 10,
                            "character": 30
                        }
                    ]
                },
                {
                    "id": 10468,
                    "name": "expandRecordList",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Expands a list of records in the Airtable UI.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {expandRecordList} from '@airtable/blocks/ui';\nexpandRecordList([record1, record2, record3]);\n\nexpandRecordList([record1, record2], {\n    fields: [field1, field2],\n});\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/utils/expandRecordList\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 10469,
                            "name": "expandRecordList",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Expands a list of records in the Airtable UI.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {expandRecordList} from '@airtable/blocks/ui';\nexpandRecordList([record1, record2, record3]);\n\nexpandRecordList([record1, record2], {\n    fields: [field1, field2],\n});\n```"
                                    },
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/expandRecordList\n"
                                    }
                                ]
                            },
                            "parameters": [
                                {
                                    "id": 10470,
                                    "name": "records",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The records to expand. Duplicate records will be removed."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Record",
                                                "id": 2296
                                            }
                                        ]
                                    }
                                },
                                {
                                    "id": 10471,
                                    "name": "opts",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {
                                        "isOptional": true
                                    },
                                    "comment": {
                                        "shortText": "An optional options object.\n"
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "ExpandRecordListOpts",
                                        "id": 10466
                                    }
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "void"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/expand_record_list.ts",
                            "line": 32,
                            "character": 25
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [10466]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [10468]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/expand_record_list.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 10472,
            "name": "@airtable/blocks/ui: expandRecordPickerAsync",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/expand_record_picker_async.ts",
            "comment": {},
            "children": [
                {
                    "id": 10473,
                    "name": "ExpandRecordPickerOpts",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Options object for expanding a record picker."
                    },
                    "children": [
                        {
                            "id": 10474,
                            "name": "fields",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The fields to include in the record cards. The primary field will always be shown. Duplicate fields will be removed."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/expand_record_picker_async.ts",
                                    "line": 12,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "Field",
                                        "id": 1340
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10475,
                            "name": "shouldAllowCreatingRecord",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to true, the user will be able to create an empty new record from the record picker."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/expand_record_picker_async.ts",
                                    "line": 14,
                                    "character": 29
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [10474, 10475]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/expand_record_picker_async.ts",
                            "line": 10,
                            "character": 32
                        }
                    ]
                },
                {
                    "id": 10476,
                    "name": "expandRecordPickerAsync",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Expands a list of records in the Airtable UI, and prompts the user to pick\none. The selected record is returned to the block, and the modal is\nautomatically closed.",
                        "text": "If the user dismisses the modal, or another one is opened before this one\nhas been closed, it will return null.\n\nReturns a promise that resolves to the record chosen by the user, or null.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {expandRecordPickerAsync} from '@airtable/blocks/ui';\n\nasync function pickRecordsAsync() {\n    const recordA = await expandRecordPickerAsync([record1, record2, record3]);\n    if (recordA !== null) {\n        alert(recordA.primaryCellValueAsString);\n    } else {\n        alert('no record picked');\n    }\n\n    const recordB = await expandRecordPickerAsync([record1, record2], {\n        fields: [field1, field2],\n    });\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/utils/expandRecordPickerAsync\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 10477,
                            "name": "expandRecordPickerAsync",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Expands a list of records in the Airtable UI, and prompts the user to pick\none. The selected record is returned to the block, and the modal is\nautomatically closed.",
                                "text": "If the user dismisses the modal, or another one is opened before this one\nhas been closed, it will return null.\n\nReturns a promise that resolves to the record chosen by the user, or null.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {expandRecordPickerAsync} from '@airtable/blocks/ui';\n\nasync function pickRecordsAsync() {\n    const recordA = await expandRecordPickerAsync([record1, record2, record3]);\n    if (recordA !== null) {\n        alert(recordA.primaryCellValueAsString);\n    } else {\n        alert('no record picked');\n    }\n\n    const recordB = await expandRecordPickerAsync([record1, record2], {\n        fields: [field1, field2],\n    });\n}\n```"
                                    },
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/expandRecordPickerAsync\n"
                                    }
                                ]
                            },
                            "parameters": [
                                {
                                    "id": 10478,
                                    "name": "records",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "the records the user can pick from. Duplicate records will be removed."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Record",
                                                "id": 2296
                                            }
                                        ]
                                    }
                                },
                                {
                                    "id": 10479,
                                    "name": "opts",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {
                                        "isOptional": true
                                    },
                                    "comment": {
                                        "shortText": "An optional options object."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "ExpandRecordPickerOpts",
                                        "id": 10473
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Promise",
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Record",
                                                "id": 2296
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/expand_record_picker_async.ts",
                            "line": 48,
                            "character": 38
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [10473]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [10476]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/expand_record_picker_async.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 14489,
            "name": "@airtable/blocks/ui: initializeBlock",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/initialize_block.tsx",
            "comment": {},
            "children": [
                {
                    "id": 14491,
                    "name": "initializeBlock",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "`initializeBlock` takes the top-level React component in your tree and renders it. It is conceptually similar to `ReactDOM.render`, but takes care of some Blocks-specific things.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {initializeBlock} from '@airtable/blocks/ui';\nimport React from 'react';\n\nfunction App() {\n    return (\n        <div>Hello world 🚀</div>\n    );\n}\n\ninitializeBlock(() => <App />);\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/utils/initializeBlock\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14492,
                            "name": "initializeBlock",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "`initializeBlock` takes the top-level React component in your tree and renders it. It is conceptually similar to `ReactDOM.render`, but takes care of some Blocks-specific things.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {initializeBlock} from '@airtable/blocks/ui';\nimport React from 'react';\n\nfunction App() {\n    return (\n        <div>Hello world 🚀</div>\n    );\n}\n\ninitializeBlock(() => <App />);\n```"
                                    },
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/initializeBlock\n"
                                    }
                                ]
                            },
                            "parameters": [
                                {
                                    "id": 14493,
                                    "name": "getEntryElement",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "A function that returns your React Node.\n"
                                    },
                                    "type": {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 14494,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {
                                                "isExported": true
                                            },
                                            "signatures": [
                                                {
                                                    "id": 14495,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "type": {
                                                        "type": "reference",
                                                        "name": "React.ReactNode"
                                                    }
                                                }
                                            ],
                                            "sources": [
                                                {
                                                    "fileName": "src/ui/initialize_block.tsx",
                                                    "line": 30,
                                                    "character": 41
                                                }
                                            ]
                                        }
                                    }
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "void"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/initialize_block.tsx",
                            "line": 30,
                            "character": 24
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [14491]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/initialize_block.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 11347,
            "name": "@airtable/blocks/ui: useBase",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/use_base.ts",
            "comment": {},
            "children": [
                {
                    "id": 11348,
                    "name": "useBase",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true,
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A hook for connecting a React component to your base's schema. This returns a {@link Base}\ninstance and will re-render your component whenever the base's schema changes. That means any\nchange to your base like tables being added or removed, fields getting renamed, etc. It excludes\nany change to the actual records in the base.",
                        "text": "`useBase` should meet most of your needs for working with base schema. If you need more granular\ncontrol of when your component updates or want to do anything other than re-render, the lower\nlevel {@link useWatchable} hook might help.\n\nReturns the current base.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {useBase} from '@airtable/blocks/ui';\n\n// renders a list of tables and automatically updates\nfunction TableList() {\n     const base = useBase();\n\n     const tables = base.tables.map(table => {\n         return <li key={table.id}>{table.name}</li>;\n     });\n\n     return <ul>{tables}</ul>;\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/hooks/useBase"
                            },
                            {
                                "tag": "hook",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 11349,
                            "name": "useBase",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A hook for connecting a React component to your base's schema. This returns a {@link Base}\ninstance and will re-render your component whenever the base's schema changes. That means any\nchange to your base like tables being added or removed, fields getting renamed, etc. It excludes\nany change to the actual records in the base.",
                                "text": "`useBase` should meet most of your needs for working with base schema. If you need more granular\ncontrol of when your component updates or want to do anything other than re-render, the lower\nlevel {@link useWatchable} hook might help.\n\nReturns the current base.\n"
                            },
                            "type": {
                                "type": "reference",
                                "name": "Base",
                                "id": 2549
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/use_base.ts",
                            "line": 36,
                            "character": 13
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [11348]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/use_base.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 14533,
            "name": "@airtable/blocks/ui: useGlobalConfig",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/use_global_config.ts",
            "comment": {},
            "children": [
                {
                    "id": 14534,
                    "name": "useGlobalConfig",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Returns the block's {@link GlobalConfig} and updates whenever any key in {@link GlobalConfig}\nchanges.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {Button, useGlobalConfig} from '@airtable/blocks/ui';\n\nfunction SyncedCounter() {\n    const globalConfig = useGlobalConfig();\n    const count = globalConfig.get('count');\n\n    const increment = () => globalConfig.setAsync('count', count + 1);\n    const decrement = () => globalConfig.setAsync('count', count - 1);\n    const isEnabled = globalConfig.hasPermissionToSet('count');\n\n    return (\n        <React.Fragment>\n            <Button icon=\"minus\" onClick={decrement} disabled={!isEnabled} ariaLabel=\"decrease\"/>\n            {count}\n            <Button icon=\"plus\" onClick={increment} disabled={!isEnabled} airaLabel=\"increase\"/>\n        </React.Fragment>\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/hooks/useGlobalConfig"
                            },
                            {
                                "tag": "hook",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14535,
                            "name": "useGlobalConfig",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Returns the block's {@link GlobalConfig} and updates whenever any key in {@link GlobalConfig}\nchanges.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {Button, useGlobalConfig} from '@airtable/blocks/ui';\n\nfunction SyncedCounter() {\n    const globalConfig = useGlobalConfig();\n    const count = globalConfig.get('count');\n\n    const increment = () => globalConfig.setAsync('count', count + 1);\n    const decrement = () => globalConfig.setAsync('count', count - 1);\n    const isEnabled = globalConfig.hasPermissionToSet('count');\n\n    return (\n        <React.Fragment>\n            <Button icon=\"minus\" onClick={decrement} disabled={!isEnabled} ariaLabel=\"decrease\"/>\n            {count}\n            <Button icon=\"plus\" onClick={increment} disabled={!isEnabled} airaLabel=\"increase\"/>\n        </React.Fragment>\n    );\n}\n```"
                                    },
                                    {
                                        "tag": "docspath",
                                        "text": "UI/hooks/useGlobalConfig"
                                    },
                                    {
                                        "tag": "hook",
                                        "text": "\n"
                                    }
                                ]
                            },
                            "type": {
                                "type": "reference",
                                "name": "GlobalConfig",
                                "id": 1221
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/use_global_config.ts",
                            "line": 34,
                            "character": 39
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [14534]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/use_global_config.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 12076,
            "name": "@airtable/blocks/ui: useLoadable",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/use_loadable.ts",
            "comment": {},
            "children": [
                {
                    "id": 12077,
                    "name": "LoadableModel",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "A model that can be loaded.\nUsually a {@link Cursor}, {@link RecordQueryResult}, or a {@link ViewMetadataQueryResult}."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/use_loadable.ts",
                            "line": 14,
                            "character": 23
                        }
                    ]
                },
                {
                    "id": 12095,
                    "name": "UseLoadableOpts",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Options object for the {@link useLoadable} hook."
                    },
                    "children": [
                        {
                            "id": 12096,
                            "name": "shouldSuspend",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Whether suspense mode is enabled. If suspense is disabled, you need to manually check `model.isDataLoaded` so you don't use your model before it's ready."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/use_loadable.ts",
                                    "line": 34,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [12096]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/use_loadable.ts",
                            "line": 32,
                            "character": 25
                        }
                    ]
                },
                {
                    "id": 12098,
                    "name": "useLoadable",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "When you're writing a block, not all of the data in your base is available to work with straight\naway. We need to load it from Airtable first. This hook is a low-level tool for managing that.\nYou might not need to use it directly though - if you're working with a {@link RecordQueryResult}, try\n{@link useRecords}, {@link useRecordIds}, or {@link useRecordById} first.",
                        "text": "When you need to use a loadable model, `useLoadable(theModel)` will make sure that the model is\nloaded when your component mounts, and unloaded when your component unmounts. By default, you\ndon't need to worry about waiting for the data to load - the hook uses React Suspense to make\nsure the rest of your component doesn't run until the data is loaded. Whilst the data is\nloading, the entire block will show a loading indicator. If you want to change where that\nindicator shows or how it looks, use {@link https://reactjs.org/docs/react-api.html#reactsuspense|`<React.Suspense />`}\naround the component that uses the hook.\n\nYou can pass several models to `useLoadable` in an array - it will load all of them simultaneously.\nWe'll memoize this array using shallow equality, so there's no need to use `useMemo`.\n\nIf you need more control, you can pass `{shouldSuspend: false}` as a second argument to\nthe hook. In that case though, `useLoadable` will cause your component to re-render whenever the\nload-state of any model you passed in changes, and you should check each model's `.isDataLoaded`\n property before trying to use the data you loaded.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {cursor} from '@airtable/blocks';\nimport {useLoadable, useWatchable} from '@airtable/blocks/ui';\n\n function SelectedRecordIds() {\n     // load selected records\n     useLoadable(cursor);\n\n     // re-render whenever the list of selected records changes\n     useWatchable(cursor, ['selectedRecordIds']);\n\n     // render the list of selected record ids\n     return <div>Selected records: {cursor.selectedRecordIds.join(', ')}</div>;\n }\n```\n"
                            },
                            {
                                "tag": "example",
                                "text": "\n```js\n import {useLoadable} from '@airtable/blocks/ui';\n\n function LoadTwoQueryResults({queryResultA, queryResultB}) {\n     // load the queryResults:\n     useLoadable([queryResultA, queryResultB]);\n\n     // now, we can use the data\n     return <SomeFancyComponent />;\n }\n```\n"
                            },
                            {
                                "tag": "example",
                                "text": "\n```js\n import {useLoadable, useBase} from '@airtable/blocks/ui';\n\n function LoadAllRecords() {\n     const base = useBase();\n\n     // get a query result for every table in the base:\n     const queryResults = base.tables.map(table => table.selectRecords());\n\n     // load them all:\n     useLoadable(queryResults);\n\n     // use the data:\n     return <SomeFancyComponent queryResults={queryResults} />;\n }\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/hooks/useLoadable"
                            },
                            {
                                "tag": "hook",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 12099,
                            "name": "useLoadable",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "When you're writing a block, not all of the data in your base is available to work with straight\naway. We need to load it from Airtable first. This hook is a low-level tool for managing that.\nYou might not need to use it directly though - if you're working with a {@link RecordQueryResult}, try\n{@link useRecords}, {@link useRecordIds}, or {@link useRecordById} first.",
                                "text": "When you need to use a loadable model, `useLoadable(theModel)` will make sure that the model is\nloaded when your component mounts, and unloaded when your component unmounts. By default, you\ndon't need to worry about waiting for the data to load - the hook uses React Suspense to make\nsure the rest of your component doesn't run until the data is loaded. Whilst the data is\nloading, the entire block will show a loading indicator. If you want to change where that\nindicator shows or how it looks, use {@link https://reactjs.org/docs/react-api.html#reactsuspense|`<React.Suspense />`}\naround the component that uses the hook.\n\nYou can pass several models to `useLoadable` in an array - it will load all of them simultaneously.\nWe'll memoize this array using shallow equality, so there's no need to use `useMemo`.\n\nIf you need more control, you can pass `{shouldSuspend: false}` as a second argument to\nthe hook. In that case though, `useLoadable` will cause your component to re-render whenever the\nload-state of any model you passed in changes, and you should check each model's `.isDataLoaded`\n property before trying to use the data you loaded.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {cursor} from '@airtable/blocks';\nimport {useLoadable, useWatchable} from '@airtable/blocks/ui';\n\n function SelectedRecordIds() {\n     // load selected records\n     useLoadable(cursor);\n\n     // re-render whenever the list of selected records changes\n     useWatchable(cursor, ['selectedRecordIds']);\n\n     // render the list of selected record ids\n     return <div>Selected records: {cursor.selectedRecordIds.join(', ')}</div>;\n }\n```\n"
                                    },
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n import {useLoadable} from '@airtable/blocks/ui';\n\n function LoadTwoQueryResults({queryResultA, queryResultB}) {\n     // load the queryResults:\n     useLoadable([queryResultA, queryResultB]);\n\n     // now, we can use the data\n     return <SomeFancyComponent />;\n }\n```\n"
                                    },
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n import {useLoadable, useBase} from '@airtable/blocks/ui';\n\n function LoadAllRecords() {\n     const base = useBase();\n\n     // get a query result for every table in the base:\n     const queryResults = base.tables.map(table => table.selectRecords());\n\n     // load them all:\n     useLoadable(queryResults);\n\n     // use the data:\n     return <SomeFancyComponent queryResults={queryResults} />;\n }\n```"
                                    },
                                    {
                                        "tag": "docspath",
                                        "text": "UI/hooks/useLoadable"
                                    },
                                    {
                                        "tag": "hook",
                                        "text": "\n"
                                    }
                                ]
                            },
                            "parameters": [
                                {
                                    "id": 12100,
                                    "name": "models",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The models to load."
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "reference",
                                                                "name": "LoadableModel",
                                                                "id": 12077
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "null"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "reference",
                                                "name": "LoadableModel",
                                                "id": 12077
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "id": 12101,
                                    "name": "opts",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Optional options to control how the hook works.\n"
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "UseLoadableOpts",
                                        "id": 12095
                                    },
                                    "defaultValue": " {shouldSuspend: true}"
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "void"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/use_loadable.ts",
                            "line": 112,
                            "character": 35
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [12077, 12095]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [12098]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/use_loadable.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 14496,
            "name": "@airtable/blocks/ui: useRecords",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/use_records.ts",
            "comment": {},
            "children": [
                {
                    "id": 14497,
                    "name": "AnyQueryResult",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/ui/use_records.ts",
                            "line": 19,
                            "character": 19
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "reference",
                                "name": "TableOrViewQueryResult",
                                "id": 1646
                            },
                            {
                                "type": "reference",
                                "name": "LinkedRecordsQueryResult",
                                "id": 2063
                            }
                        ]
                    }
                },
                {
                    "id": 14498,
                    "name": "TableOrViewOrQueryResult",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/ui/use_records.ts",
                            "line": 21,
                            "character": 29
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "reference",
                                "name": "Table",
                                "id": 14669
                            },
                            {
                                "type": "reference",
                                "name": "View",
                                "id": 1973
                            },
                            {
                                "type": "reference",
                                "name": "AnyQueryResult",
                                "id": 14497
                            }
                        ]
                    }
                },
                {
                    "id": 14515,
                    "name": "useRecordById",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A hook for working with a single record. Automatically handles loading data and updating your\ncomponent when the record's cell values etc. change.",
                        "text": "Often used with {@link useRecordIds} to render a list of records where each list item only\nupdates when the specific record it concerns changes.\n\nUnder the hood, this hook creates a {@link TableOrViewQueryResult} if passed a table or view.\nPass a query result if you want direct access to it (e.g. for `queryResult.getRecordById`).\n\nReturns the specified record, or null if no model was passed in, or no record with that ID exists\nin the model.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\n import {useRecordById, useRecordIds, useBase} from '@airtable/blocks';\n\n // this component concerns a single record - it only updates when that specific record updates\n function RecordListItem({table, recordId}) {\n     const record = useRecordById(table, recordId);\n     return <li>{record.primaryCellValueAsString}</li>;\n }\n\n // this component renders a list of records, but doesn't update when their cell values change -\n // that's left up to RecordListItem\n function RecordList() {\n     const base = useBase();\n     const table = base.tables[0];\n\n     // grab all the record ids from the table\n     const recordIds = useRecordIds(table);\n\n     // render a list of records:\n     return (\n         <ul>\n             {recordIds.map(recordId => {\n                 return <RecordListItem key={recordId} recordId={recordId} table={table} />\n             })}\n         </ul>\n     );\n }\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/hooks/useRecordById"
                            },
                            {
                                "tag": "hook",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14516,
                            "name": "useRecordById",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A hook for working with a single record. Automatically handles loading data and updating your\ncomponent when the record's cell values etc. change.",
                                "text": "Often used with {@link useRecordIds} to render a list of records where each list item only\nupdates when the specific record it concerns changes.\n\nUnder the hood, this hook creates a {@link TableOrViewQueryResult} if passed a table or view.\nPass a query result if you want direct access to it (e.g. for `queryResult.getRecordById`).\n\nReturns the specified record, or null if no model was passed in, or no record with that ID exists\nin the model.\n"
                            },
                            "parameters": [
                                {
                                    "id": 14517,
                                    "name": "tableOrView",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Table",
                                                "id": 14669
                                            },
                                            {
                                                "type": "reference",
                                                "name": "View",
                                                "id": 1973
                                            }
                                        ]
                                    }
                                },
                                {
                                    "id": 14518,
                                    "name": "recordId",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID of the record you want."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "RecordId",
                                        "id": 644
                                    }
                                },
                                {
                                    "id": 14519,
                                    "name": "opts",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {
                                        "isOptional": true
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "SingleRecordQueryResultOpts",
                                        "id": 15045
                                    }
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Record",
                                        "id": 2296
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14520,
                            "name": "useRecordById",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A hook for working with a single record. Automatically handles loading data and updating your\ncomponent when the record's cell values etc. change.",
                                "text": "Often used with {@link useRecordIds} to render a list of records where each list item only\nupdates when the specific record it concerns changes.\n\nUnder the hood, this hook creates a {@link TableOrViewQueryResult} if passed a table or view.\nPass a query result if you want direct access to it (e.g. for `queryResult.getRecordById`).\n\nReturns the specified record, or null if no model was passed in, or no record with that ID exists\nin the model.\n"
                            },
                            "parameters": [
                                {
                                    "id": 14521,
                                    "name": "queryResult",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "AnyQueryResult",
                                        "id": 14497
                                    }
                                },
                                {
                                    "id": 14522,
                                    "name": "recordId",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID of the record you want."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "RecordId",
                                        "id": 644
                                    }
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Record",
                                        "id": 2296
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/use_records.ts",
                            "line": 192,
                            "character": 29
                        },
                        {
                            "fileName": "src/ui/use_records.ts",
                            "line": 199,
                            "character": 29
                        },
                        {
                            "fileName": "src/ui/use_records.ts",
                            "line": 249,
                            "character": 29
                        }
                    ]
                },
                {
                    "id": 14499,
                    "name": "useRecordIds",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A hook for working with a set of record IDs from a table, view or query result. Automatically\nhandles loading data and updating your component when the underlying data changes.",
                        "text": "This hook doesn't re-render when the data _inside_ the records changes - only when records are\nadded, removed, or re-ordered. Use this over {@link useRecords} when you want to avoid watching\ncell data for all records. Use with {@link useRecordById} to only watch cell data for certain\nrecords.\n\nUnder the hood, this hook creates a {@link TableOrViewQueryResult} if passed a table or view.\nPass a query result if you want direct access to it (e.g. for `queryResult.getRecordById`).\n\nReturns an array of record IDs, or null if no model was passed in.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\n import {useRecordIds, useBase} from '@airtable/blocks/ui';\n\n function RecordCount() {\n     const base = useBase();\n     const table = base.tables[0];\n\n     // grab all the record ids from that table\n     const recordIds = useRecordIds(table);\n\n     // return the count\n     return <span>record count in {table.name}: {recordIds.length}</span>;\n }\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/hooks/useRecordIds"
                            },
                            {
                                "tag": "hook",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14500,
                            "name": "useRecordIds",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A hook for working with a set of record IDs from a table, view or query result. Automatically\nhandles loading data and updating your component when the underlying data changes.",
                                "text": "This hook doesn't re-render when the data _inside_ the records changes - only when records are\nadded, removed, or re-ordered. Use this over {@link useRecords} when you want to avoid watching\ncell data for all records. Use with {@link useRecordById} to only watch cell data for certain\nrecords.\n\nUnder the hood, this hook creates a {@link TableOrViewQueryResult} if passed a table or view.\nPass a query result if you want direct access to it (e.g. for `queryResult.getRecordById`).\n\nReturns an array of record IDs, or null if no model was passed in.\n"
                            },
                            "parameters": [
                                {
                                    "id": 14501,
                                    "name": "tableOrView",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Table",
                                                "id": 14669
                                            },
                                            {
                                                "type": "reference",
                                                "name": "View",
                                                "id": 1973
                                            }
                                        ]
                                    }
                                },
                                {
                                    "id": 14502,
                                    "name": "opts",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {
                                        "isOptional": true
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "RecordIdQueryResultOpts",
                                        "id": 15046
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "RecordId",
                                        "id": 644
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14503,
                            "name": "useRecordIds",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A hook for working with a set of record IDs from a table, view or query result. Automatically\nhandles loading data and updating your component when the underlying data changes.",
                                "text": "This hook doesn't re-render when the data _inside_ the records changes - only when records are\nadded, removed, or re-ordered. Use this over {@link useRecords} when you want to avoid watching\ncell data for all records. Use with {@link useRecordById} to only watch cell data for certain\nrecords.\n\nUnder the hood, this hook creates a {@link TableOrViewQueryResult} if passed a table or view.\nPass a query result if you want direct access to it (e.g. for `queryResult.getRecordById`).\n\nReturns an array of record IDs, or null if no model was passed in.\n"
                            },
                            "parameters": [
                                {
                                    "id": 14504,
                                    "name": "queryResult",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "AnyQueryResult",
                                        "id": 14497
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "RecordId",
                                        "id": 644
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14505,
                            "name": "useRecordIds",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A hook for working with a set of record IDs from a table, view or query result. Automatically\nhandles loading data and updating your component when the underlying data changes.",
                                "text": "This hook doesn't re-render when the data _inside_ the records changes - only when records are\nadded, removed, or re-ordered. Use this over {@link useRecords} when you want to avoid watching\ncell data for all records. Use with {@link useRecordById} to only watch cell data for certain\nrecords.\n\nUnder the hood, this hook creates a {@link TableOrViewQueryResult} if passed a table or view.\nPass a query result if you want direct access to it (e.g. for `queryResult.getRecordById`).\n\nReturns an array of record IDs, or null if no model was passed in.\n"
                            },
                            "parameters": [
                                {
                                    "id": 14506,
                                    "name": "tableOrViewOrQueryResult",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The {@link Table}, {@link View} or {@link RecordQueryResult} you want the record ids from."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "null"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/use_records.ts",
                            "line": 24,
                            "character": 28
                        },
                        {
                            "fileName": "src/ui/use_records.ts",
                            "line": 29,
                            "character": 28
                        },
                        {
                            "fileName": "src/ui/use_records.ts",
                            "line": 31,
                            "character": 28
                        },
                        {
                            "fileName": "src/ui/use_records.ts",
                            "line": 67,
                            "character": 28
                        }
                    ]
                },
                {
                    "id": 14507,
                    "name": "useRecords",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A hook for working with all of the records (including their colors and cell values) in a\nparticular table, view or query result. Automatically handles loading data and updating\nyour component when the underlying data changes.",
                        "text": "This hook re-renders when any data concerning the records changes, including cell values - that's\nuseful, but can cause re-renders quite often, meaning {@link useRecordIds} or\n{@link useRecordById} could be more appropriate depending on your use case.\n\nUnder the hood, this hook creates a {@link TableOrViewQueryResult} if passed a table or view.\nPass a query result if you want direct access to it (e.g. for `queryResult.getRecordById`).\n\nReturns a list of records, or null if no model was passed in.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\n import {useRecords, useBase} from '@airtable/blocks';\n\n function GetRecords() {\n     const base = useBase();\n     const table = base.tables[0];\n     const view = table.views[0];\n     let records;\n\n     // Returns all records in the table\n     records = useRecords(table);\n\n     // Equivalent to the above - useful if you want to reuse the queryResult elsewhere\n     const queryResult = table.selectRecords();\n     records = useRecords(queryResult);\n\n     // Returns all records for a view\n     records = useRecords(view)\n\n     // Returns all records in a table, only loading data for the specified fields\n     records = useRecords(table, {fields: ['My field']});\n\n     // Returns all records in a table, sorting the records by values in the specified fields\n     records = useRecords(table, {sorts: [\n        // sort by 'My field' in ascending order...\n        {field: 'My field'},\n        // then by 'My other field' in descending order\n        {field: 'My other field', direction: 'desc'},\n     ]});\n }\n```\n"
                            },
                            {
                                "tag": "example",
                                "text": "\n```js\n import {useRecords, useBase} from '@airtable/blocks';\n\n function RecordList() {\n     const base = useBase();\n     const table = base.tables[0];\n\n     // grab all the records from that table\n     const records = useRecords(table);\n\n     // render a list of records:\n     return (\n         <ul>\n             {records.map(record => {\n                 return <li key={record.id}>{record.primaryCellValueAsString}</li>\n             })}\n         </ul>\n     );\n }\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/hooks/useRecords"
                            },
                            {
                                "tag": "hook",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14508,
                            "name": "useRecords",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A hook for working with all of the records (including their colors and cell values) in a\nparticular table, view or query result. Automatically handles loading data and updating\nyour component when the underlying data changes.",
                                "text": "This hook re-renders when any data concerning the records changes, including cell values - that's\nuseful, but can cause re-renders quite often, meaning {@link useRecordIds} or\n{@link useRecordById} could be more appropriate depending on your use case.\n\nUnder the hood, this hook creates a {@link TableOrViewQueryResult} if passed a table or view.\nPass a query result if you want direct access to it (e.g. for `queryResult.getRecordById`).\n\nReturns a list of records, or null if no model was passed in.\n"
                            },
                            "parameters": [
                                {
                                    "id": 14509,
                                    "name": "tableOrView",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Table",
                                                "id": 14669
                                            },
                                            {
                                                "type": "reference",
                                                "name": "View",
                                                "id": 1973
                                            }
                                        ]
                                    }
                                },
                                {
                                    "id": 14510,
                                    "name": "opts",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {
                                        "isOptional": true
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "RecordQueryResultOpts",
                                        "id": 14904
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "Record",
                                        "id": 2296
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14511,
                            "name": "useRecords",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A hook for working with all of the records (including their colors and cell values) in a\nparticular table, view or query result. Automatically handles loading data and updating\nyour component when the underlying data changes.",
                                "text": "This hook re-renders when any data concerning the records changes, including cell values - that's\nuseful, but can cause re-renders quite often, meaning {@link useRecordIds} or\n{@link useRecordById} could be more appropriate depending on your use case.\n\nUnder the hood, this hook creates a {@link TableOrViewQueryResult} if passed a table or view.\nPass a query result if you want direct access to it (e.g. for `queryResult.getRecordById`).\n\nReturns a list of records, or null if no model was passed in.\n"
                            },
                            "parameters": [
                                {
                                    "id": 14512,
                                    "name": "queryResult",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "AnyQueryResult",
                                        "id": 14497
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "Record",
                                        "id": 2296
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14513,
                            "name": "useRecords",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A hook for working with all of the records (including their colors and cell values) in a\nparticular table, view or query result. Automatically handles loading data and updating\nyour component when the underlying data changes.",
                                "text": "This hook re-renders when any data concerning the records changes, including cell values - that's\nuseful, but can cause re-renders quite often, meaning {@link useRecordIds} or\n{@link useRecordById} could be more appropriate depending on your use case.\n\nUnder the hood, this hook creates a {@link TableOrViewQueryResult} if passed a table or view.\nPass a query result if you want direct access to it (e.g. for `queryResult.getRecordById`).\n\nReturns a list of records, or null if no model was passed in.\n"
                            },
                            "parameters": [
                                {
                                    "id": 14514,
                                    "name": "tableOrViewOrQueryResult",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The {@link Table}, {@link View} or {@link RecordQueryResult} you want the records from."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "null"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/use_records.ts",
                            "line": 93,
                            "character": 26
                        },
                        {
                            "fileName": "src/ui/use_records.ts",
                            "line": 95,
                            "character": 26
                        },
                        {
                            "fileName": "src/ui/use_records.ts",
                            "line": 97,
                            "character": 26
                        },
                        {
                            "fileName": "src/ui/use_records.ts",
                            "line": 172,
                            "character": 26
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [14497, 14498]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [14515, 14499, 14507]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/use_records.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 14523,
            "name": "@airtable/blocks/ui: useSession",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/use_session.ts",
            "comment": {},
            "children": [
                {
                    "id": 14524,
                    "name": "useSession",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true,
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A hook for connecting a React component to the current session. This returns a {@link Session}\ninstance and will re-render your component whenever the session changes (e.g. when the current user's\npermissions change or when the current user's name changes).",
                        "text": "`useSession` should meet most of your needs for working with {@link Session}. If you need more granular\ncontrol of when your component updates or want to do anything other than re-render, the lower\nlevel {@link useWatchable} hook might help.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {CollaboratorToken, useSession} from '@airtable/blocks/ui';\n\n// Says hello to the current user and updates in realtime if the current user's\n// name or profile pic changes.\nfunction CurrentUserGreeter() {\n    const session = useSession();\n    return (\n        <React.Fragment>\n            Hello,\n            <CollaboratorToken collaborator={session.currentUser} />!\n        </React.Fragment>\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/hooks/useSession"
                            },
                            {
                                "tag": "hook",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14525,
                            "name": "useSession",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A hook for connecting a React component to the current session. This returns a {@link Session}\ninstance and will re-render your component whenever the session changes (e.g. when the current user's\npermissions change or when the current user's name changes).",
                                "text": "`useSession` should meet most of your needs for working with {@link Session}. If you need more granular\ncontrol of when your component updates or want to do anything other than re-render, the lower\nlevel {@link useWatchable} hook might help.\n"
                            },
                            "type": {
                                "type": "reference",
                                "name": "Session",
                                "id": 2676
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/use_session.ts",
                            "line": 34,
                            "character": 16
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [14524]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/use_session.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 14526,
            "name": "@airtable/blocks/ui: useSettingsButton",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/use_settings_button.ts",
            "comment": {},
            "children": [
                {
                    "id": 14527,
                    "name": "useSettingsButton",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A hook for using the settings button that lives outside the block's viewport. It will show\nthe settings button (hidden by default) and call the provided callback whenever the settings\nbutton is clicked. It will also re-render your component when the settings button is clicked.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {useSettingsButton} from '@airtable/blocks/ui';\nimport {useState} from 'react';\n\nfunction ComponentWithSettings() {\n     const [isShowingSettings, setIsShowingSettings] = useState(false);\n     useSettingsButton(function() {\n         setIsShowingSettings(!isShowingSettings);\n     });\n\n     if (isShowingSettings) {\n         return <SettingsComponent />\n     }\n     return <MainComponent />\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/hooks/useSettingsButton"
                            },
                            {
                                "tag": "hook",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14528,
                            "name": "useSettingsButton",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A hook for using the settings button that lives outside the block's viewport. It will show\nthe settings button (hidden by default) and call the provided callback whenever the settings\nbutton is clicked. It will also re-render your component when the settings button is clicked.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {useSettingsButton} from '@airtable/blocks/ui';\nimport {useState} from 'react';\n\nfunction ComponentWithSettings() {\n     const [isShowingSettings, setIsShowingSettings] = useState(false);\n     useSettingsButton(function() {\n         setIsShowingSettings(!isShowingSettings);\n     });\n\n     if (isShowingSettings) {\n         return <SettingsComponent />\n     }\n     return <MainComponent />\n}\n```"
                                    },
                                    {
                                        "tag": "docspath",
                                        "text": "UI/hooks/useSettingsButton"
                                    },
                                    {
                                        "tag": "hook",
                                        "text": "\n"
                                    }
                                ]
                            },
                            "parameters": [
                                {
                                    "id": 14529,
                                    "name": "onClickCallback",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "A callback to call when the button is clicked.\n"
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "FlowAnyFunction"
                                    }
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "void"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/use_settings_button.ts",
                            "line": 34,
                            "character": 41
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [14527]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/use_settings_button.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 12102,
            "name": "@airtable/blocks/ui: useViewMetadata",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/use_view_metadata.ts",
            "comment": {},
            "children": [
                {
                    "id": 12103,
                    "name": "useViewMetadata",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Returns a {@link ViewMetadataQueryResult} for the specified view and re-renders whenever the\nview metadata changes. Suspends if the view is not already loaded.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {useBase, useViewMetadata} from '@airtable/blocks/ui';\n\nfunction ViewFields({view}) {\n    const viewMetadata = useViewMetadata(view);\n\n    return (\n        <ul>\n            {viewMetadata.visibleFields.map(field => (\n                <li key={field.id}>{field.name}</li>\n            ))}\n        </ul>\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/hooks/useViewMetadata"
                            },
                            {
                                "tag": "hook",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 12104,
                            "name": "useViewMetadata",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Returns a {@link ViewMetadataQueryResult} for the specified view and re-renders whenever the\nview metadata changes. Suspends if the view is not already loaded."
                            },
                            "parameters": [
                                {
                                    "id": 12105,
                                    "name": "viewOrViewMetadataQueryResult",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The {@link View} or {@link ViewMetadataQueryResult} to watch and use metadata from."
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "View",
                                                "id": 1973
                                            },
                                            {
                                                "type": "reference",
                                                "name": "ViewMetadataQueryResult",
                                                "id": 1874
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ViewMetadataQueryResult",
                                "id": 1874
                            }
                        },
                        {
                            "id": 12106,
                            "name": "useViewMetadata",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Returns a {@link ViewMetadataQueryResult} for the specified view and re-renders whenever the\nview metadata changes. Suspends if the view is not already loaded."
                            },
                            "parameters": [
                                {
                                    "id": 12107,
                                    "name": "viewOrViewMetadataQueryResult",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {
                                        "isOptional": true
                                    },
                                    "comment": {
                                        "shortText": "The {@link View} or {@link ViewMetadataQueryResult} to watch and use metadata from."
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "undefined"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "null"
                            }
                        },
                        {
                            "id": 12108,
                            "name": "useViewMetadata",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Returns a {@link ViewMetadataQueryResult} for the specified view and re-renders whenever the\nview metadata changes. Suspends if the view is not already loaded."
                            },
                            "parameters": [
                                {
                                    "id": 12109,
                                    "name": "viewOrViewMetadataQueryResult",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {
                                        "isOptional": true
                                    },
                                    "comment": {
                                        "shortText": "The {@link View} or {@link ViewMetadataQueryResult} to watch and use metadata from."
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "View",
                                                "id": 1973
                                            },
                                            {
                                                "type": "reference",
                                                "name": "ViewMetadataQueryResult",
                                                "id": 1874
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "undefined"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "ViewMetadataQueryResult",
                                        "id": 1874
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/use_view_metadata.ts",
                            "line": 8,
                            "character": 24
                        },
                        {
                            "fileName": "src/ui/use_view_metadata.ts",
                            "line": 12,
                            "character": 24
                        },
                        {
                            "fileName": "src/ui/use_view_metadata.ts",
                            "line": 14,
                            "character": 24
                        },
                        {
                            "fileName": "src/ui/use_view_metadata.ts",
                            "line": 42,
                            "character": 24
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [12103]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/use_view_metadata.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 14530,
            "name": "@airtable/blocks/ui: useViewport",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/use_viewport.ts",
            "comment": {},
            "children": [
                {
                    "id": 14531,
                    "name": "useViewport",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Returns the current {@link Viewport} object and updates whenever the viewport size, constraints,\nor fullscreen status changes.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {useViewport} from '@airtable/blocks/ui';\n\nfunction ViewportSize() {\n     const viewport = useViewport();\n\n     const toggleFullscreen = () => {\n         if (viewport.isFullscreen) {\n             viewport.exitFullscreen();\n         } else {\n             viewport.enterFullscreenIfPossible();\n         }\n     };\n\n     return (\n         <Fragment>\n             <button onClick={toggleFullscreen}>Toggle fullscreen</button>\n\n             viewport size: {viewport.size.width}x{viewport.size.height}\n         </Fragment>\n     );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/hooks/useViewport"
                            },
                            {
                                "tag": "hook",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14532,
                            "name": "useViewport",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Returns the current {@link Viewport} object and updates whenever the viewport size, constraints,\nor fullscreen status changes.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {useViewport} from '@airtable/blocks/ui';\n\nfunction ViewportSize() {\n     const viewport = useViewport();\n\n     const toggleFullscreen = () => {\n         if (viewport.isFullscreen) {\n             viewport.exitFullscreen();\n         } else {\n             viewport.enterFullscreenIfPossible();\n         }\n     };\n\n     return (\n         <Fragment>\n             <button onClick={toggleFullscreen}>Toggle fullscreen</button>\n\n             viewport size: {viewport.size.width}x{viewport.size.height}\n         </Fragment>\n     );\n}\n```"
                                    },
                                    {
                                        "tag": "docspath",
                                        "text": "UI/hooks/useViewport"
                                    },
                                    {
                                        "tag": "hook",
                                        "text": "\n"
                                    }
                                ]
                            },
                            "type": {
                                "type": "reference",
                                "name": "Viewport",
                                "id": 2937
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/use_viewport.ts",
                            "line": 37,
                            "character": 35
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [14531]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/use_viewport.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 3198,
            "name": "@airtable/blocks/ui: useWatchable",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/use_watchable.ts",
            "comment": {},
            "children": [
                {
                    "id": 3199,
                    "name": "useWatchable",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A React hook for watching data in Airtable models like {@link Table} and {@link Record}. Each\nmodel has several watchable keys that can be used with this hook to have your component\nautomatically re-render when data in the models changes. You can also provide an optional\ncallback if you need to do anything other than re-render when the data changes.",
                        "text": "This is a low-level tool that you should only use when you specifically need it. There are more\nconvenient model-specific hooks available:\n\n* For {@link Base}, {@link Table}, {@link View}, or {@link Field}, use {@link useBase}.\n* For {@link RecordQueryResult} or {@link Record}, use {@link useRecords}, {@link useRecordIds}, or {@link useRecordById}.\n* For {@link Viewport}, use {@link useViewport}.\n\nIf you're writing a class component and still want to be able to use hooks, try {@link withHooks}.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {useWatchable} from '@airtable/blocks/ui';\n\nfunction TableName({table}) {\n    useWatchable(table, 'name');\n    return <span>The table name is {table.name}</span>;\n}\n\nfunction ViewNameAndType({view}) {\n    useWatchable(view, ['name', 'type']);\n    return <span>The view name is {view.name} and the type is {view.type}</span>;\n}\n\nfunction RecordValuesAndColorInViewIfExists({record, field, view}) {\n    useWatchable(record, ['cellValues', view ? `colorInView:${view.id}` : null]);\n    return <span>\n        The record has cell value {record.getCellValue(field)} in {field.name}.\n        {view ? `The record has color ${record.getColorInView(view)} in ${view.name}.` : null}\n    </span>\n}\n```\n"
                            },
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {useWatchable} from '@airtable/blocks/ui';\n\nfunction ActiveView({cursor}) {\n    useWatchable(cursor, 'activeViewId', () => {\n         alert('active view changed!!!')\n    });\n\n    return <span>Active view id: {cursor.activeViewId}</span>;\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/hooks/useWatchable"
                            },
                            {
                                "tag": "hook",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 3200,
                            "name": "useWatchable",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A React hook for watching data in Airtable models like {@link Table} and {@link Record}. Each\nmodel has several watchable keys that can be used with this hook to have your component\nautomatically re-render when data in the models changes. You can also provide an optional\ncallback if you need to do anything other than re-render when the data changes.",
                                "text": "This is a low-level tool that you should only use when you specifically need it. There are more\nconvenient model-specific hooks available:\n\n* For {@link Base}, {@link Table}, {@link View}, or {@link Field}, use {@link useBase}.\n* For {@link RecordQueryResult} or {@link Record}, use {@link useRecords}, {@link useRecordIds}, or {@link useRecordById}.\n* For {@link Viewport}, use {@link useViewport}.\n\nIf you're writing a class component and still want to be able to use hooks, try {@link withHooks}.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {useWatchable} from '@airtable/blocks/ui';\n\nfunction TableName({table}) {\n    useWatchable(table, 'name');\n    return <span>The table name is {table.name}</span>;\n}\n\nfunction ViewNameAndType({view}) {\n    useWatchable(view, ['name', 'type']);\n    return <span>The view name is {view.name} and the type is {view.type}</span>;\n}\n\nfunction RecordValuesAndColorInViewIfExists({record, field, view}) {\n    useWatchable(record, ['cellValues', view ? `colorInView:${view.id}` : null]);\n    return <span>\n        The record has cell value {record.getCellValue(field)} in {field.name}.\n        {view ? `The record has color ${record.getColorInView(view)} in ${view.name}.` : null}\n    </span>\n}\n```\n"
                                    },
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {useWatchable} from '@airtable/blocks/ui';\n\nfunction ActiveView({cursor}) {\n    useWatchable(cursor, 'activeViewId', () => {\n         alert('active view changed!!!')\n    });\n\n    return <span>Active view id: {cursor.activeViewId}</span>;\n}\n```"
                                    },
                                    {
                                        "tag": "docspath",
                                        "text": "UI/hooks/useWatchable"
                                    },
                                    {
                                        "tag": "hook",
                                        "text": "\n"
                                    }
                                ]
                            },
                            "typeParameter": [
                                {
                                    "id": 3201,
                                    "name": "Keys",
                                    "kind": 131072,
                                    "kindString": "Type parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "parameters": [
                                {
                                    "id": 3202,
                                    "name": "models",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The model or models to watch."
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Watchable",
                                                "id": 1026,
                                                "typeArguments": [
                                                    {
                                                        "type": "typeParameter",
                                                        "name": "Keys",
                                                        "constraint": {
                                                            "type": "intrinsic",
                                                            "name": "string"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "reference",
                                                                "name": "Watchable",
                                                                "id": 1026,
                                                                "typeArguments": [
                                                                    {
                                                                        "type": "typeParameter",
                                                                        "name": "Keys",
                                                                        "constraint": {
                                                                            "type": "intrinsic",
                                                                            "name": "string"
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "null"
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "undefined"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "undefined"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "id": 3203,
                                    "name": "keys",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The key or keys to watch. Non-optional, but may be null."
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "typeParameter",
                                                "name": "Keys",
                                                "constraint": {
                                                    "type": "intrinsic",
                                                    "name": "string"
                                                }
                                            },
                                            {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "typeParameter",
                                                                "name": "Keys",
                                                                "constraint": {
                                                                    "type": "intrinsic",
                                                                    "name": "string"
                                                                }
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "null"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "id": 3204,
                                    "name": "callback",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {
                                        "isOptional": true
                                    },
                                    "comment": {
                                        "shortText": "An optional callback to call when any of the watch keys change.\n"
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "intrinsic",
                                                "name": "undefined"
                                            },
                                            {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 3205,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {},
                                                    "signatures": [
                                                        {
                                                            "id": 3206,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 3207,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Watchable",
                                                                        "id": 1026,
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "typeParameter",
                                                                                "name": "Keys",
                                                                                "constraint": {
                                                                                    "type": "intrinsic",
                                                                                    "name": "string"
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "id": 3208,
                                                                    "name": "keys",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "string"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 3209,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "void"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/use_watchable.ts",
                            "line": 66,
                            "character": 36
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [3199]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/use_watchable.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 3216,
            "name": "@airtable/blocks/ui: withHooks",
            "kind": 1,
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/with_hooks.tsx",
            "comment": {},
            "sources": [
                {
                    "fileName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/ui/with_hooks.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 1220,
            "name": "@airtable/blocks: globalConfig",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/global_config.ts",
            "comment": {},
            "children": [
                {
                    "id": 1221,
                    "name": "GlobalConfig",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A key-value store for persisting configuration options for a block installation.",
                        "text": "The contents will be synced in real-time to all logged-in users of the installation.\nContents will not be updated in real-time when the installation is running in\na publicly shared base.\n\nAny key can be watched to know when the value of the key changes. If you want your\ncomponent to automatically re-render whenever any key on GlobalConfig changes, try using the\n{@link useGlobalConfig} hook.\n\nYou should not need to construct this object yourself.\n\nThe maximum allowed size of each URL-encoded write to GlobalConfig is 100kB.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {globalConfig} from '@airtable/blocks';\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "models/GlobalConfig\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 1246,
                            "name": "checkPermissionsForSet",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Checks whether the current user has permission to set the given global config key.",
                                "text": "Accepts partial input, in the same format as {@link setAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can set the specified key,\n`{hasPermission: false, reasonDisplayString: string}` otherwise.  `reasonDisplayString` may\nbe used to display an error message to the user.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can update a specific key and value.\nconst setCheckResult =\n    globalConfig.checkPermissionsForSet('favoriteColor', 'purple');\nif (!setCheckResult.hasPermission) {\n    alert(setCheckResult.reasonDisplayString);\n}\n\n// Check if user can update a specific key without knowing the value\nconst setKeyCheckResult =\n    globalConfig.checkPermissionsForSet('favoriteColor');\n\n// Check if user can update globalConfig without knowing key or value\nconst setUnknownKeyCheckResult = globalConfig.checkPermissionsForSet();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1247,
                                    "name": "checkPermissionsForSet",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Checks whether the current user has permission to set the given global config key.",
                                        "text": "Accepts partial input, in the same format as {@link setAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can set the specified key,\n`{hasPermission: false, reasonDisplayString: string}` otherwise.  `reasonDisplayString` may\nbe used to display an error message to the user.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can update a specific key and value.\nconst setCheckResult =\n    globalConfig.checkPermissionsForSet('favoriteColor', 'purple');\nif (!setCheckResult.hasPermission) {\n    alert(setCheckResult.reasonDisplayString);\n}\n\n// Check if user can update a specific key without knowing the value\nconst setKeyCheckResult =\n    globalConfig.checkPermissionsForSet('favoriteColor');\n\n// Check if user can update globalConfig without knowing key or value\nconst setUnknownKeyCheckResult = globalConfig.checkPermissionsForSet();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1248,
                                            "name": "key",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "A string for the top-level key, or an array of strings describing the path to set."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "PartialGlobalConfigKey",
                                                "id": 952
                                            }
                                        },
                                        {
                                            "id": 1249,
                                            "name": "value",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "The value to set at the specified path. Use `undefined` to delete the value at the given path.\n"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "GlobalConfigValue",
                                                "id": 953
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "PermissionCheckResult",
                                        "id": 1024
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/global_config.ts",
                                    "line": 167,
                                    "character": 26
                                }
                            ]
                        },
                        {
                            "id": 1258,
                            "name": "checkPermissionsForSetPaths",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Checks whether the current user has permission to perform the specified updates to global config.",
                                "text": "Accepts partial input, in the same format as {@link setPathsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can set the specified key,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can update a specific keys and values.\nconst setPathsCheckResult = globalConfig.checkPermissionsForSet([\n    {path: ['topLevelKey1', 'nestedKey1'], value: 'foo'},\n    {path: ['topLevelKey2', 'nestedKey2'], value: 'bar'},\n]);\nif (!setPathsCheckResult.hasPermission) {\n    alert(setPathsCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially set globalConfig values.\n// Equivalent to globalConfig.checkPermissionsForSet()\nconst setUnknownPathsCheckResult =\n    globalConfig.checkPermissionsForSetPaths();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1259,
                                    "name": "checkPermissionsForSetPaths",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Checks whether the current user has permission to perform the specified updates to global config.",
                                        "text": "Accepts partial input, in the same format as {@link setPathsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n\nReturns `{hasPermission: true}` if the current user can set the specified key,\n`{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be\nused to display an error message to the user.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can update a specific keys and values.\nconst setPathsCheckResult = globalConfig.checkPermissionsForSet([\n    {path: ['topLevelKey1', 'nestedKey1'], value: 'foo'},\n    {path: ['topLevelKey2', 'nestedKey2'], value: 'bar'},\n]);\nif (!setPathsCheckResult.hasPermission) {\n    alert(setPathsCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially set globalConfig values.\n// Equivalent to globalConfig.checkPermissionsForSet()\nconst setUnknownPathsCheckResult =\n    globalConfig.checkPermissionsForSetPaths();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1260,
                                            "name": "updates",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "The paths and values to set."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "PartialGlobalConfigUpdate",
                                                        "id": 946
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "PermissionCheckResult",
                                        "id": 1024
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/global_config.ts",
                                    "line": 270,
                                    "character": 31
                                }
                            ]
                        },
                        {
                            "id": 1243,
                            "name": "get",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get the value at a path. Throws an error if the path is invalid.",
                                "text": "Returns undefined if no value exists at that path.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {globalConfig} from '@airtable/blocks';\n\nconst topLevelValue = globalConfig.get('topLevelKey');\nconst nestedValue = globalConfig.get(['topLevelKey', 'nested', 'deeply']);\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1244,
                                    "name": "get",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get the value at a path. Throws an error if the path is invalid.",
                                        "text": "Returns undefined if no value exists at that path.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {globalConfig} from '@airtable/blocks';\n\nconst topLevelValue = globalConfig.get('topLevelKey');\nconst nestedValue = globalConfig.get(['topLevelKey', 'nested', 'deeply']);\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1245,
                                            "name": "key",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "A string for the top-level key, or an array of strings describing the path to the value."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "GlobalConfigKey",
                                                "id": 950
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "unknown"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/global_config.ts",
                                    "line": 124,
                                    "character": 7
                                }
                            ]
                        },
                        {
                            "id": 1250,
                            "name": "hasPermissionToSet",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "An alias for `globalConfig.checkPermissionsForSet(key, value).hasPermission`.",
                                "text": "Checks whether the current user has permission to set the given global config key.\n\nAccepts partial input, in the same format as {@link setAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can update a specific key and value.\nconst canSetFavoriteColorToPurple =\n    globalConfig.hasPermissionToSet('favoriteColor', 'purple');\nif (!canSetFavoriteColorToPurple) {\n    alert('Not allowed!');\n}\n\n// Check if user can update a specific key without knowing the value\nconst canSetFavoriteColor = globalConfig.hasPermissionToSet('favoriteColor');\n\n// Check if user can update globalConfig without knowing key or value\nconst canSetGlobalConfig = globalConfig.hasPermissionToSet();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1251,
                                    "name": "hasPermissionToSet",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "An alias for `globalConfig.checkPermissionsForSet(key, value).hasPermission`.",
                                        "text": "Checks whether the current user has permission to set the given global config key.\n\nAccepts partial input, in the same format as {@link setAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can update a specific key and value.\nconst canSetFavoriteColorToPurple =\n    globalConfig.hasPermissionToSet('favoriteColor', 'purple');\nif (!canSetFavoriteColorToPurple) {\n    alert('Not allowed!');\n}\n\n// Check if user can update a specific key without knowing the value\nconst canSetFavoriteColor = globalConfig.hasPermissionToSet('favoriteColor');\n\n// Check if user can update globalConfig without knowing key or value\nconst canSetGlobalConfig = globalConfig.hasPermissionToSet();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1252,
                                            "name": "key",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "A string for the top-level key, or an array of strings describing the path to set."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "PartialGlobalConfigKey",
                                                "id": 952
                                            }
                                        },
                                        {
                                            "id": 1253,
                                            "name": "value",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "The value to set at the specified path. Use `undefined` to delete the value at the given path.\n"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "GlobalConfigValue",
                                                "id": 953
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/global_config.ts",
                                    "line": 202,
                                    "character": 22
                                }
                            ]
                        },
                        {
                            "id": 1261,
                            "name": "hasPermissionToSetPaths",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "An alias for `globalConfig.checkPermissionsForSetPaths(updates).hasPermission`.",
                                "text": "Checks whether the current user has permission to perform the specified updates to global\nconfig.\n\nAccepts partial input, in the same format as {@link setPathsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can update a specific keys and values.\nconst canSetPaths = globalConfig.hasPermissionToSetPaths([\n    {path: ['topLevelKey1', 'nestedKey1'], value: 'foo'},\n    {path: ['topLevelKey2', 'nestedKey2'], value: 'bar'},\n]);\nif (!canSetPaths) {\n    alert('not allowed!');\n}\n\n// Check if user could potentially set globalConfig values.\n// Equivalent to globalConfig.hasPermissionToSet()\nconst canSetAnyPaths = globalConfig.hasPermissionToSetPaths();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1262,
                                    "name": "hasPermissionToSetPaths",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "An alias for `globalConfig.checkPermissionsForSetPaths(updates).hasPermission`.",
                                        "text": "Checks whether the current user has permission to perform the specified updates to global\nconfig.\n\nAccepts partial input, in the same format as {@link setPathsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can update a specific keys and values.\nconst canSetPaths = globalConfig.hasPermissionToSetPaths([\n    {path: ['topLevelKey1', 'nestedKey1'], value: 'foo'},\n    {path: ['topLevelKey2', 'nestedKey2'], value: 'bar'},\n]);\nif (!canSetPaths) {\n    alert('not allowed!');\n}\n\n// Check if user could potentially set globalConfig values.\n// Equivalent to globalConfig.hasPermissionToSet()\nconst canSetAnyPaths = globalConfig.hasPermissionToSetPaths();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1263,
                                            "name": "updates",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "The paths and values to set.\n"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "PartialGlobalConfigUpdate",
                                                        "id": 946
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/global_config.ts",
                                    "line": 307,
                                    "character": 27
                                }
                            ]
                        },
                        {
                            "id": 1254,
                            "name": "setAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Sets a value at a path. Throws an error if the path or value is invalid.",
                                "text": "This action is asynchronous: `await` the returned promise if you wish to wait for the\nupdate to be persisted to Airtable servers.\n\nUpdates are applied optimistically locally, so your change will be reflected in\n{@link GlobalConfig} before the promise resolves.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {globalConfig} from '@airtable/blocks';\n\nfunction updateFavoriteColorIfPossible(color) {\n    if (globalConfig.hasPermissionToSetPaths('favoriteColor', color)) {\n        globalConfig.setPathsAsync('favoriteColor', color);\n    }\n    // The update is now applied within your block (eg will be\n    // reflected in globalConfig) but are still being saved to\n    // Airtable servers (e.g. may not be updated for other users yet)\n}\n\nasync function updateFavoriteColorIfPossibleAsync(color) {\n    if (globalConfig.hasPermissionToSet('favoriteColor', color)) {\n        await globalConfig.setAsync('favoriteColor', color);\n    }\n    // globalConfig updates have been saved to Airtable servers.\n    alert('favoriteColor has been updated');\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1255,
                                    "name": "setAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Sets a value at a path. Throws an error if the path or value is invalid.",
                                        "text": "This action is asynchronous: `await` the returned promise if you wish to wait for the\nupdate to be persisted to Airtable servers.\n\nUpdates are applied optimistically locally, so your change will be reflected in\n{@link GlobalConfig} before the promise resolves.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {globalConfig} from '@airtable/blocks';\n\nfunction updateFavoriteColorIfPossible(color) {\n    if (globalConfig.hasPermissionToSetPaths('favoriteColor', color)) {\n        globalConfig.setPathsAsync('favoriteColor', color);\n    }\n    // The update is now applied within your block (eg will be\n    // reflected in globalConfig) but are still being saved to\n    // Airtable servers (e.g. may not be updated for other users yet)\n}\n\nasync function updateFavoriteColorIfPossibleAsync(color) {\n    if (globalConfig.hasPermissionToSet('favoriteColor', color)) {\n        await globalConfig.setAsync('favoriteColor', color);\n    }\n    // globalConfig updates have been saved to Airtable servers.\n    alert('favoriteColor has been updated');\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1256,
                                            "name": "key",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "A string for the top-level key, or an array of strings describing the path to set."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "GlobalConfigKey",
                                                "id": 950
                                            }
                                        },
                                        {
                                            "id": 1257,
                                            "name": "value",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "The value to set at the specified path. Use `undefined` to delete the value at the given path."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "GlobalConfigValue",
                                                "id": 953
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/global_config.ts",
                                    "line": 238,
                                    "character": 18
                                }
                            ]
                        },
                        {
                            "id": 1264,
                            "name": "setPathsAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Sets multiple values. Throws if any path or value is invalid.",
                                "text": "This action is asynchronous: `await` the returned promise if you wish to wait for the\nupdates to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in\n{@link GlobalConfig} before the promise resolves.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {globalConfig} from '@airtable/blocks';\n\nconst updates = [\n    {path: ['topLevelKey1', 'nestedKey1'], value: 'foo'},\n    {path: ['topLevelKey2', 'nestedKey2'], value: 'bar'},\n];\n\nfunction applyUpdatesIfPossible() {\n    if (globalConfig.hasPermissionToSetPaths(updates)) {\n        globalConfig.setPathsAsync(updates);\n    }\n    // The updates are now applied within your block (eg will be reflected in\n    // globalConfig) but are still being saved to Airtable servers (e.g. they\n    // may not be updated for other users yet)\n}\n\nasync function applyUpdatesIfPossibleAsync() {\n    if (globalConfig.hasPermissionToSetPaths(updates)) {\n        await globalConfig.setPathsAsync(updates);\n    }\n    // globalConfig updates have been saved to Airtable servers.\n    alert('globalConfig has been updated');\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1265,
                                    "name": "setPathsAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Sets multiple values. Throws if any path or value is invalid.",
                                        "text": "This action is asynchronous: `await` the returned promise if you wish to wait for the\nupdates to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in\n{@link GlobalConfig} before the promise resolves.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {globalConfig} from '@airtable/blocks';\n\nconst updates = [\n    {path: ['topLevelKey1', 'nestedKey1'], value: 'foo'},\n    {path: ['topLevelKey2', 'nestedKey2'], value: 'bar'},\n];\n\nfunction applyUpdatesIfPossible() {\n    if (globalConfig.hasPermissionToSetPaths(updates)) {\n        globalConfig.setPathsAsync(updates);\n    }\n    // The updates are now applied within your block (eg will be reflected in\n    // globalConfig) but are still being saved to Airtable servers (e.g. they\n    // may not be updated for other users yet)\n}\n\nasync function applyUpdatesIfPossibleAsync() {\n    if (globalConfig.hasPermissionToSetPaths(updates)) {\n        await globalConfig.setPathsAsync(updates);\n    }\n    // globalConfig updates have been saved to Airtable servers.\n    alert('globalConfig has been updated');\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1266,
                                            "name": "updates",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The paths and values to set."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "Array",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "GlobalConfigUpdate",
                                                        "id": 943
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/global_config.ts",
                                    "line": 346,
                                    "character": 23
                                }
                            ]
                        },
                        {
                            "id": 1296,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatch keys watched with `.watch`.",
                                "text": "Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"
                            },
                            "signatures": [
                                {
                                    "id": 1297,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatch keys watched with `.watch`.",
                                        "text": "Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 1298,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to unwatch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableGlobalConfigKey",
                                                        "id": 1310
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableGlobalConfigKey",
                                                                "id": 1310
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 1299,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the function passed to `.watch` for these keys"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 1300,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 1301,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 1302,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 1303,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableGlobalConfigKey",
                                                                        "id": 1310
                                                                    }
                                                                },
                                                                {
                                                                    "id": 1304,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 113,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 1305,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the context that was passed to `.watch` for this `callback`\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableGlobalConfigKey",
                                                "id": 1310
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 1060
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 111,
                                    "character": 11
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 1060
                            }
                        },
                        {
                            "id": 1286,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get notified of changes to the model.",
                                "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"
                            },
                            "signatures": [
                                {
                                    "id": 1287,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get notified of changes to the model.",
                                        "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 1288,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to watch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableGlobalConfigKey",
                                                        "id": 1310
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableGlobalConfigKey",
                                                                "id": 1310
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 1289,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "a function to call when those keys change"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 1290,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 1291,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 1292,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 1293,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableGlobalConfigKey",
                                                                        "id": 1310
                                                                    }
                                                                },
                                                                {
                                                                    "id": 1294,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 66,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 1295,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "an optional context for `this` in `callback`.\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableGlobalConfigKey",
                                                "id": 1310
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 1050
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 64,
                                    "character": 9
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 1050
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [1246, 1258, 1243, 1250, 1261, 1254, 1264, 1296, 1286]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/global_config.ts",
                            "line": 52,
                            "character": 18
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Watchable",
                            "id": 1026,
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "WatchableGlobalConfigKey",
                                    "id": 1310
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 1310,
                    "name": "WatchableGlobalConfigKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "You can watch any top-level key in global config. Use '*' to watch every change."
                    },
                    "sources": [
                        {
                            "fileName": "src/global_config.ts",
                            "line": 22,
                            "character": 29
                        }
                    ],
                    "type": {
                        "type": "intrinsic",
                        "name": "string"
                    }
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [1221]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [1310]
                }
            ],
            "sources": [
                {
                    "fileName": "src/global_config.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 968,
            "name": "@airtable/blocks: mutations",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/types/mutations.ts",
            "comment": {},
            "children": [
                {
                    "id": 1014,
                    "name": "SuccessfulPermissionCheckResult",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 1015,
                            "name": "hasPermission",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/types/mutations.ts",
                                    "line": 105,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "true"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [1015]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/types/mutations.ts",
                            "line": 103,
                            "character": 48
                        }
                    ]
                },
                {
                    "id": 1016,
                    "name": "UnsuccessfulPermissionCheckResult",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 1017,
                            "name": "hasPermission",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/types/mutations.ts",
                                    "line": 111,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "false"
                            }
                        },
                        {
                            "id": 1018,
                            "name": "reasonDisplayString",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A string explaining why the action is not permitted. These strings should only be used to\nshow to the user; you should not rely on the format of the string as it may change without\nnotice."
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/mutations.ts",
                                    "line": 117,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [1017, 1018]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/types/mutations.ts",
                            "line": 109,
                            "character": 50
                        }
                    ]
                },
                {
                    "id": 1024,
                    "name": "PermissionCheckResult",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Indicates whether the user has permission to perform a particular action, and if not, why."
                    },
                    "sources": [
                        {
                            "fileName": "src/types/mutations.ts",
                            "line": 121,
                            "character": 33
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "reference",
                                "name": "SuccessfulPermissionCheckResult",
                                "id": 1014
                            },
                            {
                                "type": "reference",
                                "name": "UnsuccessfulPermissionCheckResult",
                                "id": 1016
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [1014, 1016]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [1024]
                }
            ],
            "sources": [
                {
                    "fileName": "src/types/mutations.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 14538,
            "name": "@airtable/blocks: settingsButton",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/settings_button.ts",
            "comment": {},
            "children": [
                {
                    "id": 14539,
                    "name": "SettingsButton",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Interface to the settings button that lives outside the block's viewport.",
                        "text": "The {@link useSettingsButton} hook is the recommend way to watch the settings\nbutton, but you can also use it directly as per below example.\n\nWatch `click` to handle click events on the button.\n",
                        "tags": [
                            {
                                "tag": "alias",
                                "text": "settingsButton"
                            },
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {settingsButton} from '@airtable/blocks';\n// Button is not visible by default\nsettingsButton.show();\nsettingsButton.watch('click', () => {\n    alert('Clicked!');\n})\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "models/SettingsButton\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 14549,
                            "name": "isVisible",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Whether the settings button is being shown.\nCan be watched."
                            },
                            "getSignature": [
                                {
                                    "id": 14550,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Whether the settings button is being shown.\nCan be watched."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/settings_button.ts",
                                    "line": 61,
                                    "character": 17
                                }
                            ]
                        },
                        {
                            "id": 14553,
                            "name": "hide",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Hide the settings button.",
                                "text": "Note: A count of calls to `show()` and `hide()` is maintained internally. The button will\nstay visible if there are more calls to `show()` than `hide()`.\n"
                            },
                            "signatures": [
                                {
                                    "id": 14554,
                                    "name": "hide",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Hide the settings button.",
                                        "text": "Note: A count of calls to `show()` and `hide()` is maintained internally. The button will\nstay visible if there are more calls to `show()` than `hide()`.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "void"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/settings_button.ts",
                                    "line": 84,
                                    "character": 8
                                }
                            ]
                        },
                        {
                            "id": 14551,
                            "name": "show",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Show the settings button."
                            },
                            "signatures": [
                                {
                                    "id": 14552,
                                    "name": "show",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Show the settings button."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "void"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/settings_button.ts",
                                    "line": 68,
                                    "character": 8
                                }
                            ]
                        },
                        {
                            "id": 14583,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatch keys watched with `.watch`.",
                                "text": "Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"
                            },
                            "signatures": [
                                {
                                    "id": 14584,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatch keys watched with `.watch`.",
                                        "text": "Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 14585,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to unwatch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableSettingsButtonKey",
                                                        "id": 14599
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableSettingsButtonKey",
                                                                "id": 14599
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 14586,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the function passed to `.watch` for these keys"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 14587,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 14588,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 14589,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 14590,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableSettingsButtonKey",
                                                                        "id": 14599
                                                                    }
                                                                },
                                                                {
                                                                    "id": 14591,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 113,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 14592,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the context that was passed to `.watch` for this `callback`\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableSettingsButtonKey",
                                                "id": 14599
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 1060
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 111,
                                    "character": 11
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 1060
                            }
                        },
                        {
                            "id": 14573,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get notified of changes to the model.",
                                "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"
                            },
                            "signatures": [
                                {
                                    "id": 14574,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get notified of changes to the model.",
                                        "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 14575,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to watch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableSettingsButtonKey",
                                                        "id": 14599
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableSettingsButtonKey",
                                                                "id": 14599
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 14576,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "a function to call when those keys change"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 14577,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 14578,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 14579,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 14580,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableSettingsButtonKey",
                                                                        "id": 14599
                                                                    }
                                                                },
                                                                {
                                                                    "id": 14581,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 66,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 14582,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "an optional context for `this` in `callback`.\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableSettingsButtonKey",
                                                "id": 14599
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 1050
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 64,
                                    "character": 9
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 1050
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [14549]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [14553, 14551, 14583, 14573]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/settings_button.ts",
                            "line": 38,
                            "character": 20
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Watchable",
                            "id": 1026,
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "WatchableSettingsButtonKey",
                                    "id": 14599
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 14599,
                    "name": "WatchableSettingsButtonKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "A watchable key in {@link SettingsButton}.\n- `isVisible`\n- `click`"
                    },
                    "sources": [
                        {
                            "fileName": "src/settings_button.ts",
                            "line": 16,
                            "character": 31
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "isVisible"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "click"
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [14539]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [14599]
                }
            ],
            "sources": [
                {
                    "fileName": "src/settings_button.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 964,
            "name": "@airtable/blocks: viewport",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/emma/h/source/blocks-sdk/packages/sdk/src/types/viewport.ts",
            "comment": {},
            "children": [
                {
                    "id": 2937,
                    "name": "Viewport",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Information about the current viewport",
                        "text": "The {@link useViewport} hook is the recommend way to watch for viewport changes\nbutton, but you can also use it directly.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {viewport} from '@airtable/blocks';\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "models/Viewport\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 2970,
                            "name": "isFullscreen",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the block is fullscreen, `false` otherwise."
                            },
                            "getSignature": [
                                {
                                    "id": 2971,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the block is fullscreen, `false` otherwise."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/viewport.ts",
                                    "line": 258,
                                    "character": 20
                                }
                            ]
                        },
                        {
                            "id": 2968,
                            "name": "isSmallerThanMinSize",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the block frame is smaller than `minSize`, `false` otherwise."
                            },
                            "getSignature": [
                                {
                                    "id": 2969,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the block frame is smaller than `minSize`, `false` otherwise."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/viewport.ts",
                                    "line": 249,
                                    "character": 28
                                }
                            ]
                        },
                        {
                            "id": 2958,
                            "name": "maxFullscreenSize",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The maximum dimensions of the block when it is in\nfullscreen mode. Returns the smallest set of dimensions added with\n{@link addMaxFullscreenSize}.",
                                "text": "If `width` or `height` is null, it means there is\nno max size constraint on that dimension. If `maxFullscreenSize` would be\nsmaller than {@link minSize}, it is constrained to be at least `minSize`.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 2959,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The maximum dimensions of the block when it is in\nfullscreen mode. Returns the smallest set of dimensions added with\n{@link addMaxFullscreenSize}.",
                                        "text": "If `width` or `height` is null, it means there is\nno max size constraint on that dimension. If `maxFullscreenSize` would be\nsmaller than {@link minSize}, it is constrained to be at least `minSize`.\n"
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "ViewportSizeConstraint",
                                        "id": 965
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/viewport.ts",
                                    "line": 124,
                                    "character": 25
                                }
                            ]
                        },
                        {
                            "id": 2963,
                            "name": "minSize",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The minimum dimensions of the block - if the viewport gets smaller than this\nsize, an overlay will be shown asking the user to resize the block to be bigger.",
                                "text": "The largest set of dimensions added with addMinSize. If `width` or `height` is null, it means\nthere is no minSize constraint on that dimension.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 2964,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The minimum dimensions of the block - if the viewport gets smaller than this\nsize, an overlay will be shown asking the user to resize the block to be bigger.",
                                        "text": "The largest set of dimensions added with addMinSize. If `width` or `height` is null, it means\nthere is no minSize constraint on that dimension.\n"
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "ViewportSizeConstraint",
                                        "id": 965
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/viewport.ts",
                                    "line": 188,
                                    "character": 15
                                }
                            ]
                        },
                        {
                            "id": 2972,
                            "name": "size",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The current size of the block frame.",
                                "text": "Can be watched.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 2973,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The current size of the block frame.",
                                        "text": "Can be watched.\n"
                                    },
                                    "type": {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 2974,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {
                                                "isExported": true
                                            },
                                            "children": [
                                                {
                                                    "id": 2976,
                                                    "name": "height",
                                                    "kind": 32,
                                                    "kindString": "Variable",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "sources": [
                                                        {
                                                            "fileName": "src/viewport.ts",
                                                            "line": 266,
                                                            "character": 38
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "number"
                                                    }
                                                },
                                                {
                                                    "id": 2975,
                                                    "name": "width",
                                                    "kind": 32,
                                                    "kindString": "Variable",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "sources": [
                                                        {
                                                            "fileName": "src/viewport.ts",
                                                            "line": 266,
                                                            "character": 22
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "number"
                                                    }
                                                }
                                            ],
                                            "groups": [
                                                {
                                                    "title": "Variables",
                                                    "kind": 32,
                                                    "children": [2976, 2975]
                                                }
                                            ],
                                            "sources": [
                                                {
                                                    "fileName": "src/viewport.ts",
                                                    "line": 266,
                                                    "character": 15
                                                }
                                            ]
                                        }
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/viewport.ts",
                                    "line": 266,
                                    "character": 12
                                }
                            ]
                        },
                        {
                            "id": 2960,
                            "name": "addMaxFullscreenSize",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Add a maximum fullscreen size constraint. Use `.maxFullscreenSize`` to get\nthe aggregate of all added constraints.",
                                "text": "Returns a function that can be called to remove the fullscreen size constraint that was added.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2961,
                                    "name": "addMaxFullscreenSize",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Add a maximum fullscreen size constraint. Use `.maxFullscreenSize`` to get\nthe aggregate of all added constraints.",
                                        "text": "Returns a function that can be called to remove the fullscreen size constraint that was added.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2962,
                                            "name": "sizeConstraint",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The width and height constraints to add. Both\n`width` and `height` are optional - if either is set to null, that means\nthere is no max size in that dimension.\n"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "Partial",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "ViewportSizeConstraint",
                                                        "id": 965
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "UnsetFn",
                                        "id": 3018
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/viewport.ts",
                                    "line": 160,
                                    "character": 24
                                }
                            ]
                        },
                        {
                            "id": 2965,
                            "name": "addMinSize",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Add a minimum frame size constraint. Use `.minSize`` to get the aggregate\nof all added constraints.",
                                "text": "Upon adding a constraint, if the block is focused and the frame is smaller than the\nminimum size, the block will enter fullscreen mode.\n\nReturns a function that can be called to remove the  size constraint that was added.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2966,
                                    "name": "addMinSize",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Add a minimum frame size constraint. Use `.minSize`` to get the aggregate\nof all added constraints.",
                                        "text": "Upon adding a constraint, if the block is focused and the frame is smaller than the\nminimum size, the block will enter fullscreen mode.\n\nReturns a function that can be called to remove the  size constraint that was added.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2967,
                                            "name": "sizeConstraint",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The width and height constraints to add. Both `width`\nand `height` are optional - if either is set to null, that means there is\nno min size in that dimension.\n"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "Partial",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "ViewportSizeConstraint",
                                                        "id": 965
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "UnsetFn",
                                        "id": 3018
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/viewport.ts",
                                    "line": 215,
                                    "character": 14
                                }
                            ]
                        },
                        {
                            "id": 2954,
                            "name": "enterFullscreenIfPossible",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Request to enter fullscreen mode.",
                                "text": "May fail if another block is fullscreen or this block doesn't have\npermission to fullscreen itself. Watch `isFullscreen` to know if the\nrequest succeeded.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2955,
                                    "name": "enterFullscreenIfPossible",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Request to enter fullscreen mode.",
                                        "text": "May fail if another block is fullscreen or this block doesn't have\npermission to fullscreen itself. Watch `isFullscreen` to know if the\nrequest succeeded.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "void"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/viewport.ts",
                                    "line": 107,
                                    "character": 29
                                }
                            ]
                        },
                        {
                            "id": 2956,
                            "name": "exitFullscreen",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Request to exit fullscreen mode"
                            },
                            "signatures": [
                                {
                                    "id": 2957,
                                    "name": "exitFullscreen",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Request to exit fullscreen mode"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "void"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/viewport.ts",
                                    "line": 111,
                                    "character": 18
                                }
                            ]
                        },
                        {
                            "id": 2982,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatch keys watched with `.watch`.",
                                "text": "Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched\n"
                            },
                            "signatures": [
                                {
                                    "id": 2983,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatch keys watched with `.watch`.",
                                        "text": "Should be called with the same arguments given to `.watch`.\n\nReturns the array of keys that were unwatched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2984,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to unwatch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableViewportKey",
                                                        "id": 3017
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableViewportKey",
                                                                "id": 3017
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2985,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the function passed to `.watch` for these keys"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 2986,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the context that was passed to `.watch` for this `callback`\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableViewportKey",
                                                "id": 3017
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 1060
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/viewport.ts",
                                    "line": 316,
                                    "character": 11
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 1060
                            }
                        },
                        {
                            "id": 2977,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get notified of changes to the viewport.",
                                "text": "Watchable keys are:\n- `'isFullscreen'`\n- `'size'`\n- `'minSize'`\n- `'maxFullscreenSize'`\n\nEvery call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2978,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get notified of changes to the viewport.",
                                        "text": "Watchable keys are:\n- `'isFullscreen'`\n- `'size'`\n- `'minSize'`\n- `'maxFullscreenSize'`\n\nEvery call to `.watch` should have a matching call to `.unwatch`.\n\nReturns the array of keys that were watched.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2979,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to watch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableViewportKey",
                                                        "id": 3017
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableViewportKey",
                                                                "id": 3017
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2980,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "a function to call when those keys change"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 2981,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "an optional context for `this` in `callback`.\n"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableViewportKey",
                                                "id": 3017
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 1050
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/viewport.ts",
                                    "line": 289,
                                    "character": 9
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 1050
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [2970, 2968, 2958, 2963, 2972]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [2960, 2965, 2954, 2956, 2982, 2977]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/viewport.ts",
                            "line": 54,
                            "character": 14
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Watchable",
                            "id": 1026,
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "WatchableViewportKey",
                                    "id": 3017
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 965,
                    "name": "ViewportSizeConstraint",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A constraint on the size of the Block's viewport"
                    },
                    "children": [
                        {
                            "id": 967,
                            "name": "height",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Height constraint in pixels, or null if no constraint"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/viewport.ts",
                                    "line": 8,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 966,
                            "name": "width",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Width constraint in pixels, or null if no constraint"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/viewport.ts",
                                    "line": 6,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [967, 966]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/types/viewport.ts",
                            "line": 4,
                            "character": 39
                        }
                    ]
                },
                {
                    "id": 3018,
                    "name": "UnsetFn",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/viewport.ts",
                            "line": 24,
                            "character": 12
                        }
                    ],
                    "type": {
                        "type": "reflection",
                        "declaration": {
                            "id": 3019,
                            "name": "__type",
                            "kind": 65536,
                            "kindString": "Type literal",
                            "flags": {},
                            "signatures": [
                                {
                                    "id": 3020,
                                    "name": "__call",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "void"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/viewport.ts",
                                    "line": 24,
                                    "character": 14
                                }
                            ]
                        }
                    }
                },
                {
                    "id": 3017,
                    "name": "WatchableViewportKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Watchable keys in {@link Viewport}.\n- `isFullscreen`\n- `size`\n- `minSize`\n- `maxFullscreenSize`"
                    },
                    "sources": [
                        {
                            "fileName": "src/viewport.ts",
                            "line": 22,
                            "character": 25
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "isFullscreen"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "size"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "minSize"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "maxFullscreenSize"
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [2937]
                },
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [965]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [3018, 3017]
                }
            ],
            "sources": [
                {
                    "fileName": "src/types/viewport.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        }
    ],
    "groups": [
        {
            "title": "External modules",
            "kind": 1,
            "children": [
                10480,
                1025,
                584,
                691,
                2826,
                590,
                638,
                1514,
                1643,
                2671,
                665,
                646,
                721,
                8146,
                7534,
                9096,
                7639,
                8126,
                7710,
                7769,
                8134,
                7837,
                7521,
                7920,
                8021,
                10977,
                11243,
                11953,
                10290,
                11420,
                11350,
                11490,
                13028,
                10612,
                9607,
                14316,
                13360,
                10495,
                9995,
                14226,
                13995,
                10657,
                14393,
                10768,
                11870,
                12116,
                12363,
                9057,
                12671,
                13622,
                9407,
                11004,
                14114,
                11108,
                9801,
                13883,
                559,
                504,
                10458,
                10465,
                10472,
                14489,
                11347,
                14533,
                12076,
                14496,
                14523,
                14526,
                12102,
                14530,
                3198,
                3216,
                1220,
                968,
                14538,
                964
            ]
        }
    ]
}
