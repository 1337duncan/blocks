{
    "id": 0,
    "name": "@airtable/blocks",
    "kind": 0,
    "flags": {},
    "children": [
        {
            "id": 732,
            "name": "@airtable/blocks/models: Abstract models",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/watchable.ts",
            "comment": {},
            "children": [
                {
                    "id": 839,
                    "name": "AbstractModel",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Abstract superclass for all models. You won't use this class directly.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "models/advanced/AbstractModel\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 840,
                            "name": "DataType",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 841,
                            "name": "WatchableKey",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {},
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        }
                    ],
                    "children": [
                        {
                            "id": 852,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 853,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ]
                        },
                        {
                            "id": 858,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 859,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ]
                        },
                        {
                            "id": 864,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "A string representation of the model for use in debugging.\n"
                            },
                            "signatures": [
                                {
                                    "id": 865,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "A string representation of the model for use in debugging.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ]
                        },
                        {
                            "id": 892,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatch keys watched with `.watch`.",
                                "text": "Should be called with the same arguments given to `.watch`.\n",
                                "returns": "the array of keys that were unwatched\n"
                            },
                            "signatures": [
                                {
                                    "id": 893,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatch keys watched with `.watch`.",
                                        "text": "Should be called with the same arguments given to `.watch`.\n",
                                        "returns": "the array of keys that were unwatched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 894,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to unwatch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "typeParameter",
                                                        "name": "WatchableKey",
                                                        "constraint": {
                                                            "type": "intrinsic",
                                                            "name": "string"
                                                        }
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "typeParameter",
                                                                "name": "WatchableKey",
                                                                "constraint": {
                                                                    "type": "intrinsic",
                                                                    "name": "string"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 895,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the function passed to `.watch` for these keys"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 896,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 897,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 898,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 899,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "typeParameter",
                                                                        "name": "WatchableKey",
                                                                        "constraint": {
                                                                            "type": "intrinsic",
                                                                            "name": "string"
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    "id": 900,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 111,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 901,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the context that was passed to `.watch` for this `callback`"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "typeParameter",
                                                "name": "WatchableKey",
                                                "constraint": {
                                                    "type": "intrinsic",
                                                    "name": "string"
                                                }
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 767
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 109,
                                    "character": 11
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 767
                            }
                        },
                        {
                            "id": 882,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get notified of changes to the model.",
                                "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n",
                                "returns": "the array of keys that were watched\n"
                            },
                            "signatures": [
                                {
                                    "id": 883,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get notified of changes to the model.",
                                        "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n",
                                        "returns": "the array of keys that were watched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 884,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to watch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "typeParameter",
                                                        "name": "WatchableKey",
                                                        "constraint": {
                                                            "type": "intrinsic",
                                                            "name": "string"
                                                        }
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "typeParameter",
                                                                "name": "WatchableKey",
                                                                "constraint": {
                                                                    "type": "intrinsic",
                                                                    "name": "string"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 885,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "a function to call when those keys change"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 886,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 887,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 888,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 889,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "typeParameter",
                                                                        "name": "WatchableKey",
                                                                        "constraint": {
                                                                            "type": "intrinsic",
                                                                            "name": "string"
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    "id": 890,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 65,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 891,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "an optional context for `this` in `callback`."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "typeParameter",
                                                "name": "WatchableKey",
                                                "constraint": {
                                                    "type": "intrinsic",
                                                    "name": "string"
                                                }
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 757
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 63,
                                    "character": 9
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 757
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [852, 858]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [864, 892, 882]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/abstract_model.ts",
                            "line": 11,
                            "character": 19
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Watchable",
                            "id": 733,
                            "typeArguments": [
                                {
                                    "type": "typeParameter",
                                    "name": "WatchableKey",
                                    "constraint": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ]
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AbstractModelWithAsyncData",
                            "id": 907
                        },
                        {
                            "type": "reference",
                            "name": "Record",
                            "id": 1779
                        },
                        {
                            "type": "reference",
                            "name": "Field",
                            "id": 1927
                        },
                        {
                            "type": "reference",
                            "name": "View",
                            "id": 2280
                        },
                        {
                            "type": "reference",
                            "name": "Table",
                            "id": 2370
                        },
                        {
                            "type": "reference",
                            "name": "Base",
                            "id": 2597
                        },
                        {
                            "type": "reference",
                            "name": "Session",
                            "id": 2724
                        }
                    ]
                },
                {
                    "id": 907,
                    "name": "AbstractModelWithAsyncData",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Abstract superclass for all block SDK models that need to fetch async data.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "models/advanced/AbstractModelWithAsyncData"
                            },
                            {
                                "tag": "grouppath",
                                "text": "models/advanced/AbstractModel\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 908,
                            "name": "DataType",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 909,
                            "name": "WatchableKey",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {},
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        }
                    ],
                    "children": [
                        {
                            "id": 950,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 951,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.id",
                                        "id": 852
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.id",
                                "id": 852
                            }
                        },
                        {
                            "id": 932,
                            "name": "isDataLoaded",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "getSignature": [
                                {
                                    "id": 933,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 92,
                                    "character": 20
                                }
                            ]
                        },
                        {
                            "id": 956,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 957,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.isDeleted",
                                        "id": 858
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.isDeleted",
                                "id": 858
                            }
                        },
                        {
                            "id": 940,
                            "name": "loadDataAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Will cause all the async data to be fetched and retained. Every call to\n`loadDataAsync` should have a matching call to `unloadData`.",
                                "text": "Returns a Promise that will resolve once the data is loaded.\n"
                            },
                            "signatures": [
                                {
                                    "id": 941,
                                    "name": "loadDataAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Will cause all the async data to be fetched and retained. Every call to\n`loadDataAsync` should have a matching call to `unloadData`.",
                                        "text": "Returns a Promise that will resolve once the data is loaded.\n"
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 122,
                                    "character": 23
                                }
                            ]
                        },
                        {
                            "id": 962,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "A string representation of the model for use in debugging.\n"
                            },
                            "signatures": [
                                {
                                    "id": 963,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "A string representation of the model for use in debugging.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.toString",
                                        "id": 864
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.toString",
                                "id": 864
                            }
                        },
                        {
                            "id": 942,
                            "name": "unloadData",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "signatures": [
                                {
                                    "id": 943,
                                    "name": "unloadData",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "void"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 156,
                                    "character": 14
                                }
                            ]
                        },
                        {
                            "id": 927,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatching a key that needs to load data asynchronously will automatically\ncause the data to be released. Once the data is available, the callback\nwill be called.",
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": "\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 928,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatching a key that needs to load data asynchronously will automatically\ncause the data to be released. Once the data is available, the callback\nwill be called.",
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": "\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 929,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "typeParameter",
                                                        "name": "WatchableKey",
                                                        "constraint": {
                                                            "type": "intrinsic",
                                                            "name": "string"
                                                        }
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "typeParameter",
                                                                "name": "WatchableKey",
                                                                "constraint": {
                                                                    "type": "intrinsic",
                                                                    "name": "string"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 930,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 931,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "typeParameter",
                                                "name": "WatchableKey",
                                                "constraint": {
                                                    "type": "intrinsic",
                                                    "name": "string"
                                                }
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 767
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 74,
                                    "character": 11
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 767
                            }
                        },
                        {
                            "id": 922,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Watching a key that needs to load data asynchronously will automatically\ncause the data to be fetched. Once the data is available, the callback\nwill be called.",
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": "\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 923,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Watching a key that needs to load data asynchronously will automatically\ncause the data to be fetched. Once the data is available, the callback\nwill be called.",
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": "\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 924,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "typeParameter",
                                                        "name": "WatchableKey",
                                                        "constraint": {
                                                            "type": "intrinsic",
                                                            "name": "string"
                                                        }
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "typeParameter",
                                                                "name": "WatchableKey",
                                                                "constraint": {
                                                                    "type": "intrinsic",
                                                                    "name": "string"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 925,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 926,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "typeParameter",
                                                "name": "WatchableKey",
                                                "constraint": {
                                                    "type": "intrinsic",
                                                    "name": "string"
                                                }
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 757
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 49,
                                    "character": 9
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 757
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [950, 932, 956]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [940, 962, 942, 927, 922]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/abstract_model_with_async_data.ts",
                            "line": 13,
                            "character": 32
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AbstractModel",
                            "id": 839,
                            "typeArguments": [
                                {
                                    "type": "typeParameter",
                                    "name": "DataType"
                                },
                                {
                                    "type": "typeParameter",
                                    "name": "WatchableKey",
                                    "constraint": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ]
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "RecordQueryResult",
                            "id": 2046
                        },
                        {
                            "type": "reference",
                            "name": "ViewMetadataQueryResult",
                            "id": 2181
                        },
                        {
                            "type": "reference",
                            "name": "Cursor",
                            "id": 2867
                        }
                    ]
                },
                {
                    "id": 733,
                    "name": "Watchable",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Abstract superclass for watchable models. All watchable models expose `watch`\nand `unwatch` methods that allow consumers to subscribe to changes to that model.",
                        "text": "This class should not be used directly.\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "models/advanced/Watchable\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 734,
                            "name": "WatchableKey",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {},
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        }
                    ],
                    "children": [
                        {
                            "id": 767,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatch keys watched with `.watch`.",
                                "text": "Should be called with the same arguments given to `.watch`.\n",
                                "returns": "the array of keys that were unwatched\n"
                            },
                            "signatures": [
                                {
                                    "id": 768,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatch keys watched with `.watch`.",
                                        "text": "Should be called with the same arguments given to `.watch`.\n",
                                        "returns": "the array of keys that were unwatched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 769,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to unwatch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "typeParameter",
                                                        "name": "WatchableKey",
                                                        "constraint": {
                                                            "type": "intrinsic",
                                                            "name": "string"
                                                        }
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "typeParameter",
                                                                "name": "WatchableKey",
                                                                "constraint": {
                                                                    "type": "intrinsic",
                                                                    "name": "string"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 770,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the function passed to `.watch` for these keys"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 771,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 772,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 773,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 774,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "typeParameter",
                                                                        "name": "WatchableKey",
                                                                        "constraint": {
                                                                            "type": "intrinsic",
                                                                            "name": "string"
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    "id": 775,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 111,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 776,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the context that was passed to `.watch` for this `callback`"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "typeParameter",
                                                "name": "WatchableKey",
                                                "constraint": {
                                                    "type": "intrinsic",
                                                    "name": "string"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 109,
                                    "character": 11
                                }
                            ]
                        },
                        {
                            "id": 757,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get notified of changes to the model.",
                                "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n",
                                "returns": "the array of keys that were watched\n"
                            },
                            "signatures": [
                                {
                                    "id": 758,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get notified of changes to the model.",
                                        "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n",
                                        "returns": "the array of keys that were watched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 759,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to watch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "typeParameter",
                                                        "name": "WatchableKey",
                                                        "constraint": {
                                                            "type": "intrinsic",
                                                            "name": "string"
                                                        }
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "typeParameter",
                                                                "name": "WatchableKey",
                                                                "constraint": {
                                                                    "type": "intrinsic",
                                                                    "name": "string"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 760,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "a function to call when those keys change"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 761,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 762,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 763,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 764,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "typeParameter",
                                                                        "name": "WatchableKey",
                                                                        "constraint": {
                                                                            "type": "intrinsic",
                                                                            "name": "string"
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    "id": 765,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 65,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 766,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "an optional context for `this` in `callback`."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "typeParameter",
                                                "name": "WatchableKey",
                                                "constraint": {
                                                    "type": "intrinsic",
                                                    "name": "string"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 63,
                                    "character": 9
                                }
                            ]
                        }
                    ],
                    "groups": [
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [767, 757]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/watchable.ts",
                            "line": 13,
                            "character": 15
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AbstractModel",
                            "id": 839
                        },
                        {
                            "type": "reference",
                            "name": "Viewport",
                            "id": 2967
                        },
                        {
                            "type": "reference",
                            "name": "SettingsButton",
                            "id": 14445
                        },
                        {
                            "type": "reference",
                            "name": "GlobalConfig",
                            "id": 14805
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [839, 907, 733]
                }
            ],
            "sources": [
                {
                    "fileName": "src/watchable.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 584,
            "name": "@airtable/blocks/models: Aggregators",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/types/aggregators.ts",
            "comment": {},
            "children": [
                {
                    "id": 1899,
                    "name": "Aggregator",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Aggregators can be used to compute aggregates for cell values.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {aggregators} from '@airtable/blocks/models';\n\n// To get a list of aggregators supported for a specific field:\nconst fieldAggregators = myField.availableAggregators;\n\n// To compute the total attachment size of an attachment field:\nconst aggregator = aggregators.totalAttachmentSize;\nconst value = aggregator.aggregate(myRecords, myAttachmentField);\nconst valueAsString = aggregate.aggregateToString(myRecords, myAttachmentField);\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "models/advanced/Aggregator\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 1901,
                            "name": "displayName",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A user friendly name for this aggregator that can be displayed to users."
                            },
                            "sources": [
                                {
                                    "fileName": "src/models/aggregators.ts",
                                    "line": 30,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        },
                        {
                            "id": 1900,
                            "name": "key",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A unique key for this aggregator that can be used to identify it in code."
                            },
                            "sources": [
                                {
                                    "fileName": "src/models/aggregators.ts",
                                    "line": 28,
                                    "character": 7
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "AggregatorKey",
                                "id": 585
                            }
                        },
                        {
                            "id": 1902,
                            "name": "shortDisplayName",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A short user friendly name for this aggregator that can be displayed to users."
                            },
                            "sources": [
                                {
                                    "fileName": "src/models/aggregators.ts",
                                    "line": 32,
                                    "character": 20
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        },
                        {
                            "id": 1903,
                            "name": "aggregate",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Aggregates the value of `field` in each of `records` to produce a single value."
                            },
                            "signatures": [
                                {
                                    "id": 1904,
                                    "name": "aggregate",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Aggregates the value of `field` in each of `records` to produce a single value."
                                    },
                                    "parameters": [
                                        {
                                            "id": 1905,
                                            "name": "records",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "Array",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 1779
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 1906,
                                            "name": "field",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "Field",
                                                "id": 1927
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "unknown"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/aggregators.ts",
                                    "line": 38,
                                    "character": 13
                                }
                            ]
                        },
                        {
                            "id": 1907,
                            "name": "aggregateToString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Aggregates the value of `field` in each of `records` to produce a single value, formatted as a string."
                            },
                            "signatures": [
                                {
                                    "id": 1908,
                                    "name": "aggregateToString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Aggregates the value of `field` in each of `records` to produce a single value, formatted as a string."
                                    },
                                    "parameters": [
                                        {
                                            "id": 1909,
                                            "name": "records",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "Array",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 1779
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 1910,
                                            "name": "field",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "Field",
                                                "id": 1927
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/aggregators.ts",
                                    "line": 40,
                                    "character": 21
                                }
                            ]
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [1901, 1900, 1902]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [1903, 1907]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/aggregators.ts",
                            "line": 26,
                            "character": 27
                        }
                    ]
                },
                {
                    "id": 585,
                    "name": "AggregatorKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/types/aggregators.ts",
                            "line": 4,
                            "character": 25
                        }
                    ],
                    "type": {
                        "type": "intrinsic",
                        "name": "string"
                    }
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [1899]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [585]
                }
            ],
            "sources": [
                {
                    "fileName": "src/types/aggregators.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 692,
            "name": "@airtable/blocks/models: Base",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/types/collaborator.ts",
            "comment": {},
            "children": [
                {
                    "id": 2597,
                    "name": "Base",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Model class representing a base.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {base} from '@airtable/blocks';\n\nconsole.log('The name of your base is', base.name);\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "models/Base\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 2618,
                            "name": "activeCollaborators",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The users who have access to this base.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {base} from '@airtable/blocks';\nconsole.log(base.activeCollaborators[0].email);\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 2619,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The users who have access to this base.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {base} from '@airtable/blocks';\nconsole.log(base.activeCollaborators[0].email);\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "CollaboratorData",
                                                "id": 693
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/base.ts",
                                    "line": 134,
                                    "character": 27
                                }
                            ]
                        },
                        {
                            "id": 2656,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 2657,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.id",
                                        "id": 852
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.id",
                                "id": 852
                            }
                        },
                        {
                            "id": 2660,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 2661,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.isDeleted",
                                        "id": 858
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.isDeleted",
                                "id": 858
                            }
                        },
                        {
                            "id": 2614,
                            "name": "name",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The name of the base.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {base} from '@airtable/blocks';\nconsole.log('The name of your base is', base.name);\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 2615,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The name of the base.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {base} from '@airtable/blocks';\nconsole.log('The name of your base is', base.name);\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/base.ts",
                                    "line": 98,
                                    "character": 12
                                }
                            ]
                        },
                        {
                            "id": 2616,
                            "name": "tables",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The tables in this base. Can be watched to know when tables are created, deleted, or reordered in the base.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {base} from '@airtable/blocks';\nconsole.log(`You have ${base.tables.length} tables`);\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 2617,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The tables in this base. Can be watched to know when tables are created, deleted, or reordered in the base.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {base} from '@airtable/blocks';\nconsole.log(`You have ${base.tables.length} tables`);\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Table",
                                                "id": 2370
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/base.ts",
                                    "line": 110,
                                    "character": 14
                                }
                            ]
                        },
                        {
                            "id": 2623,
                            "name": "getCollaboratorById",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "The user matching the given ID. Throws if that user does not exist\nor does not have access to this base. Use {@link getCollaboratorByIdIfExists}\ninstead if you are unsure whether a collaborator with the given ID exists\nand has access to this base.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2624,
                                    "name": "getCollaboratorById",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "The user matching the given ID. Throws if that user does not exist\nor does not have access to this base. Use {@link getCollaboratorByIdIfExists}\ninstead if you are unsure whether a collaborator with the given ID exists\nand has access to this base.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2625,
                                            "name": "collaboratorId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The ID of the user."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "UserId",
                                                "id": 698
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "CollaboratorData",
                                        "id": 693
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/base.ts",
                                    "line": 154,
                                    "character": 23
                                }
                            ]
                        },
                        {
                            "id": 2620,
                            "name": "getCollaboratorByIdIfExists",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "The user matching the given ID, or `null` if that user does not exist or does not have access to this base.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2621,
                                    "name": "getCollaboratorByIdIfExists",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "The user matching the given ID, or `null` if that user does not exist or does not have access to this base.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2622,
                                            "name": "collaboratorId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The ID of the user."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "UserId",
                                                "id": 698
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "CollaboratorData",
                                                "id": 693
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/base.ts",
                                    "line": 143,
                                    "character": 31
                                }
                            ]
                        },
                        {
                            "id": 2634,
                            "name": "getTableById",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "The table matching the given ID. Throws if that table does not exist in this base. Use {@link getTableByIdIfExists} instead if you are unsure whether a table exists with the given ID.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2635,
                                    "name": "getTableById",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "The table matching the given ID. Throws if that table does not exist in this base. Use {@link getTableByIdIfExists} instead if you are unsure whether a table exists with the given ID.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2636,
                                            "name": "tableId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The ID of the table."
                                            },
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Table",
                                        "id": 2370
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/base.ts",
                                    "line": 209,
                                    "character": 16
                                }
                            ]
                        },
                        {
                            "id": 2631,
                            "name": "getTableByIdIfExists",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "The table matching the given ID, or `null` if that table does not exist in this base.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2632,
                                    "name": "getTableByIdIfExists",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "The table matching the given ID, or `null` if that table does not exist in this base.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2633,
                                            "name": "tableId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The ID of the table."
                                            },
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Table",
                                                "id": 2370
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/base.ts",
                                    "line": 189,
                                    "character": 24
                                }
                            ]
                        },
                        {
                            "id": 2640,
                            "name": "getTableByName",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "The table matching the given name. Throws if no table exists with that name in this base. Use {@link getTableByNameIfExists} instead if you are unsure whether a table exists with the given name.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2641,
                                    "name": "getTableByName",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "The table matching the given name. Throws if no table exists with that name in this base. Use {@link getTableByNameIfExists} instead if you are unsure whether a table exists with the given name.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2642,
                                            "name": "tableName",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The name of the table you're looking for."
                                            },
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Table",
                                        "id": 2370
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/base.ts",
                                    "line": 232,
                                    "character": 18
                                }
                            ]
                        },
                        {
                            "id": 2637,
                            "name": "getTableByNameIfExists",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "The table matching the given name, or `null` if no table exists with that name in this base.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2638,
                                    "name": "getTableByNameIfExists",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "The table matching the given name, or `null` if no table exists with that name in this base.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2639,
                                            "name": "tableName",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The name of the table you're looking for."
                                            },
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Table",
                                                "id": 2370
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/base.ts",
                                    "line": 220,
                                    "character": 26
                                }
                            ]
                        },
                        {
                            "id": 2666,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "A string representation of the model for use in debugging.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2667,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "A string representation of the model for use in debugging.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.toString",
                                        "id": 864
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.toString",
                                "id": 864
                            }
                        },
                        {
                            "id": 2694,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatch keys watched with `.watch`.",
                                "text": "Should be called with the same arguments given to `.watch`.\n",
                                "returns": "the array of keys that were unwatched\n"
                            },
                            "signatures": [
                                {
                                    "id": 2695,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatch keys watched with `.watch`.",
                                        "text": "Should be called with the same arguments given to `.watch`.\n",
                                        "returns": "the array of keys that were unwatched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2696,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to unwatch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableBaseKey",
                                                        "id": 2710
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableBaseKey",
                                                                "id": 2710
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2697,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the function passed to `.watch` for these keys"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 2698,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 2699,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 2700,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2701,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableBaseKey",
                                                                        "id": 2710
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2702,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 111,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 2703,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the context that was passed to `.watch` for this `callback`"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableBaseKey",
                                                "id": 2710
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 767
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 109,
                                    "character": 11
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 767
                            }
                        },
                        {
                            "id": 2684,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get notified of changes to the model.",
                                "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n",
                                "returns": "the array of keys that were watched\n"
                            },
                            "signatures": [
                                {
                                    "id": 2685,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get notified of changes to the model.",
                                        "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n",
                                        "returns": "the array of keys that were watched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2686,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to watch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableBaseKey",
                                                        "id": 2710
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableBaseKey",
                                                                "id": 2710
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2687,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "a function to call when those keys change"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 2688,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 2689,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 2690,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2691,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableBaseKey",
                                                                        "id": 2710
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2692,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 65,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 2693,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "an optional context for `this` in `callback`."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableBaseKey",
                                                "id": 2710
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 757
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 63,
                                    "character": 9
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 757
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [2618, 2656, 2660, 2614, 2616]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [2623, 2620, 2634, 2631, 2640, 2637, 2666, 2694, 2684]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/base.ts",
                            "line": 60,
                            "character": 10
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AbstractModel",
                            "id": 839,
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "BaseData"
                                },
                                {
                                    "type": "reference",
                                    "name": "WatchableBaseKey",
                                    "id": 2710
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 693,
                    "name": "CollaboratorData",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "An object representing a collaborator. You should not create these objects from scratch, but\nshould instead grab them from base data."
                    },
                    "children": [
                        {
                            "id": 695,
                            "name": "email",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The email address of the collaborator."
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/collaborator.ts",
                                    "line": 14,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        },
                        {
                            "id": 694,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The user ID of the collaborator."
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/collaborator.ts",
                                    "line": 12,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "UserId",
                                "id": 698
                            }
                        },
                        {
                            "id": 696,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The name of the collaborator."
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/collaborator.ts",
                                    "line": 16,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 697,
                            "name": "profilePicUrl",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The URL of the collaborator's profile picture."
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/collaborator.ts",
                                    "line": 18,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [695, 694, 696, 697]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/types/collaborator.ts",
                            "line": 10,
                            "character": 33
                        }
                    ]
                },
                {
                    "id": 719,
                    "name": "BaseId",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/types/base.ts",
                            "line": 10,
                            "character": 18
                        }
                    ],
                    "type": {
                        "type": "intrinsic",
                        "name": "string"
                    }
                },
                {
                    "id": 698,
                    "name": "UserId",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/types/collaborator.ts",
                            "line": 4,
                            "character": 18
                        }
                    ],
                    "type": {
                        "type": "intrinsic",
                        "name": "string"
                    }
                },
                {
                    "id": 2710,
                    "name": "WatchableBaseKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Any key in base that can be watched:\n- `name`: the name of the base\n- `tables`: the order of tables in the base\n- `collaborators`: all the collaborators in the base\n- `schema`: the base schema (essentially everything except for record data)"
                    },
                    "sources": [
                        {
                            "fileName": "src/models/base.ts",
                            "line": 40,
                            "character": 21
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "name"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "tables"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "collaborators"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "schema"
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [2597]
                },
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [693]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [719, 698, 2710]
                }
            ],
            "sources": [
                {
                    "fileName": "src/types/collaborator.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 2862,
            "name": "@airtable/blocks/models: Cursor",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/models/cursor.ts",
            "comment": {},
            "children": [
                {
                    "id": 2867,
                    "name": "Cursor",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Contains information about the state of the user's current interactions in Airtable",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {cursor} from '@airtable/blocks';\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "models/Cursor\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 2894,
                            "name": "activeTableId",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The currently active table ID. Can be null when the active table has changed and is not yet\nloaded.",
                                "text": "Can be watched.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 2895,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The currently active table ID. Can be null when the active table has changed and is not yet\nloaded.",
                                        "text": "Can be watched.\n"
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "TableId",
                                                "id": 687
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/cursor.ts",
                                    "line": 147,
                                    "character": 21
                                }
                            ]
                        },
                        {
                            "id": 2896,
                            "name": "activeViewId",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The currently active view ID. This will always be a view belonging to `activeTableId`. Can be\nnull when the active view has changed and is not yet loaded.",
                                "text": "Can be watched.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 2897,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The currently active view ID. This will always be a view belonging to `activeTableId`. Can be\nnull when the active view has changed and is not yet loaded.",
                                        "text": "Can be watched.\n"
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "ViewId",
                                                "id": 664
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/cursor.ts",
                                    "line": 156,
                                    "character": 20
                                }
                            ]
                        },
                        {
                            "id": 2927,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 2928,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.id",
                                        "id": 852
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.id",
                                "id": 852
                            }
                        },
                        {
                            "id": 2919,
                            "name": "isDataLoaded",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "getSignature": [
                                {
                                    "id": 2920,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.isDataLoaded",
                                        "id": 932
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 92,
                                    "character": 20
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.isDataLoaded",
                                "id": 932
                            }
                        },
                        {
                            "id": 2931,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 2932,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.isDeleted",
                                        "id": 858
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.isDeleted",
                                "id": 858
                            }
                        },
                        {
                            "id": 2889,
                            "name": "selectedRecordIds",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The record IDs of all currently selected records, or an empty array if no records are selected.",
                                "text": "Can be watched.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 2890,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The record IDs of all currently selected records, or an empty array if no records are selected.",
                                        "text": "Can be watched.\n"
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "RecordId",
                                                "id": 645
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/cursor.ts",
                                    "line": 114,
                                    "character": 25
                                }
                            ]
                        },
                        {
                            "id": 2891,
                            "name": "isRecordSelected",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Checks whether a given record is selected.",
                                "returns": "`true` if the given record is selected, `false` otherwise.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2892,
                                    "name": "isRecordSelected",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Checks whether a given record is selected.",
                                        "returns": "`true` if the given record is selected, `false` otherwise.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2893,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The record or record ID to check for."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 1779
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "string"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/cursor.ts",
                                    "line": 128,
                                    "character": 20
                                }
                            ]
                        },
                        {
                            "id": 2921,
                            "name": "loadDataAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Will cause all the async data to be fetched and retained. Every call to\n`loadDataAsync` should have a matching call to `unloadData`.",
                                "text": "Returns a Promise that will resolve once the data is loaded.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2922,
                                    "name": "loadDataAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Will cause all the async data to be fetched and retained. Every call to\n`loadDataAsync` should have a matching call to `unloadData`.",
                                        "text": "Returns a Promise that will resolve once the data is loaded.\n"
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.loadDataAsync",
                                        "id": 940
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 122,
                                    "character": 23
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.loadDataAsync",
                                "id": 940
                            }
                        },
                        {
                            "id": 2937,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "A string representation of the model for use in debugging.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2938,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "A string representation of the model for use in debugging.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.toString",
                                        "id": 864
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.toString",
                                "id": 864
                            }
                        },
                        {
                            "id": 2923,
                            "name": "unloadData",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "signatures": [
                                {
                                    "id": 2924,
                                    "name": "unloadData",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "void"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.unloadData",
                                        "id": 942
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 156,
                                    "character": 14
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.unloadData",
                                "id": 942
                            }
                        },
                        {
                            "id": 2914,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatching a key that needs to load data asynchronously will automatically\ncause the data to be released. Once the data is available, the callback\nwill be called.",
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": "\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2915,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatching a key that needs to load data asynchronously will automatically\ncause the data to be released. Once the data is available, the callback\nwill be called.",
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": "\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2916,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableCursorKey",
                                                        "id": 2961
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableCursorKey",
                                                                "id": 2961
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2917,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 2918,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableCursorKey",
                                                "id": 2961
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 767
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.unwatch",
                                        "id": 927
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 74,
                                    "character": 11
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 767
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.unwatch",
                                "id": 927
                            }
                        },
                        {
                            "id": 2909,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Watching a key that needs to load data asynchronously will automatically\ncause the data to be fetched. Once the data is available, the callback\nwill be called.",
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": "\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2910,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Watching a key that needs to load data asynchronously will automatically\ncause the data to be fetched. Once the data is available, the callback\nwill be called.",
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": "\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2911,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableCursorKey",
                                                        "id": 2961
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableCursorKey",
                                                                "id": 2961
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2912,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 2913,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableCursorKey",
                                                "id": 2961
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 757
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.watch",
                                        "id": 922
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 49,
                                    "character": 9
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 757
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.watch",
                                "id": 922
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [2894, 2896, 2927, 2919, 2931, 2889]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [2891, 2921, 2937, 2923, 2914, 2909]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/cursor.ts",
                            "line": 45,
                            "character": 12
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AbstractModelWithAsyncData",
                            "id": 907,
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "CursorData"
                                },
                                {
                                    "type": "reference",
                                    "name": "WatchableCursorKey",
                                    "id": 2961
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 2961,
                    "name": "WatchableCursorKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Watchable keys in {@link Cursor}.\n- `selectedRecordIds`\n- `activeTableId`\n- `activeViewId`\n- `isDataLoaded`"
                    },
                    "sources": [
                        {
                            "fileName": "src/models/cursor.ts",
                            "line": 26,
                            "character": 23
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "isDataLoaded"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "selectedRecordIds"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "activeTableId"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "activeViewId"
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [2867]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [2961]
                }
            ],
            "sources": [
                {
                    "fileName": "src/models/cursor.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 590,
            "name": "@airtable/blocks/models: Field",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/types/field.ts",
            "comment": {},
            "children": [
                {
                    "id": 591,
                    "name": "FieldTypes",
                    "kind": 4,
                    "kindString": "Enumeration",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "An enum of Airtable's field types",
                        "tags": [
                            {
                                "tag": "alias",
                                "text": "fieldTypes"
                            },
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {fieldTypes} from '@airtable/blocks/models';\nconst numberFields = myTable.fields.filter(field => (\n    field.type === fieldTypes.NUMBER\n));\n```\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 614,
                            "name": "AUTO_NUMBER",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Automatically incremented unique counter for each record.",
                                "text": "##### Cell value format\n```js\nnumber\n```\n\n##### Options\nNone\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 502,
                                    "character": 15
                                }
                            ],
                            "defaultValue": "\"autoNumber\""
                        },
                        {
                            "id": 615,
                            "name": "BARCODE",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Use the Airtable iOS or Android app to scan barcodes.",
                                "text": "##### Cell value format\n```js\n{\n    // the text value of the barcode\n    text: string,\n    // the type of barcode\n    type?: string,\n}\n```\n\n##### Options\nNone\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 519,
                                    "character": 11
                                }
                            ],
                            "defaultValue": "\"barcode\""
                        },
                        {
                            "id": 608,
                            "name": "CHECKBOX",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A checkbox.",
                                "text": "##### Cell value format\n```js\nboolean\n```\n\nThis field is \"true\" when checked and otherwise empty.\n\n##### Options\n```js\n{\n    // an {@link Icon} name\n    icon: string,\n    // the color of the check box\n    color: Color,\n}\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 378,
                                    "character": 12
                                }
                            ],
                            "defaultValue": "\"checkbox\""
                        },
                        {
                            "id": 612,
                            "name": "COUNT",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Count the number of linked records.",
                                "text": "##### Cell value format\n```js\nnumber\n```\n\n##### Options\n```js\n{\n   // is the field currently valid (false if e.g. the linked record field is switched to a different type)\n   isValid: boolean,\n   // the linked record field in this table that we're counting\n   recordLinkFieldId: FieldId,\n}\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 480,
                                    "character": 9
                                }
                            ],
                            "defaultValue": "\"count\""
                        },
                        {
                            "id": 610,
                            "name": "CREATED_TIME",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The time the record was created in UTC.",
                                "text": "##### Cell value format\n```js\nstring\n```\n\nAn [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) formatted date time.\n\n##### Options\n```js\n{\n    result: {\n        type: 'date' | 'dateTime',\n        options: DateOrDateTimeFieldOptions,\n    },\n}\n```\n\nSee {@link fieldTypes.DATE} and {@link fieldTypes.DATE_TIME} for `result` options.\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 429,
                                    "character": 16
                                }
                            ],
                            "defaultValue": "\"createdTime\""
                        },
                        {
                            "id": 598,
                            "name": "CURRENCY",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "An amount of a currency.",
                                "text": "##### Cell value format\n```js\nnumber\n```\n\n##### Options\n```js\n{\n    precision: number,\n    symbol: string,\n}\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 121,
                                    "character": 12
                                }
                            ],
                            "defaultValue": "\"currency\""
                        },
                        {
                            "id": 604,
                            "name": "DATE",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A date.",
                                "text": "##### Cell value format\n```js\nstring\n```\n\nAn [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) formatted date.\n\n##### Options\n```js\n{\n    dateFormat: {\n        name: 'local' | 'friendly' | 'us' | 'european' | 'iso',\n        // a date format string as documented here: https://momentjs.com/docs/#/parsing/string-format/\n        format: string,\n    }\n}\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 276,
                                    "character": 8
                                }
                            ],
                            "defaultValue": "\"date\""
                        },
                        {
                            "id": 605,
                            "name": "DATE_TIME",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A date & time.",
                                "text": "##### Cell value format\n```js\nstring\n```\n\nAn [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) formatted date time.\n\n##### Options\n```js\n{\n    dateFormat: {\n        name: 'local' | 'friendly' | 'us' | 'european' | 'iso',\n        // a date format string as documented here: https://momentjs.com/docs/#/parsing/string-format/\n        format: string,\n    },\n    timeFormat: {\n        name: '12hour' | '24hour',\n        // a time format string as documented here: https://momentjs.com/docs/#/parsing/string-format/\n        format: string,\n    },\n    timeZone: 'utc' | 'client',\n}\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 304,
                                    "character": 13
                                }
                            ],
                            "defaultValue": "\"dateTime\""
                        },
                        {
                            "id": 618,
                            "name": "DURATION",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A duration of time in seconds.",
                                "text": "##### Cell value format\n```js\nnumber\n```\n\n##### Options\n```js\n{\n    // a time format string as documented here: https://momentjs.com/docs/#/parsing/string-format/\n    durationFormat: string,\n}\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 561,
                                    "character": 12
                                }
                            ],
                            "defaultValue": "\"duration\""
                        },
                        {
                            "id": 593,
                            "name": "EMAIL",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A valid email address (e.g. andrew@example.com).",
                                "text": "##### Cell value format\n```js\nstring\n```\n\n##### Options\nNone\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 45,
                                    "character": 9
                                }
                            ],
                            "defaultValue": "\"email\""
                        },
                        {
                            "id": 609,
                            "name": "FORMULA",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Compute a value in each record based on other fields in the same record.",
                                "text": "##### Cell value format\n```js\nany\n```\n\nCheck `options.result` to know the resulting field type.\n\n##### Options\n```js\n{\n    // false if the formula contains an error\n    isValid: boolean,\n    // the other fields in the record that are used in the formula\n    referencedFieldIds: Array<FieldId>,\n    // the resulting field type and options returned by the formula\n    result: {\n        // the field type of the formula result\n        type: string,\n        // that types options\n        options?: any,\n    },\n}\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 406,
                                    "character": 11
                                }
                            ],
                            "defaultValue": "\"formula\""
                        },
                        {
                            "id": 619,
                            "name": "LAST_MODIFIED_TIME",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Shows the date and time that a record was most recently modified in any editable field or\njust in specific editable fields.",
                                "text": "##### Cell value format\n```js\nstring\n```\n\nAn [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) formatted date time.\n\n##### Options\n```js\n{\n    // false if the formula contains an error\n    isValid: boolean,\n    // the fields to check the last modified time of\n    referencedFieldIds: Array<FieldId>,\n    // the cell value result type\n    result: {\n        type: 'date' | 'dateTime',\n        options: DateOrDateTimeFieldOptions,\n    },\n}\n```\n\nSee {@link fieldTypes.DATE} and {@link fieldTypes.DATE_TIME} for `result` options.\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 590,
                                    "character": 22
                                }
                            ],
                            "defaultValue": "\"lastModifiedTime\""
                        },
                        {
                            "id": 595,
                            "name": "MULTILINE_TEXT",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A long text field that can span multiple lines.",
                                "text": "###### Cell value format\n```js\nstring\n```\n\nMultiple lines of text, which may contain \"mention tokens\", e.g.\n`<airtable:mention id=\"menE1i9oBaGX3DseR\">@Alex</airtable:mention>`\n\n###### Options\nNone\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 72,
                                    "character": 18
                                }
                            ],
                            "defaultValue": "\"multilineText\""
                        },
                        {
                            "id": 607,
                            "name": "MULTIPLE_ATTACHMENTS",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Attachments allow you to add images, documents, or other files which can then be viewed or downloaded.",
                                "text": "##### Cell value format\n```js\nArray<{\n    // unique attachment id\n    id: string,\n    // url, e.g. \"https://dl.airtable.com/foo.jpg\"\n    url: string,\n    // filename, e.g. \"foo.jpg\"\n    filename: string,\n    // file size, in bytes\n    size?: number,\n    // content type, e.g. \"image/jpeg\"\n    type?: string,\n    // thumbnails if available\n    thumbnails?: {\n        small?: {\n            url: string,\n            width: number,\n            height: number,\n        },\n        large?: {\n            url: string,\n            width: number,\n            height: number,\n        },\n        full?: {\n            url: string,\n            width: number,\n            height: number,\n        },\n    },\n}>\n```\n\n##### Options\nNone\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 357,
                                    "character": 24
                                }
                            ],
                            "defaultValue": "\"multipleAttachments\""
                        },
                        {
                            "id": 602,
                            "name": "MULTIPLE_COLLABORATORS",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A collaborator field lets you add collaborators to your records. Collaborators can optionally be notified when they're added.",
                                "text": "##### Cell value format\n```js\nArray<{\n    id: string,\n    email: string,\n    name?: string,\n    profilePicUrl?: string,\n}>\n```\n\nArray of selected choices.\n\n##### Options\n```js\n{\n    choices: Array<{\n        id: string,\n        email: string,\n        name?: string,\n        profilePicUrl?: string,\n    }>,\n}\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 228,
                                    "character": 26
                                }
                            ],
                            "defaultValue": "\"multipleCollaborators\""
                        },
                        {
                            "id": 613,
                            "name": "MULTIPLE_LOOKUP_VALUES",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Lookup a field on linked records.",
                                "text": "##### Cell value format\nUNSTABLE\n\n##### Options\nUNSTABLE\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 490,
                                    "character": 26
                                }
                            ],
                            "defaultValue": "\"multipleLookupValues\""
                        },
                        {
                            "id": 603,
                            "name": "MULTIPLE_RECORD_LINKS",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Link to another record.",
                                "text": "##### Cell value format\n```js\nArray<{\n    id: RecordId,\n    name: string,\n}>\n```\n\nArray of selected record IDs and their primary cell values from the linked table.\n\n##### Options\n```js\n{\n    // The ID of the table this field links to\n    linkedTableId: TableId,\n    // The ID of the field in the linked table that links back to this one\n    inverseLinkFieldId?: FieldId,\n    // The ID of the view in the linked table to use when showing a list of records to select from\n    viewIdForRecordSelection?: ViewId,\n}\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 254,
                                    "character": 25
                                }
                            ],
                            "defaultValue": "\"multipleRecordLinks\""
                        },
                        {
                            "id": 600,
                            "name": "MULTIPLE_SELECTS",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Multiple select allows you to select one or more predefined options from a dropdown",
                                "text": "##### Cell value format\n```js\nArray<{\n    id: string,\n    name: string,\n    color?: Color,\n}>\n```\n\nArray of selected choices.\n\n##### Options\n```js\n{\n    choices: Array<{\n        id: string,\n        name: string,\n        color?: Color,\n    }>,\n}\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 173,
                                    "character": 20
                                }
                            ],
                            "defaultValue": "\"multipleSelects\""
                        },
                        {
                            "id": 596,
                            "name": "NUMBER",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A number.",
                                "text": "##### Cell value format\n```js\nnumber\n```\n\n##### Options\n```js\n{\n    precision: number,\n}\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 88,
                                    "character": 10
                                }
                            ],
                            "defaultValue": "\"number\""
                        },
                        {
                            "id": 597,
                            "name": "PERCENT",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A percentage - 0 is 0%, 1 is 100%.",
                                "text": "##### Cell value format\n```js\nnumber\n```\n\n##### Options\n```js\n{\n    precision: number,\n}\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 104,
                                    "character": 11
                                }
                            ],
                            "defaultValue": "\"percent\""
                        },
                        {
                            "id": 606,
                            "name": "PHONE_NUMBER",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A telephone number (e.g. (415) 555-9876).",
                                "text": "##### Cell value format\n```js\nstring\n```\n\n##### Options\nNone\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 316,
                                    "character": 16
                                }
                            ],
                            "defaultValue": "\"phoneNumber\""
                        },
                        {
                            "id": 616,
                            "name": "RATING",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A rating (e.g. stars out of 5)",
                                "text": "##### Cell value format\n```js\nnumber\n```\n\n##### Options\n```js\n{\n    // the {@link Icon} name used to display the rating\n    icon: string,\n    // the maximum value for the rating\n    max: number,\n    // the color of selected icons\n    color: Color,\n}\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 540,
                                    "character": 10
                                }
                            ],
                            "defaultValue": "\"rating\""
                        },
                        {
                            "id": 611,
                            "name": "ROLLUP",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A rollup allows you to summarize data from records that are linked to this table.",
                                "text": "##### Cell value format\n```js\nany\n```\n\nCheck `options.result` to know the resulting field type.\n\n##### Options\n```js\n{\n    // false if the formula contains an error\n    isValid: boolean,\n    // the linked record field in this table that this field is summarizing.\n    recordLinkFieldId: FieldId,\n    // the field id in the linked table that this field is summarizing.\n    fieldIdInLinkedTable: FieldId,\n    // the other fields in the record that are used in the formula\n    referencedFieldIds: Array<FieldId>,\n    // the resulting field type and options returned by the formula\n    result: {\n        // the field type of the formula result\n        type: string,\n        // that types options\n        options?: any,\n    },\n}\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 461,
                                    "character": 10
                                }
                            ],
                            "defaultValue": "\"rollup\""
                        },
                        {
                            "id": 601,
                            "name": "SINGLE_COLLABORATOR",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A collaborator field lets you add collaborators to your records. Collaborators can optionally be notified when they're added.",
                                "text": "##### Cell value format\n```js\n{\n    id: string,\n    email: string,\n    name?: string,\n    profilePicUrl?: string,\n}\n```\n\nThe currently selected choice.\n\n##### Options\n```js\n{\n    choices: Array<{\n        id: string,\n        email: string,\n        name?: string,\n        profilePicUrl?: string,\n    }>,\n}\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 201,
                                    "character": 23
                                }
                            ],
                            "defaultValue": "\"singleCollaborator\""
                        },
                        {
                            "id": 592,
                            "name": "SINGLE_LINE_TEXT",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A single line of text.",
                                "text": "##### Cell value format\n```js\nstring\n```\n\n##### Options\nNone\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 33,
                                    "character": 20
                                }
                            ],
                            "defaultValue": "\"singleLineText\""
                        },
                        {
                            "id": 599,
                            "name": "SINGLE_SELECT",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Single select allows you to select a single option from predefined options in a dropdown.",
                                "text": "##### Cell value format\n```js\n{\n    id: string,\n    name: string,\n    color?: Color\n}\n```\n\nThe currently selected choice.\n\n##### Options\n```js\n{\n    choices: Array<{\n        id: string,\n        name: string,\n        color?: Color,\n    }>,\n}\n```\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 147,
                                    "character": 17
                                }
                            ],
                            "defaultValue": "\"singleSelect\""
                        },
                        {
                            "id": 594,
                            "name": "URL",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A valid URL (e.g. airtable.com or https://airtable.com/universe).",
                                "text": "###### Cell value format\n```js\nstring\n```\n\n###### Options\nNone\n"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/field.ts",
                                    "line": 57,
                                    "character": 7
                                }
                            ],
                            "defaultValue": "\"url\""
                        }
                    ],
                    "groups": [
                        {
                            "title": "Enumeration members",
                            "kind": 16,
                            "children": [
                                614,
                                615,
                                608,
                                612,
                                610,
                                598,
                                604,
                                605,
                                618,
                                593,
                                609,
                                619,
                                595,
                                607,
                                602,
                                613,
                                603,
                                600,
                                596,
                                597,
                                606,
                                616,
                                611,
                                601,
                                592,
                                599,
                                594
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/types/field.ts",
                            "line": 21,
                            "character": 22
                        }
                    ]
                },
                {
                    "id": 1927,
                    "name": "Field",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Model class representing a field in a table.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {base} from '@airtable/blocks';\n\nconst table = base.getTableByName('Table 1');\nconst field = table.getFieldByName('Name');\nconsole.log('The type of this field is', field.type);\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "models/Field\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 1957,
                            "name": "availableAggregators",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A list of available aggregators given this field's configuration.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst fieldAggregators = myField.availableAggregators;\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 1958,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "A list of available aggregators given this field's configuration.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst fieldAggregators = myField.availableAggregators;\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Aggregator",
                                                "id": 1899
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/field.ts",
                                    "line": 198,
                                    "character": 28
                                }
                            ]
                        },
                        {
                            "id": 1955,
                            "name": "description",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The description of the field, if it has one. Can be watched.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myField.description);\n// => 'This is my field'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 1956,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The description of the field, if it has one. Can be watched.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myField.description);\n// => 'This is my field'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/field.ts",
                                    "line": 187,
                                    "character": 19
                                }
                            ]
                        },
                        {
                            "id": 1974,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 1975,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.id",
                                        "id": 852
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.id",
                                "id": 852
                            }
                        },
                        {
                            "id": 1951,
                            "name": "isComputed",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if this field is computed, `false` otherwise. A field is\n\"computed\" if it's value is not set by user input (e.g. autoNumber, formula,\netc.). Can be watched",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(mySingleLineTextField.isComputed);\n// => false\nconsole.log(myAutoNumberField.isComputed);\n// => true\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 1952,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if this field is computed, `false` otherwise. A field is\n\"computed\" if it's value is not set by user input (e.g. autoNumber, formula,\netc.). Can be watched",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(mySingleLineTextField.isComputed);\n// => false\nconsole.log(myAutoNumberField.isComputed);\n// => true\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/field.ts",
                                    "line": 166,
                                    "character": 18
                                }
                            ]
                        },
                        {
                            "id": 1978,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 1979,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.isDeleted",
                                        "id": 858
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.isDeleted",
                                "id": 858
                            }
                        },
                        {
                            "id": 1953,
                            "name": "isPrimaryField",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if this field is its parent table's primary field, `false` otherwise.\nShould never change because the primary field of a table cannot change."
                            },
                            "getSignature": [
                                {
                                    "id": 1954,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if this field is its parent table's primary field, `false` otherwise.\nShould never change because the primary field of a table cannot change."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/field.ts",
                                    "line": 174,
                                    "character": 22
                                }
                            ]
                        },
                        {
                            "id": 1942,
                            "name": "name",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The name of the field. Can be watched.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myField.name);\n// => 'Name'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 1943,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The name of the field. Can be watched.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myField.name);\n// => 'Name'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/field.ts",
                                    "line": 95,
                                    "character": 12
                                }
                            ]
                        },
                        {
                            "id": 1946,
                            "name": "options",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The configuration options of the field. The structure of the field's\noptions depend on the field's type. Can be watched.",
                                "tags": [
                                    {
                                        "tag": "see",
                                        "text": "{@link FieldTypes}"
                                    },
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {fieldTypes} from '@airtable/blocks/models';\n\nif (myField.type === fieldTypes.CURRENCY) {\n    console.log(myField.options.symbol);\n    // => '$'\n}\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 1947,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The configuration options of the field. The structure of the field's\noptions depend on the field's type. Can be watched.",
                                        "tags": [
                                            {
                                                "tag": "see",
                                                "text": "{@link FieldTypes}"
                                            },
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {fieldTypes} from '@airtable/blocks/models';\n\nif (myField.type === fieldTypes.CURRENCY) {\n    console.log(myField.options.symbol);\n    // => '$'\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 1948,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {},
                                                    "sources": [
                                                        {
                                                            "fileName": "src/models/field.ts",
                                                            "line": 140,
                                                            "character": 18
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/field.ts",
                                    "line": 140,
                                    "character": 15
                                }
                            ]
                        },
                        {
                            "id": 1944,
                            "name": "type",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The type of the field. Can be watched.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myField.type);\n// => 'singleLineText'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 1945,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The type of the field. Can be watched.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myField.type);\n// => 'singleLineText'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "FieldType",
                                        "id": 637
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/field.ts",
                                    "line": 107,
                                    "character": 12
                                }
                            ]
                        },
                        {
                            "id": 1962,
                            "name": "convertStringToCellValue",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Given a string, will attempt to parse it and return a valid cell value for\nthe field's current config.",
                                "returns": "The parsed cell value, or `null` if unable to parse the given string.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst inputString = '42';\nconst cellValue = myNumberField.convertStringToCellValue(inputString);\nconsole.log(cellValue === 42);\n// => true\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1963,
                                    "name": "convertStringToCellValue",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Given a string, will attempt to parse it and return a valid cell value for\nthe field's current config.",
                                        "returns": "The parsed cell value, or `null` if unable to parse the given string.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst inputString = '42';\nconst cellValue = myNumberField.convertStringToCellValue(inputString);\nconsole.log(cellValue === 42);\n// => true\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1964,
                                            "name": "string",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The string to parse."
                                            },
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "unknown"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/field.ts",
                                    "line": 249,
                                    "character": 28
                                }
                            ]
                        },
                        {
                            "id": 1959,
                            "name": "isAggregatorAvailable",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "`true` if the given aggregator is available for this field, `false` otherwise.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {aggregators} from '@airtable/blocks/models';\nconst aggregator = aggregators.totalAttachmentSize;\n\n// Using an aggregator object\nconsole.log(myAttachmentField.isAggregatorAvailable(aggregator));\n// => true\n\n// Using an aggregator key\nconsole.log(mySingleLineTextField.isAggregatorAvailable('totalAttachmentSize'));\n// => false\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1960,
                                    "name": "isAggregatorAvailable",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "`true` if the given aggregator is available for this field, `false` otherwise.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {aggregators} from '@airtable/blocks/models';\nconst aggregator = aggregators.totalAttachmentSize;\n\n// Using an aggregator object\nconsole.log(myAttachmentField.isAggregatorAvailable(aggregator));\n// => true\n\n// Using an aggregator key\nconsole.log(mySingleLineTextField.isAggregatorAvailable('totalAttachmentSize'));\n// => false\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1961,
                                            "name": "aggregator",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The aggregator object or aggregator key."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Aggregator",
                                                        "id": 1899
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "AggregatorKey",
                                                        "id": 585
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/field.ts",
                                    "line": 225,
                                    "character": 25
                                }
                            ]
                        },
                        {
                            "id": 1984,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "A string representation of the model for use in debugging.\n"
                            },
                            "signatures": [
                                {
                                    "id": 1985,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "A string representation of the model for use in debugging.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.toString",
                                        "id": 864
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.toString",
                                "id": 864
                            }
                        },
                        {
                            "id": 2012,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatch keys watched with `.watch`.",
                                "text": "Should be called with the same arguments given to `.watch`.\n",
                                "returns": "the array of keys that were unwatched\n"
                            },
                            "signatures": [
                                {
                                    "id": 2013,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatch keys watched with `.watch`.",
                                        "text": "Should be called with the same arguments given to `.watch`.\n",
                                        "returns": "the array of keys that were unwatched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2014,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to unwatch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableFieldKey",
                                                        "id": 2028
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableFieldKey",
                                                                "id": 2028
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2015,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the function passed to `.watch` for these keys"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 2016,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 2017,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 2018,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2019,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableFieldKey",
                                                                        "id": 2028
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2020,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 111,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 2021,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the context that was passed to `.watch` for this `callback`"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableFieldKey",
                                                "id": 2028
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 767
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 109,
                                    "character": 11
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 767
                            }
                        },
                        {
                            "id": 2002,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get notified of changes to the model.",
                                "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n",
                                "returns": "the array of keys that were watched\n"
                            },
                            "signatures": [
                                {
                                    "id": 2003,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get notified of changes to the model.",
                                        "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n",
                                        "returns": "the array of keys that were watched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2004,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to watch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableFieldKey",
                                                        "id": 2028
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableFieldKey",
                                                                "id": 2028
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2005,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "a function to call when those keys change"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 2006,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 2007,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 2008,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2009,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableFieldKey",
                                                                        "id": 2028
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2010,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 65,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 2011,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "an optional context for `this` in `callback`."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableFieldKey",
                                                "id": 2028
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 757
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 63,
                                    "character": 9
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 757
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [1957, 1955, 1974, 1951, 1978, 1953, 1942, 1946, 1944]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [1962, 1959, 1984, 2012, 2002]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/field.ts",
                            "line": 44,
                            "character": 11
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AbstractModel",
                            "id": 839,
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "FieldData"
                                },
                                {
                                    "type": "reference",
                                    "name": "WatchableFieldKey",
                                    "id": 2028
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 635,
                    "name": "FieldId",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/types/field.ts",
                            "line": 5,
                            "character": 19
                        }
                    ],
                    "type": {
                        "type": "intrinsic",
                        "name": "string"
                    }
                },
                {
                    "id": 637,
                    "name": "FieldType",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/types/field.ts",
                            "line": 594,
                            "character": 21
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "reference",
                                "name": "SINGLE_LINE_TEXT",
                                "id": 592
                            },
                            {
                                "type": "reference",
                                "name": "EMAIL",
                                "id": 593
                            },
                            {
                                "type": "reference",
                                "name": "URL",
                                "id": 594
                            },
                            {
                                "type": "reference",
                                "name": "MULTILINE_TEXT",
                                "id": 595
                            },
                            {
                                "type": "reference",
                                "name": "NUMBER",
                                "id": 596
                            },
                            {
                                "type": "reference",
                                "name": "PERCENT",
                                "id": 597
                            },
                            {
                                "type": "reference",
                                "name": "CURRENCY",
                                "id": 598
                            },
                            {
                                "type": "reference",
                                "name": "SINGLE_SELECT",
                                "id": 599
                            },
                            {
                                "type": "reference",
                                "name": "MULTIPLE_SELECTS",
                                "id": 600
                            },
                            {
                                "type": "reference",
                                "name": "SINGLE_COLLABORATOR",
                                "id": 601
                            },
                            {
                                "type": "reference",
                                "name": "MULTIPLE_COLLABORATORS",
                                "id": 602
                            },
                            {
                                "type": "reference",
                                "name": "MULTIPLE_RECORD_LINKS",
                                "id": 603
                            },
                            {
                                "type": "reference",
                                "name": "DATE",
                                "id": 604
                            },
                            {
                                "type": "reference",
                                "name": "DATE_TIME",
                                "id": 605
                            },
                            {
                                "type": "reference",
                                "name": "PHONE_NUMBER",
                                "id": 606
                            },
                            {
                                "type": "reference",
                                "name": "MULTIPLE_ATTACHMENTS",
                                "id": 607
                            },
                            {
                                "type": "reference",
                                "name": "CHECKBOX",
                                "id": 608
                            },
                            {
                                "type": "reference",
                                "name": "FORMULA",
                                "id": 609
                            },
                            {
                                "type": "reference",
                                "name": "CREATED_TIME",
                                "id": 610
                            },
                            {
                                "type": "reference",
                                "name": "ROLLUP",
                                "id": 611
                            },
                            {
                                "type": "reference",
                                "name": "COUNT",
                                "id": 612
                            },
                            {
                                "type": "reference",
                                "name": "MULTIPLE_LOOKUP_VALUES",
                                "id": 613
                            },
                            {
                                "type": "reference",
                                "name": "AUTO_NUMBER",
                                "id": 614
                            },
                            {
                                "type": "reference",
                                "name": "BARCODE",
                                "id": 615
                            },
                            {
                                "type": "reference",
                                "name": "RATING",
                                "id": 616
                            },
                            {
                                "type": "reference",
                                "name": "RICH_TEXT"
                            },
                            {
                                "type": "reference",
                                "name": "DURATION",
                                "id": 618
                            },
                            {
                                "type": "reference",
                                "name": "LAST_MODIFIED_TIME",
                                "id": 619
                            }
                        ]
                    }
                },
                {
                    "id": 2028,
                    "name": "WatchableFieldKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "All the watchable keys in a field.\n- `name`\n- `type`\n- `options`\n- `isComputed`\n- `description`"
                    },
                    "sources": [
                        {
                            "fileName": "src/models/field.ts",
                            "line": 29,
                            "character": 29
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "name"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "description"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "type"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "options"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "isComputed"
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Enumerations",
                    "kind": 4,
                    "children": [591]
                },
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [1927]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [635, 637, 2028]
                }
            ],
            "sources": [
                {
                    "fileName": "src/types/field.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 639,
            "name": "@airtable/blocks/models: Record",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/types/record.ts",
            "comment": {},
            "children": [
                {
                    "id": 1779,
                    "name": "Record",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Model class representing a record in a table.",
                        "text": "Do not instantiate. You can get instances of this class by calling `table.selectRecords`\nor `view.selectRecords` and using the resulting {@link RecordQueryResult}.\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "models/Record\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 1829,
                            "name": "commentCount",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The number of comments on this record.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst commentCount = myRecord.commentCount;\nconsole.log(`This record has ${commentCount} ${commentCount === 1 ? 'comment' : 'comments'}`);\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 1830,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The number of comments on this record.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst commentCount = myRecord.commentCount;\nconsole.log(`This record has ${commentCount} ${commentCount === 1 ? 'comment' : 'comments'}`);\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record.ts",
                                    "line": 357,
                                    "character": 20
                                }
                            ]
                        },
                        {
                            "id": 1831,
                            "name": "createdTime",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The created time of this record.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(`This record was created at ${myRecord.createdTime.toISOString()}`)\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 1832,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The created time of this record.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(`This record was created at ${myRecord.createdTime.toISOString()}`)\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Date"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record.ts",
                                    "line": 368,
                                    "character": 19
                                }
                            ]
                        },
                        {
                            "id": 1841,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 1842,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.id",
                                        "id": 852
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.id",
                                "id": 852
                            }
                        },
                        {
                            "id": 1845,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 1846,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.isDeleted",
                                        "id": 858
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.isDeleted",
                                "id": 858
                            }
                        },
                        {
                            "id": 1825,
                            "name": "primaryCellValue",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The primary cell value in this record.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myRecord.primaryCellValue);\n// => 'primary cell value'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 1826,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The primary cell value in this record.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myRecord.primaryCellValue);\n// => 'primary cell value'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "unknown"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record.ts",
                                    "line": 333,
                                    "character": 24
                                }
                            ]
                        },
                        {
                            "id": 1827,
                            "name": "primaryCellValueAsString",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The primary cell value in this record, formatted as a `string`.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myRecord.primaryCellValueAsString);\n// => '42'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 1828,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The primary cell value in this record, formatted as a `string`.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myRecord.primaryCellValueAsString);\n// => '42'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record.ts",
                                    "line": 345,
                                    "character": 32
                                }
                            ]
                        },
                        {
                            "id": 1823,
                            "name": "url",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The URL for the record. You can visit this URL in the browser to be taken to the record in the Airtable UI.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myRecord.url);\n// => 'https://airtable.com/tblxxxxxxxxxxxxxx/recxxxxxxxxxxxxxx'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 1824,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The URL for the record. You can visit this URL in the browser to be taken to the record in the Airtable UI.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myRecord.url);\n// => 'https://airtable.com/tblxxxxxxxxxxxxxx/recxxxxxxxxxxxxxx'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record.ts",
                                    "line": 318,
                                    "character": 11
                                }
                            ]
                        },
                        {
                            "id": 1809,
                            "name": "getAttachmentClientUrlFromCellValueUrl",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Returns a URL that is suitable for rendering an attachment on the current client.\nThe URL that is returned will only work for the current user.",
                                "returns": "A URL that is suitable for rendering on the current client.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport React from 'react';\n\nfunction RecordAttachments(props) {\n    const {record, attachmentField} = props;\n    const attachmentCellValue = record.getCellValue(attachmentField);\n    if (attachmentCellValue === null) {\n        return null;\n    }\n    return (\n        <div>\n            {attachmentCellValue.map(attachmentObj => {\n                const clientUrl = record.getAttachmentClientUrlFromCellValueUrl(attachmentObj.id, attachmentObj.url);\n                return (\n                    <img key={attachmentObj.id} src={clientUrl} width={200} />\n                );\n            })}\n        </div>\n    );\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1810,
                                    "name": "getAttachmentClientUrlFromCellValueUrl",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Returns a URL that is suitable for rendering an attachment on the current client.\nThe URL that is returned will only work for the current user.",
                                        "returns": "A URL that is suitable for rendering on the current client.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport React from 'react';\n\nfunction RecordAttachments(props) {\n    const {record, attachmentField} = props;\n    const attachmentCellValue = record.getCellValue(attachmentField);\n    if (attachmentCellValue === null) {\n        return null;\n    }\n    return (\n        <div>\n            {attachmentCellValue.map(attachmentObj => {\n                const clientUrl = record.getAttachmentClientUrlFromCellValueUrl(attachmentObj.id, attachmentObj.url);\n                return (\n                    <img key={attachmentObj.id} src={clientUrl} width={200} />\n                );\n            })}\n        </div>\n    );\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1811,
                                            "name": "attachmentId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The ID of the attachment."
                                            },
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        },
                                        {
                                            "id": 1812,
                                            "name": "attachmentUrl",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The attachment's URL (which is not suitable for rendering on the client)."
                                            },
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record.ts",
                                    "line": 257,
                                    "character": 42
                                }
                            ]
                        },
                        {
                            "id": 1803,
                            "name": "getCellValue",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Gets a specific cell value in this record.",
                                "returns": "The cell value in the given field.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst cellValue = myRecord.getCellValue(mySingleLineTextField);\nconsole.log(cellValue);\n// => 'cell value'\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1804,
                                    "name": "getCellValue",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Gets a specific cell value in this record.",
                                        "returns": "The cell value in the given field.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst cellValue = myRecord.getCellValue(mySingleLineTextField);\nconsole.log(cellValue);\n// => 'cell value'\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1805,
                                            "name": "fieldOrFieldIdOrFieldName",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The field (or field ID or field name) whose cell value you'd like to get."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Field",
                                                        "id": 1927
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "FieldId",
                                                        "id": 635
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "string"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "unknown"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record.ts",
                                    "line": 139,
                                    "character": 16
                                }
                            ]
                        },
                        {
                            "id": 1806,
                            "name": "getCellValueAsString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Gets a specific cell value in this record, formatted as a `string`.",
                                "returns": "The cell value in the given field, formatted as a `string`.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst cellValueAsString = myRecord.getCellValueAsString(myNumberField);\nconsole.log(cellValueAsString);\n// => '42'\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1807,
                                    "name": "getCellValueAsString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Gets a specific cell value in this record, formatted as a `string`.",
                                        "returns": "The cell value in the given field, formatted as a `string`.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst cellValueAsString = myRecord.getCellValueAsString(myNumberField);\nconsole.log(cellValueAsString);\n// => '42'\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1808,
                                            "name": "fieldOrFieldIdOrFieldName",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The field (or field ID or field name) whose cell value you'd like to get."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Field",
                                                        "id": 1927
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "FieldId",
                                                        "id": 635
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "string"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record.ts",
                                    "line": 208,
                                    "character": 24
                                }
                            ]
                        },
                        {
                            "id": 1816,
                            "name": "getColorHexInView",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Gets the CSS hex string for this record in a given view.",
                                "text": "Can be watched with the 'colorInView:${ViewId}' key.\n",
                                "returns": "The CSS hex color for this record in the given view, or null if the record has no color in that view.\n"
                            },
                            "signatures": [
                                {
                                    "id": 1817,
                                    "name": "getColorHexInView",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Gets the CSS hex string for this record in a given view.",
                                        "text": "Can be watched with the 'colorInView:${ViewId}' key.\n",
                                        "returns": "The CSS hex color for this record in the given view, or null if the record has no color in that view.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 1818,
                                            "name": "viewOrViewIdOrViewName",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The view (or view ID or view name) to use for record coloring."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "View",
                                                        "id": 2280
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "string"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record.ts",
                                    "line": 287,
                                    "character": 21
                                }
                            ]
                        },
                        {
                            "id": 1813,
                            "name": "getColorInView",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Gets the color of this record in a given view.",
                                "text": "Can be watched with the 'colorInView:${ViewId}' key.\n",
                                "returns": "The color of this record in the given view, or null if the record has no color in that view.\n"
                            },
                            "signatures": [
                                {
                                    "id": 1814,
                                    "name": "getColorInView",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Gets the color of this record in a given view.",
                                        "text": "Can be watched with the 'colorInView:${ViewId}' key.\n",
                                        "returns": "The color of this record in the given view, or null if the record has no color in that view.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 1815,
                                            "name": "viewOrViewIdOrViewName",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The view (or view ID or view name) to use for record coloring."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "View",
                                                        "id": 2280
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ViewId",
                                                        "id": 664
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "string"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Color",
                                                "id": 556
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record.ts",
                                    "line": 274,
                                    "character": 18
                                }
                            ]
                        },
                        {
                            "id": 1819,
                            "name": "selectLinkedRecordsFromCell",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Select records referenced in a `multipleRecordLinks` cell value. Returns a query result.\nSee {@link RecordQueryResult} for more.",
                                "returns": "A query result containing the records in the given `multipleRecordLinks` field.\n"
                            },
                            "signatures": [
                                {
                                    "id": 1820,
                                    "name": "selectLinkedRecordsFromCell",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Select records referenced in a `multipleRecordLinks` cell value. Returns a query result.\nSee {@link RecordQueryResult} for more.",
                                        "returns": "A query result containing the records in the given `multipleRecordLinks` field.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 1821,
                                            "name": "fieldOrFieldIdOrFieldName",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The `multipleRecordLinks` field (or field ID or field name) to use."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Field",
                                                        "id": 1927
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "FieldId",
                                                        "id": 635
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "string"
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 1822,
                                            "name": "opts",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "Options for the query, such as sorts and fields."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "RecordQueryResultOpts",
                                                "id": 2036
                                            },
                                            "defaultValue": " {}"
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "LinkedRecordsQueryResult",
                                        "id": 1546
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record.ts",
                                    "line": 302,
                                    "character": 31
                                }
                            ]
                        },
                        {
                            "id": 1851,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "A string representation of the model for use in debugging.\n"
                            },
                            "signatures": [
                                {
                                    "id": 1852,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "A string representation of the model for use in debugging.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.toString",
                                        "id": 864
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.toString",
                                "id": 864
                            }
                        },
                        {
                            "id": 1879,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatch keys watched with `.watch`.",
                                "text": "Should be called with the same arguments given to `.watch`.\n",
                                "returns": "the array of keys that were unwatched\n"
                            },
                            "signatures": [
                                {
                                    "id": 1880,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatch keys watched with `.watch`.",
                                        "text": "Should be called with the same arguments given to `.watch`.\n",
                                        "returns": "the array of keys that were unwatched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 1881,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to unwatch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableRecordKey",
                                                        "id": 1897
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableRecordKey",
                                                                "id": 1897
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 1882,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the function passed to `.watch` for these keys"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 1883,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 1884,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 1885,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 1886,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableRecordKey",
                                                                        "id": 1897
                                                                    }
                                                                },
                                                                {
                                                                    "id": 1887,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 111,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 1888,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the context that was passed to `.watch` for this `callback`"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableRecordKey",
                                                "id": 1897
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 767
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 109,
                                    "character": 11
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 767
                            }
                        },
                        {
                            "id": 1869,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get notified of changes to the model.",
                                "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n",
                                "returns": "the array of keys that were watched\n"
                            },
                            "signatures": [
                                {
                                    "id": 1870,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get notified of changes to the model.",
                                        "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n",
                                        "returns": "the array of keys that were watched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 1871,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to watch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableRecordKey",
                                                        "id": 1897
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableRecordKey",
                                                                "id": 1897
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 1872,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "a function to call when those keys change"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 1873,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 1874,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 1875,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 1876,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableRecordKey",
                                                                        "id": 1897
                                                                    }
                                                                },
                                                                {
                                                                    "id": 1877,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 65,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 1878,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "an optional context for `this` in `callback`."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableRecordKey",
                                                "id": 1897
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 757
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 63,
                                    "character": 9
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 757
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [1829, 1831, 1841, 1845, 1825, 1827, 1823]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [1809, 1803, 1806, 1816, 1813, 1819, 1851, 1879, 1869]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/record.ts",
                            "line": 50,
                            "character": 12
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AbstractModel",
                            "id": 839,
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "RecordData"
                                },
                                {
                                    "type": "reference",
                                    "name": "WatchableRecordKey",
                                    "id": 1897
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 646,
                    "name": "RecordDef",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/types/record.ts",
                            "line": 9,
                            "character": 21
                        }
                    ],
                    "type": {
                        "type": "reference",
                        "name": "ObjectMap",
                        "typeArguments": [
                            {
                                "type": "reference",
                                "name": "FieldId",
                                "id": 635
                            },
                            {
                                "type": "intrinsic",
                                "name": "unknown"
                            }
                        ]
                    }
                },
                {
                    "id": 645,
                    "name": "RecordId",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/types/record.ts",
                            "line": 6,
                            "character": 20
                        }
                    ],
                    "type": {
                        "type": "intrinsic",
                        "name": "string"
                    }
                },
                {
                    "id": 1897,
                    "name": "WatchableRecordKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Any key within record that can be watched:\n- `'primaryCellValue'`\n- `'commentCount'`\n- `'cellValues'`\n- `'cellValueInField:' + someFieldId`\n- `'colorInView:' + someViewId`"
                    },
                    "sources": [
                        {
                            "fileName": "src/models/record.ts",
                            "line": 40,
                            "character": 23
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "stringLiteral",
                                        "value": "cellValues"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "primaryCellValue"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "commentCount"
                                    }
                                ]
                            },
                            {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [1779]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [646, 645, 1897]
                }
            ],
            "sources": [
                {
                    "fileName": "src/types/record.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 1056,
            "name": "@airtable/blocks/models: Record Coloring",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/models/record_coloring.ts",
            "comment": {},
            "children": [
                {
                    "id": 1059,
                    "name": "BySelectFieldRecordColorMode",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {},
                    "children": [
                        {
                            "id": 1061,
                            "name": "selectField",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/models/record_coloring.ts",
                                    "line": 44,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Field",
                                "id": 1927
                            }
                        },
                        {
                            "id": 1060,
                            "name": "type",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/models/record_coloring.ts",
                                    "line": 42,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "bySelectField"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [1061, 1060]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/record_coloring.ts",
                            "line": 40,
                            "character": 38
                        }
                    ]
                },
                {
                    "id": 1062,
                    "name": "ByViewRecordColorMode",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {},
                    "children": [
                        {
                            "id": 1063,
                            "name": "type",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/models/record_coloring.ts",
                                    "line": 50,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "byView"
                            }
                        },
                        {
                            "id": 1064,
                            "name": "view",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/models/record_coloring.ts",
                                    "line": 52,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "View",
                                "id": 2280
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [1063, 1064]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/record_coloring.ts",
                            "line": 48,
                            "character": 31
                        }
                    ]
                },
                {
                    "id": 1057,
                    "name": "NoRecordColorMode",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {},
                    "children": [
                        {
                            "id": 1058,
                            "name": "type",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/models/record_coloring.ts",
                                    "line": 36,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "none"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [1058]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/record_coloring.ts",
                            "line": 34,
                            "character": 27
                        }
                    ]
                },
                {
                    "id": 1070,
                    "name": "RecordColorMode",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/models/record_coloring.ts",
                            "line": 56,
                            "character": 27
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "reference",
                                "name": "NoRecordColorMode",
                                "id": 1057
                            },
                            {
                                "type": "reference",
                                "name": "BySelectFieldRecordColorMode",
                                "id": 1059
                            },
                            {
                                "type": "reference",
                                "name": "ByViewRecordColorMode",
                                "id": 1062
                            }
                        ]
                    }
                },
                {
                    "id": 1071,
                    "name": "modes",
                    "kind": 2097152,
                    "kindString": "Object literal",
                    "flags": {
                        "isExported": true,
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "Record coloring config creators.",
                        "tags": [
                            {
                                "tag": "alias",
                                "text": "recordColoring.modes"
                            },
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {recordColoring} from '@airtable/blocks/models';\n\n// no record coloring:\nconst recordColorMode = recordColoring.modes.none();\n// color by select field:\nconst recordColorMode = recordColoring.modes.bySelectField(someSelectField);\n// color from view:\nconst recordColorMode = recordColoring.modes.byView(someView);\n\n// with a query result:\nconst queryResult = table.selectRecords({ recordColorMode });\n```\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 1074,
                            "name": "bySelectField",
                            "kind": 64,
                            "kindString": "Function",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "a record coloring mode\n",
                                "tags": [
                                    {
                                        "tag": "alias",
                                        "text": "recordColoring.modes.bySelectField"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1075,
                                    "name": "bySelectField",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "a record coloring mode\n",
                                        "tags": [
                                            {
                                                "tag": "alias",
                                                "text": "recordColoring.modes.bySelectField"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1076,
                                            "name": "selectField",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "Field",
                                                "id": 1927
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "BySelectFieldRecordColorMode",
                                        "id": 1059
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_coloring.ts",
                                    "line": 95,
                                    "character": 17
                                }
                            ]
                        },
                        {
                            "id": 1077,
                            "name": "byView",
                            "kind": 64,
                            "kindString": "Function",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "a record coloring mode\n",
                                "tags": [
                                    {
                                        "tag": "alias",
                                        "text": "recordColoring.modes.byView"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1078,
                                    "name": "byView",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "a record coloring mode\n",
                                        "tags": [
                                            {
                                                "tag": "alias",
                                                "text": "recordColoring.modes.byView"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1079,
                                            "name": "view",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "View",
                                                "id": 2280
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "ByViewRecordColorMode",
                                        "id": 1062
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_coloring.ts",
                                    "line": 106,
                                    "character": 10
                                }
                            ]
                        },
                        {
                            "id": 1072,
                            "name": "none",
                            "kind": 64,
                            "kindString": "Function",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "a record coloring mode\n",
                                "tags": [
                                    {
                                        "tag": "alias",
                                        "text": "recordColoring.modes.none"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1073,
                                    "name": "none",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "a record coloring mode\n",
                                        "tags": [
                                            {
                                                "tag": "alias",
                                                "text": "recordColoring.modes.none"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "NoRecordColorMode",
                                        "id": 1057
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_coloring.ts",
                                    "line": 85,
                                    "character": 8
                                }
                            ]
                        }
                    ],
                    "groups": [
                        {
                            "title": "Functions",
                            "kind": 64,
                            "children": [1074, 1077, 1072]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/record_coloring.ts",
                            "line": 80,
                            "character": 18
                        }
                    ],
                    "type": {
                        "type": "intrinsic",
                        "name": "object"
                    }
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [1059, 1062, 1057]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [1070]
                },
                {
                    "title": "Object literals",
                    "kind": 2097152,
                    "children": [1071]
                }
            ],
            "sources": [
                {
                    "fileName": "src/models/record_coloring.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 1318,
            "name": "@airtable/blocks/models: RecordQueryResult",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/models/table_or_view_query_result.ts",
            "comment": {},
            "children": [
                {
                    "id": 1546,
                    "name": "LinkedRecordsQueryResult",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Represents a set of records from a LinkedRecord cell value. See {@link RecordQueryResult} for main\ndocumentation.",
                        "text": "Do not instantiate. You can get instances of this class by calling\n`record.getLinkedRecordsFromCell`.\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "models/Query results/LinkedRecordsQueryResult\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 1675,
                            "name": "DataType",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 1587,
                            "name": "fields",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The fields that were used to create this LinkedRecordsQueryResult."
                            },
                            "getSignature": [
                                {
                                    "id": 1588,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The fields that were used to create this LinkedRecordsQueryResult."
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Array",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Field",
                                                        "id": 1927
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.fields",
                                        "id": 2053
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/linked_records_query_result.ts",
                                    "line": 220,
                                    "character": 14
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "RecordQueryResult.fields",
                                "id": 2053
                            }
                        },
                        {
                            "id": 1736,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 1737,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.id",
                                        "id": 852
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.id",
                                "id": 852
                            }
                        },
                        {
                            "id": 1730,
                            "name": "isDataLoaded",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "getSignature": [
                                {
                                    "id": 1731,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.isDataLoaded",
                                        "id": 932
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 92,
                                    "character": 20
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.isDataLoaded",
                                "id": 932
                            }
                        },
                        {
                            "id": 1742,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 1743,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.isDeleted",
                                        "id": 858
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.isDeleted",
                                "id": 858
                            }
                        },
                        {
                            "id": 1579,
                            "name": "isValid",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Is the query result currently valid? This value always starts as 'true',\nbut can become false if the field config changes to link to a different\ntable or a type other than MULTIPLE_RECORD_LINKS. Once `isValid` has\nbecome false, it will never become true again. Many fields will throw on\nattempting to access them, and watches will no longer fire."
                            },
                            "getSignature": [
                                {
                                    "id": 1580,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Is the query result currently valid? This value always starts as 'true',\nbut can become false if the field config changes to link to a different\ntable or a type other than MULTIPLE_RECORD_LINKS. Once `isValid` has\nbecome false, it will never become true again. Many fields will throw on\nattempting to access them, and watches will no longer fire."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/linked_records_query_result.ts",
                                    "line": 164,
                                    "character": 15
                                }
                            ]
                        },
                        {
                            "id": 1583,
                            "name": "recordIds",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Ordered array of all the linked record ids. Watchable."
                            },
                            "getSignature": [
                                {
                                    "id": 1584,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Ordered array of all the linked record ids. Watchable."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.recordIds",
                                        "id": 2049
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/linked_records_query_result.ts",
                                    "line": 183,
                                    "character": 17
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "RecordQueryResult.recordIds",
                                "id": 2049
                            }
                        },
                        {
                            "id": 1585,
                            "name": "records",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Ordered array of all the linked records. Watchable."
                            },
                            "getSignature": [
                                {
                                    "id": 1586,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Ordered array of all the linked records. Watchable."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Record",
                                                "id": 1779
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.records",
                                        "id": 2081
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/linked_records_query_result.ts",
                                    "line": 203,
                                    "character": 15
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "RecordQueryResult.records",
                                "id": 2081
                            }
                        },
                        {
                            "id": 1699,
                            "name": "getRecordById",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get a specific record in the query result, or throws if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`.",
                                "returns": "the record\n"
                            },
                            "signatures": [
                                {
                                    "id": 1700,
                                    "name": "getRecordById",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get a specific record in the query result, or throws if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`.",
                                        "returns": "the record\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 1701,
                                            "name": "recordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the ID of the {@link Record} you want"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "RecordId",
                                                "id": 645
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Record",
                                        "id": 1779
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.getRecordById",
                                        "id": 2086
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 432,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "RecordQueryResult.getRecordById",
                                "id": 2086
                            }
                        },
                        {
                            "id": 1696,
                            "name": "getRecordByIdIfExists",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get a specific record in the query result, or null if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`.",
                                "returns": "the record\n"
                            },
                            "signatures": [
                                {
                                    "id": 1697,
                                    "name": "getRecordByIdIfExists",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get a specific record in the query result, or null if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`.",
                                        "returns": "the record\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 1698,
                                            "name": "recordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the ID of the {@link Record} you want"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "RecordId",
                                                "id": 645
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Record",
                                                "id": 1779
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.getRecordByIdIfExists",
                                        "id": 2083
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 416,
                                    "character": 25
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "RecordQueryResult.getRecordByIdIfExists",
                                "id": 2083
                            }
                        },
                        {
                            "id": 1708,
                            "name": "getRecordColor",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get the color of a specific record in the query result. Throws if the record isn't in the\nRecordQueryResult. Watch with the `'recordColors'` and `'recordIds` keys.",
                                "returns": "a {@link Color}, or null if the record has no color in this query result.\n"
                            },
                            "signatures": [
                                {
                                    "id": 1709,
                                    "name": "getRecordColor",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get the color of a specific record in the query result. Throws if the record isn't in the\nRecordQueryResult. Watch with the `'recordColors'` and `'recordIds` keys.",
                                        "returns": "a {@link Color}, or null if the record has no color in this query result.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 1710,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the record or record ID you want the color of."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 645
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 1779
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Color",
                                                "id": 556
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.getRecordColor",
                                        "id": 2095
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 469,
                                    "character": 18
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "RecordQueryResult.getRecordColor",
                                "id": 2095
                            }
                        },
                        {
                            "id": 1705,
                            "name": "hasRecord",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Check to see if a particular record or record id is present in this query result. Returns\nfalse if the record has been deleted or is filtered out.",
                                "returns": "whether the record exists in this query result\n"
                            },
                            "signatures": [
                                {
                                    "id": 1706,
                                    "name": "hasRecord",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Check to see if a particular record or record id is present in this query result. Returns\nfalse if the record has been deleted or is filtered out.",
                                        "returns": "whether the record exists in this query result\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 1707,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the record or record id to check the presence of"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 645
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 1779
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.hasRecord",
                                        "id": 2092
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 456,
                                    "character": 13
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "RecordQueryResult.hasRecord",
                                "id": 2092
                            }
                        },
                        {
                            "id": 1599,
                            "name": "loadDataAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": ""
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1600,
                                    "name": "loadDataAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": ""
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.loadDataAsync",
                                        "id": 940
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/linked_records_query_result.ts",
                                    "line": 283,
                                    "character": 23
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.loadDataAsync",
                                "id": 940
                            }
                        },
                        {
                            "id": 1748,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "A string representation of the model for use in debugging.\n"
                            },
                            "signatures": [
                                {
                                    "id": 1749,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "A string representation of the model for use in debugging.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.toString",
                                        "id": 864
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.toString",
                                "id": 864
                            }
                        },
                        {
                            "id": 1732,
                            "name": "unloadData",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "signatures": [
                                {
                                    "id": 1733,
                                    "name": "unloadData",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "void"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.unloadData",
                                        "id": 942
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 156,
                                    "character": 14
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.unloadData",
                                "id": 942
                            }
                        },
                        {
                            "id": 1594,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": ""
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1595,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": ""
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1596,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableRecordQueryResultKey",
                                                        "id": 2176
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableRecordQueryResultKey",
                                                                "id": 2176
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 1597,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 1598,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableRecordQueryResultKey",
                                                "id": 2176
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.unwatch",
                                        "id": 2105
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/linked_records_query_result.ts",
                                    "line": 257,
                                    "character": 11
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "RecordQueryResult.unwatch",
                                "id": 2105
                            }
                        },
                        {
                            "id": 1589,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": ""
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1590,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": ""
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1591,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableRecordQueryResultKey",
                                                        "id": 2176
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableRecordQueryResultKey",
                                                                "id": 2176
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 1592,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 1593,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableRecordQueryResultKey",
                                                "id": 2176
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.watch",
                                        "id": 2100
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/linked_records_query_result.ts",
                                    "line": 229,
                                    "character": 9
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "RecordQueryResult.watch",
                                "id": 2100
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [1587, 1736, 1730, 1742, 1579, 1583, 1585]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [1699, 1696, 1708, 1705, 1599, 1748, 1732, 1594, 1589]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/linked_records_query_result.ts",
                            "line": 56,
                            "character": 30
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "RecordQueryResult",
                            "id": 2046
                        }
                    ]
                },
                {
                    "id": 2046,
                    "name": "RecordQueryResult",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A RecordQueryResult represents a set of records. It's a little bit like a one-off View in Airtable: it\ncontains a bunch of records, filtered to a useful subset of the records in the table. Those\nrecords can be sorted according to your specification, and they can be colored by a select field\nor using the color from a view. Just like a view, you can either have all the fields in a table\navailable, or you can just ask for the fields that are relevant to you. There are two types of\nQueryResult:",
                        "text": "- {@link TableOrViewQueryResult} is the most common, and is a query result filtered to all the\n  records in a specific {@link Table} or {@link View}. You can get one of these with\n  `table.selectRecords()` or `view.selectRecords()`.\n- {@link LinkedRecordsQueryResult} is a query result of all the records in a particular\n  {@link https://support.airtable.com/hc/en-us/articles/206452848-Linked-record-fields linked record cell}.\n  You can get one of these with `record.selectLinkedRecordsFromCell(someField)`.\n\nOnce you've got a query result, you need to load it before you can start working with it. When\nyou're finished, unload it:\n```js\nasync function fetchRecordsAndDoSomethingAsync(myTable) {\n    // query for all the records in \"myTable\"\n    const queryResult = myTable.selectRecords();\n\n    // load the data in the query result:\n    await queryResult.loadDataAsync();\n\n    // work with the data in the query result\n    doSomething(queryResult);\n\n    // when you're done, unload the data:\n    queryResult.unloadData();\n}\n```\n\nIf you're using a query result in a React component, you don't need to worry about this. Just\nuse {@link useRecords}, {@link useRecordIds}, {@link useRecordById} or {@link useLoadable},\nwhich will handle all that for you.\n\nWhilst loaded, a query result will automatically keep up to date with what's in Airtable:\nrecords will get added or removed, the order will change, cell values will be updated, etc.\nAgain, if you're writing a React component then our hooks will look after that for you. If not,\nyou can get notified of these changes with `.watch()`.\n\nWhen calling a `.select*` method, you can pass in a number of options:\n\n## sorts\nPass an array of sorts to control the order of records within the query result. The first sort\nin the array has the highest priority. If you don't specify sorts, the query result will use the\ninherent order of the source model: the same order you'd see in the main UI for views and linked\nrecord fields, and an arbitrary (but stable) order for tables.\n\n```js\nview.selectRecords({\n    sorts: [\n        // sort by someField in ascending order...\n        {field: someField},\n        // then by someOtherField in descending order\n        {field: someOtherField, direction: 'desc'},\n    ]\n});\n```\n\n## fields\nGenerally, it's a good idea to load as little data into your block as possible - Airtable bases\ncan get pretty big, and we have to keep all that information in memory and up to date if you ask\nfor it. The fields option lets you make sure that only data relevant to you is loaded.\n\nYou can specify fields with a {@link Field}, by ID, or by name:\n```js\nview.selectRecords({\n    fields: [\n        // we want to only load fieldA:\n        fieldA,\n        // the field with this id:\n        'fldXXXXXXXXXXXXXX',\n        // and the field named 'Rating':\n        'Rating',\n    ],\n});\n```\n\n## recordColorMode\nJust like a view in Airtable, you can control the colors of records in a field. There are three\nsupported record color modes:\n\nBy taking the colors the records have according to the rules of a specific view:\n```js\nimport {recordColoring} from '@airtable/blocks/models';\n\nsomeTable.selectRecords({\n    recordColorMode: recordColoring.modes.byView(someView),\n});\n```\n\nBased on the color of a single select field in the table:\n```js\nimport {recordColoring} from '@airtable/blocks/models';\n\nsomeView.selectRecords({\n    recordColorMode: recordColoring.modes.bySelectField(someSelectField),\n});\n```\n\nBy default, views will have whichever coloring is set up in Airtable and tables won't have any\nrecord coloring:\n\n```js\n// these two are the same:\nsomeView.selectRecords();\nsomeView.selectRecords({\n    recordColorMode: recordColoring.modes.byView(someView),\n});\n\n// as are these two:\nsomeTable.selectRecords();\nsomeTable.selectRecords({\n    recordColorMode: recordColoring.modes.none(),\n});\n```\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "models/Query results/RecordQueryResult\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 2047,
                            "name": "DataType",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 2053,
                            "name": "fields",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The fields that were used to create this QueryResult.\nNull if fields were not specified, which means the QueryResult\nwill load all fields in the table."
                            },
                            "getSignature": [
                                {
                                    "id": 2054,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The fields that were used to create this QueryResult.\nNull if fields were not specified, which means the QueryResult\nwill load all fields in the table."
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Array",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Field",
                                                        "id": 1927
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 242,
                                    "character": 14
                                }
                            ]
                        },
                        {
                            "id": 2139,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 2140,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.id",
                                        "id": 852
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.id",
                                "id": 852
                            }
                        },
                        {
                            "id": 2127,
                            "name": "isDataLoaded",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "getSignature": [
                                {
                                    "id": 2128,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.isDataLoaded",
                                        "id": 932
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 92,
                                    "character": 20
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.isDataLoaded",
                                "id": 932
                            }
                        },
                        {
                            "id": 2145,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 2146,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.isDeleted",
                                        "id": 858
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.isDeleted",
                                "id": 858
                            }
                        },
                        {
                            "id": 2049,
                            "name": "recordIds",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The record IDs in this QueryResult.\nThrows if data is not loaded yet.\nCan be watched."
                            },
                            "getSignature": [
                                {
                                    "id": 2050,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The record IDs in this QueryResult.\nThrows if data is not loaded yet.\nCan be watched."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "RecordId",
                                                "id": 645
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 225,
                                    "character": 17
                                }
                            ]
                        },
                        {
                            "id": 2081,
                            "name": "records",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The records in this RecordQueryResult.\nThrows if data is not loaded yet.\nCan be watched."
                            },
                            "getSignature": [
                                {
                                    "id": 2082,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The records in this RecordQueryResult.\nThrows if data is not loaded yet.\nCan be watched."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Record",
                                                "id": 1779
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 399,
                                    "character": 15
                                }
                            ]
                        },
                        {
                            "id": 2086,
                            "name": "getRecordById",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get a specific record in the query result, or throws if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`.",
                                "returns": "the record\n"
                            },
                            "signatures": [
                                {
                                    "id": 2087,
                                    "name": "getRecordById",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get a specific record in the query result, or throws if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`.",
                                        "returns": "the record\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2088,
                                            "name": "recordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the ID of the {@link Record} you want"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "RecordId",
                                                "id": 645
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Record",
                                        "id": 1779
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 432,
                                    "character": 17
                                }
                            ]
                        },
                        {
                            "id": 2083,
                            "name": "getRecordByIdIfExists",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get a specific record in the query result, or null if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`.",
                                "returns": "the record\n"
                            },
                            "signatures": [
                                {
                                    "id": 2084,
                                    "name": "getRecordByIdIfExists",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get a specific record in the query result, or null if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`.",
                                        "returns": "the record\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2085,
                                            "name": "recordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the ID of the {@link Record} you want"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "RecordId",
                                                "id": 645
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Record",
                                                "id": 1779
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 416,
                                    "character": 25
                                }
                            ]
                        },
                        {
                            "id": 2095,
                            "name": "getRecordColor",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get the color of a specific record in the query result. Throws if the record isn't in the\nRecordQueryResult. Watch with the `'recordColors'` and `'recordIds` keys.",
                                "returns": "a {@link Color}, or null if the record has no color in this query result.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2096,
                                    "name": "getRecordColor",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get the color of a specific record in the query result. Throws if the record isn't in the\nRecordQueryResult. Watch with the `'recordColors'` and `'recordIds` keys.",
                                        "returns": "a {@link Color}, or null if the record has no color in this query result.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2097,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the record or record ID you want the color of."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 645
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 1779
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Color",
                                                "id": 556
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 469,
                                    "character": 18
                                }
                            ]
                        },
                        {
                            "id": 2092,
                            "name": "hasRecord",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Check to see if a particular record or record id is present in this query result. Returns\nfalse if the record has been deleted or is filtered out.",
                                "returns": "whether the record exists in this query result\n"
                            },
                            "signatures": [
                                {
                                    "id": 2093,
                                    "name": "hasRecord",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Check to see if a particular record or record id is present in this query result. Returns\nfalse if the record has been deleted or is filtered out.",
                                        "returns": "whether the record exists in this query result\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2094,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the record or record id to check the presence of"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 645
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 1779
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 456,
                                    "character": 13
                                }
                            ]
                        },
                        {
                            "id": 2133,
                            "name": "loadDataAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Will cause all the async data to be fetched and retained. Every call to\n`loadDataAsync` should have a matching call to `unloadData`.",
                                "text": "Returns a Promise that will resolve once the data is loaded.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2134,
                                    "name": "loadDataAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Will cause all the async data to be fetched and retained. Every call to\n`loadDataAsync` should have a matching call to `unloadData`.",
                                        "text": "Returns a Promise that will resolve once the data is loaded.\n"
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.loadDataAsync",
                                        "id": 940
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 122,
                                    "character": 23
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.loadDataAsync",
                                "id": 940
                            }
                        },
                        {
                            "id": 2151,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "A string representation of the model for use in debugging.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2152,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "A string representation of the model for use in debugging.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.toString",
                                        "id": 864
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.toString",
                                "id": 864
                            }
                        },
                        {
                            "id": 2135,
                            "name": "unloadData",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "signatures": [
                                {
                                    "id": 2136,
                                    "name": "unloadData",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "void"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.unloadData",
                                        "id": 942
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 156,
                                    "character": 14
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.unloadData",
                                "id": 942
                            }
                        },
                        {
                            "id": 2105,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatch keys watched with `.watch`.",
                                "text": "Should be called with the same arguments given to `.watch`.\n\nUnwatching a key that needs to load data asynchronously will automatically\ncause the data to be unloaded.\n",
                                "returns": "the array of keys that were unwatched\n"
                            },
                            "signatures": [
                                {
                                    "id": 2106,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatch keys watched with `.watch`.",
                                        "text": "Should be called with the same arguments given to `.watch`.\n\nUnwatching a key that needs to load data asynchronously will automatically\ncause the data to be unloaded.\n",
                                        "returns": "the array of keys that were unwatched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2107,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to unwatch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableRecordQueryResultKey",
                                                        "id": 2176
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableRecordQueryResultKey",
                                                                "id": 2176
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2108,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the function passed to `.watch` for these keys"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 2109,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the context that was passed to `.watch` for this `callback`"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableRecordQueryResultKey",
                                                "id": 2176
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.unwatch",
                                        "id": 927
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 552,
                                    "character": 11
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.unwatch",
                                "id": 927
                            }
                        },
                        {
                            "id": 2100,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get notified of changes to the query result.",
                                "text": "Watchable keys are:\n- `'records'`\n- `'recordIds'`\n- `'cellValues'`\n- `'recordColors'`\n- `'isDataLoaded'`\n- `'cellValuesInField:' + someFieldId`\n\nEvery call to `.watch` should have a matching call to `.unwatch`.\n\nWatching a key that needs to load data asynchronously will automatically\ncause the data to be fetched. Once the data is available, the `callback`\nwill be called.\n",
                                "returns": "the array of keys that were watched\n"
                            },
                            "signatures": [
                                {
                                    "id": 2101,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get notified of changes to the query result.",
                                        "text": "Watchable keys are:\n- `'records'`\n- `'recordIds'`\n- `'cellValues'`\n- `'recordColors'`\n- `'isDataLoaded'`\n- `'cellValuesInField:' + someFieldId`\n\nEvery call to `.watch` should have a matching call to `.unwatch`.\n\nWatching a key that needs to load data asynchronously will automatically\ncause the data to be fetched. Once the data is available, the `callback`\nwill be called.\n",
                                        "returns": "the array of keys that were watched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2102,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to watch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableRecordQueryResultKey",
                                                        "id": 2176
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableRecordQueryResultKey",
                                                                "id": 2176
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2103,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "a function to call when those keys change"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 2104,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "an optional context for `this` in `callback`."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableRecordQueryResultKey",
                                                "id": 2176
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.watch",
                                        "id": 922
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 525,
                                    "character": 9
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.watch",
                                "id": 922
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [2053, 2139, 2127, 2145, 2049, 2081]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [2086, 2083, 2095, 2092, 2133, 2151, 2135, 2105, 2100]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/record_query_result.ts",
                            "line": 212,
                            "character": 23
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AbstractModelWithAsyncData",
                            "id": 907,
                            "typeArguments": [
                                {
                                    "type": "typeParameter",
                                    "name": "DataType"
                                },
                                {
                                    "type": "reference",
                                    "name": "WatchableRecordQueryResultKey",
                                    "id": 2176
                                }
                            ]
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TableOrViewQueryResult",
                            "id": 1321
                        },
                        {
                            "type": "reference",
                            "name": "LinkedRecordsQueryResult",
                            "id": 1546
                        }
                    ]
                },
                {
                    "id": 1321,
                    "name": "TableOrViewQueryResult",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Represents a set of records directly from a view or table. See {@link RecordQueryResult} for main\ndocumentation.",
                        "text": "Do not instantiate. You can get instances of this class by calling\n`table.selectRecords` or `view.selectRecords`.\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "models/Query results/TableOrViewQueryResult\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 1369,
                            "name": "fields",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The fields that were used to create this RecordQueryResult.\nNull if fields were not specified, which means the RecordQueryResult\nwill load all fields in the table."
                            },
                            "getSignature": [
                                {
                                    "id": 1370,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The fields that were used to create this RecordQueryResult.\nNull if fields were not specified, which means the RecordQueryResult\nwill load all fields in the table."
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Array",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Field",
                                                        "id": 1927
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.fields",
                                        "id": 2053
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table_or_view_query_result.ts",
                                    "line": 239,
                                    "character": 14
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "RecordQueryResult.fields",
                                "id": 2053
                            }
                        },
                        {
                            "id": 1511,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 1512,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.id",
                                        "id": 852
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.id",
                                "id": 852
                            }
                        },
                        {
                            "id": 1507,
                            "name": "isDataLoaded",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "getSignature": [
                                {
                                    "id": 1508,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.isDataLoaded",
                                        "id": 932
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 92,
                                    "character": 20
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.isDataLoaded",
                                "id": 932
                            }
                        },
                        {
                            "id": 1515,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 1516,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.isDeleted",
                                        "id": 858
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.isDeleted",
                                "id": 858
                            }
                        },
                        {
                            "id": 1362,
                            "name": "recordIds",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The record IDs in this RecordQueryResult.\nThrows if data is not loaded yet.\nCan be watched."
                            },
                            "getSignature": [
                                {
                                    "id": 1363,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The record IDs in this RecordQueryResult.\nThrows if data is not loaded yet.\nCan be watched."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.recordIds",
                                        "id": 2049
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table_or_view_query_result.ts",
                                    "line": 208,
                                    "character": 17
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "RecordQueryResult.recordIds",
                                "id": 2049
                            }
                        },
                        {
                            "id": 1471,
                            "name": "records",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The records in this RecordQueryResult.\nThrows if data is not loaded yet.\nCan be watched."
                            },
                            "getSignature": [
                                {
                                    "id": 1472,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The records in this RecordQueryResult.\nThrows if data is not loaded yet.\nCan be watched."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Record",
                                                "id": 1779
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.records",
                                        "id": 2081
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 399,
                                    "character": 15
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "RecordQueryResult.records",
                                "id": 2081
                            }
                        },
                        {
                            "id": 1476,
                            "name": "getRecordById",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get a specific record in the query result, or throws if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`.",
                                "returns": "the record\n"
                            },
                            "signatures": [
                                {
                                    "id": 1477,
                                    "name": "getRecordById",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get a specific record in the query result, or throws if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`.",
                                        "returns": "the record\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 1478,
                                            "name": "recordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the ID of the {@link Record} you want"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "RecordId",
                                                "id": 645
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Record",
                                        "id": 1779
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.getRecordById",
                                        "id": 2086
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 432,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "RecordQueryResult.getRecordById",
                                "id": 2086
                            }
                        },
                        {
                            "id": 1473,
                            "name": "getRecordByIdIfExists",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get a specific record in the query result, or null if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`.",
                                "returns": "the record\n"
                            },
                            "signatures": [
                                {
                                    "id": 1474,
                                    "name": "getRecordByIdIfExists",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get a specific record in the query result, or null if that record doesn't exist or is\nfiltered out. Throws if data is not loaded yet. Watch using `'recordIds'`.",
                                        "returns": "the record\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 1475,
                                            "name": "recordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the ID of the {@link Record} you want"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "RecordId",
                                                "id": 645
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Record",
                                                "id": 1779
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.getRecordByIdIfExists",
                                        "id": 2083
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 416,
                                    "character": 25
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "RecordQueryResult.getRecordByIdIfExists",
                                "id": 2083
                            }
                        },
                        {
                            "id": 1485,
                            "name": "getRecordColor",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get the color of a specific record in the query result. Throws if the record isn't in the\nRecordQueryResult. Watch with the `'recordColors'` and `'recordIds` keys.",
                                "returns": "a {@link Color}, or null if the record has no color in this query result.\n"
                            },
                            "signatures": [
                                {
                                    "id": 1486,
                                    "name": "getRecordColor",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get the color of a specific record in the query result. Throws if the record isn't in the\nRecordQueryResult. Watch with the `'recordColors'` and `'recordIds` keys.",
                                        "returns": "a {@link Color}, or null if the record has no color in this query result.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 1487,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the record or record ID you want the color of."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 645
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 1779
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Color",
                                                "id": 556
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.getRecordColor",
                                        "id": 2095
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 469,
                                    "character": 18
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "RecordQueryResult.getRecordColor",
                                "id": 2095
                            }
                        },
                        {
                            "id": 1482,
                            "name": "hasRecord",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Check to see if a particular record or record id is present in this query result. Returns\nfalse if the record has been deleted or is filtered out.",
                                "returns": "whether the record exists in this query result\n"
                            },
                            "signatures": [
                                {
                                    "id": 1483,
                                    "name": "hasRecord",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Check to see if a particular record or record id is present in this query result. Returns\nfalse if the record has been deleted or is filtered out.",
                                        "returns": "whether the record exists in this query result\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 1484,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the record or record id to check the presence of"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 645
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 1779
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.hasRecord",
                                        "id": 2092
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 456,
                                    "character": 13
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "RecordQueryResult.hasRecord",
                                "id": 2092
                            }
                        },
                        {
                            "id": 1395,
                            "name": "loadDataAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": ""
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1396,
                                    "name": "loadDataAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": ""
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.loadDataAsync",
                                        "id": 940
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table_or_view_query_result.ts",
                                    "line": 389,
                                    "character": 23
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.loadDataAsync",
                                "id": 940
                            }
                        },
                        {
                            "id": 1519,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "A string representation of the model for use in debugging.\n"
                            },
                            "signatures": [
                                {
                                    "id": 1520,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "A string representation of the model for use in debugging.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.toString",
                                        "id": 864
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.toString",
                                "id": 864
                            }
                        },
                        {
                            "id": 1399,
                            "name": "unloadData",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": ""
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1400,
                                    "name": "unloadData",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": ""
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "void"
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.unloadData",
                                        "id": 942
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table_or_view_query_result.ts",
                                    "line": 481,
                                    "character": 14
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.unloadData",
                                "id": 942
                            }
                        },
                        {
                            "id": 1390,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": ""
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1391,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": ""
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1392,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableRecordQueryResultKey",
                                                        "id": 2176
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableRecordQueryResultKey",
                                                                "id": 2176
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 1393,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 1394,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableRecordQueryResultKey",
                                                "id": 2176
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.unwatch",
                                        "id": 2105
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table_or_view_query_result.ts",
                                    "line": 354,
                                    "character": 11
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "RecordQueryResult.unwatch",
                                "id": 2105
                            }
                        },
                        {
                            "id": 1385,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": ""
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 1386,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": ""
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 1387,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableRecordQueryResultKey",
                                                        "id": 2176
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableRecordQueryResultKey",
                                                                "id": 2176
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 1388,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 1389,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableRecordQueryResultKey",
                                                "id": 2176
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "RecordQueryResult.watch",
                                        "id": 2100
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table_or_view_query_result.ts",
                                    "line": 307,
                                    "character": 9
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "RecordQueryResult.watch",
                                "id": 2100
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [1369, 1511, 1507, 1515, 1362, 1471]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [1476, 1473, 1485, 1482, 1395, 1519, 1399, 1390, 1385]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/table_or_view_query_result.ts",
                            "line": 58,
                            "character": 28
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "RecordQueryResult",
                            "id": 2046,
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "TableOrViewQueryResultData"
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 2036,
                    "name": "RecordQueryResultOpts",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 2038,
                            "name": "fields",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The fields (or field names or field ids) to load. Falsey values will be removed."
                            },
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 77,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Field",
                                                "id": 1927
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "false"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 2039,
                            "name": "recordColorMode",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "How records in this QueryResult should be colored."
                            },
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 79,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    },
                                    {
                                        "type": "reference",
                                        "name": "RecordColorMode",
                                        "id": 1070
                                    }
                                ]
                            }
                        },
                        {
                            "id": 2037,
                            "name": "sorts",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The order in which to sort the query result"
                            },
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 75,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "SortConfig",
                                        "id": 2030
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [2038, 2039, 2037]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/record_query_result.ts",
                            "line": 73,
                            "character": 38
                        }
                    ]
                },
                {
                    "id": 2030,
                    "name": "SortConfig",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {},
                    "children": [
                        {
                            "id": 2032,
                            "name": "direction",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The order to sort in. Defaults to asc."
                            },
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 63,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "stringLiteral",
                                        "value": "asc"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "desc"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 2031,
                            "name": "field",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "A field, field id, or field name."
                            },
                            "sources": [
                                {
                                    "fileName": "src/models/record_query_result.ts",
                                    "line": 61,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Field",
                                        "id": 1927
                                    },
                                    {
                                        "type": "reference",
                                        "name": "FieldId",
                                        "id": 635
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [2032, 2031]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/record_query_result.ts",
                            "line": 59,
                            "character": 20
                        }
                    ]
                },
                {
                    "id": 2176,
                    "name": "WatchableRecordQueryResultKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A key in {@link RecordQueryResult} that can be watched\n- `records`\n- `recordIds`\n- `cellValues`\n- `recordColors`\n- `isDataLoaded`\n- `cellValuesInField:{FIELD_ID}`"
                    },
                    "sources": [
                        {
                            "fileName": "src/models/record_query_result.ts",
                            "line": 54,
                            "character": 41
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "stringLiteral",
                                        "value": "recordColors"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "records"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "recordIds"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "cellValues"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "isDataLoaded"
                                    }
                                ]
                            },
                            {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [1546, 2046, 1321]
                },
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [2036, 2030]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [2176]
                }
            ],
            "sources": [
                {
                    "fileName": "src/models/table_or_view_query_result.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 2719,
            "name": "@airtable/blocks/models: Session",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/models/session.ts",
            "comment": {},
            "children": [
                {
                    "id": 2724,
                    "name": "Session",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Model class representing the current user's session.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {session} from '@airtable/blocks';\n\nif (session.currentUser !== null) {\n    console.log(\"The current user's name is\", session.currentUser.name);\n} else {\n    console.log('This block is being viewed in a public share');\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "models/advanced/Session\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 2737,
                            "name": "currentUser",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The current user, or `null` if the block is running in a publicly shared base.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {session} from '@airtable/blocks';\nif (session.currentUser) {\n    console.log(session.currentUser.id);\n    console.log(session.currentUser.email);\n    console.log(session.currentUser.name);\n}\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 2738,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The current user, or `null` if the block is running in a publicly shared base.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {session} from '@airtable/blocks';\nif (session.currentUser) {\n    console.log(session.currentUser.id);\n    console.log(session.currentUser.email);\n    console.log(session.currentUser.name);\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "CollaboratorData",
                                                "id": 693
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/session.ts",
                                    "line": 97,
                                    "character": 19
                                }
                            ]
                        },
                        {
                            "id": 2754,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 2755,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.id",
                                        "id": 852
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.id",
                                "id": 852
                            }
                        },
                        {
                            "id": 2758,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 2759,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.isDeleted",
                                        "id": 858
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.isDeleted",
                                "id": 858
                            }
                        },
                        {
                            "id": 2764,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "A string representation of the model for use in debugging.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2765,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "A string representation of the model for use in debugging.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.toString",
                                        "id": 864
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.toString",
                                "id": 864
                            }
                        },
                        {
                            "id": 2792,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatch keys watched with `.watch`.",
                                "text": "Should be called with the same arguments given to `.watch`.\n",
                                "returns": "the array of keys that were unwatched\n"
                            },
                            "signatures": [
                                {
                                    "id": 2793,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatch keys watched with `.watch`.",
                                        "text": "Should be called with the same arguments given to `.watch`.\n",
                                        "returns": "the array of keys that were unwatched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2794,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to unwatch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableSessionKey",
                                                        "id": 2808
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableSessionKey",
                                                                "id": 2808
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2795,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the function passed to `.watch` for these keys"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 2796,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 2797,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 2798,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2799,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableSessionKey",
                                                                        "id": 2808
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2800,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 111,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 2801,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the context that was passed to `.watch` for this `callback`"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableSessionKey",
                                                "id": 2808
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 767
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 109,
                                    "character": 11
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 767
                            }
                        },
                        {
                            "id": 2782,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get notified of changes to the model.",
                                "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n",
                                "returns": "the array of keys that were watched\n"
                            },
                            "signatures": [
                                {
                                    "id": 2783,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get notified of changes to the model.",
                                        "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n",
                                        "returns": "the array of keys that were watched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2784,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to watch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableSessionKey",
                                                        "id": 2808
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableSessionKey",
                                                                "id": 2808
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2785,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "a function to call when those keys change"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 2786,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 2787,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 2788,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2789,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableSessionKey",
                                                                        "id": 2808
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2790,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 65,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 2791,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "an optional context for `this` in `callback`."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableSessionKey",
                                                "id": 2808
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 757
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 63,
                                    "character": 9
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 757
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [2737, 2754, 2758]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [2764, 2792, 2782]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/session.ts",
                            "line": 48,
                            "character": 13
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AbstractModel",
                            "id": 839,
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "SessionData"
                                },
                                {
                                    "type": "reference",
                                    "name": "WatchableSessionKey",
                                    "id": 2808
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 2808,
                    "name": "WatchableSessionKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Watchable keys in {@link Session}.\n- `currentUser`\n- `permissionLevel`"
                    },
                    "sources": [
                        {
                            "fileName": "src/models/session.ts",
                            "line": 31,
                            "character": 24
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "permissionLevel"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "currentUser"
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [2724]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [2808]
                }
            ],
            "sources": [
                {
                    "fileName": "src/models/session.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 667,
            "name": "@airtable/blocks/models: Table",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/types/table.ts",
            "comment": {},
            "children": [
                {
                    "id": 2370,
                    "name": "Table",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Model class representing a table. Every {@link Base} has one or more tables.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "models/Table\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 2403,
                            "name": "description",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The description of the table, if it has one. Can be watched.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myTable.description);\n// => 'This is my table'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 2404,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The description of the table, if it has one. Can be watched.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myTable.description);\n// => 'This is my table'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 129,
                                    "character": 19
                                }
                            ]
                        },
                        {
                            "id": 2409,
                            "name": "fields",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The fields in this table. The order is arbitrary, since fields are\nonly ordered in the context of a specific view.",
                                "text": "Can be watched to know when fields are created or deleted.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(`This table has ${myTable.fields.length} fields`);\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 2410,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The fields in this table. The order is arbitrary, since fields are\nonly ordered in the context of a specific view.",
                                        "text": "Can be watched to know when fields are created or deleted.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(`This table has ${myTable.fields.length} fields`);\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Field",
                                                "id": 1927
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 169,
                                    "character": 14
                                }
                            ]
                        },
                        {
                            "id": 2541,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 2542,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.id",
                                        "id": 852
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.id",
                                "id": 852
                            }
                        },
                        {
                            "id": 2545,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 2546,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.isDeleted",
                                        "id": 858
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.isDeleted",
                                "id": 858
                            }
                        },
                        {
                            "id": 2401,
                            "name": "name",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The name of the table. Can be watched.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myTable.name);\n// => 'Table 1'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 2402,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The name of the table. Can be watched.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myTable.name);\n// => 'Table 1'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 117,
                                    "character": 12
                                }
                            ]
                        },
                        {
                            "id": 2407,
                            "name": "primaryField",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The table's primary field. Every table has exactly one primary\nfield. The primary field of a table will not change.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myTable.primaryField.name);\n// => 'Name'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 2408,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The table's primary field. Every table has exactly one primary\nfield. The primary field of a table will not change.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myTable.primaryField.name);\n// => 'Name'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Field",
                                        "id": 1927
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 154,
                                    "character": 20
                                }
                            ]
                        },
                        {
                            "id": 2405,
                            "name": "url",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The URL for the table. You can visit this URL in the browser to be taken to the table in the Airtable UI.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myTable.url);\n// => 'https://airtable.com/tblxxxxxxxxxxxxxx'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 2406,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The URL for the table. You can visit this URL in the browser to be taken to the table in the Airtable UI.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myTable.url);\n// => 'https://airtable.com/tblxxxxxxxxxxxxxx'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 141,
                                    "character": 11
                                }
                            ]
                        },
                        {
                            "id": 2423,
                            "name": "views",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The views in this table. Can be watched to know when views are created,\ndeleted, or reordered.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(`This table has ${myTable.views.length} views`);\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 2424,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The views in this table. Can be watched to know when views are created,\ndeleted, or reordered.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(`This table has ${myTable.views.length} views`);\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "View",
                                                "id": 2280
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 269,
                                    "character": 13
                                }
                            ]
                        },
                        {
                            "id": 2503,
                            "name": "checkPermissionsForCreateRecord",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Checks whether the current user has permission to create the specified record.",
                                "text": "Accepts partial input, in the same format as {@link createRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                "returns": "PermissionCheckResult `{hasPermission: true}` if the current user can create the specified record, `{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be used to display an error message to the user.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can create a specific record, when you already know what fields/cell values\n// will be set for the record.\nconst createRecordCheckResult = table.checkPermissionsForCreateRecord({\n    'Project Name': 'Advertising campaign',\n    'Budget': 100,\n});\nif (!createRecordCheckResult.hasPermission) {\n    alert(createRecordCheckResult.reasonDisplayString);\n}\n\n// Like createRecordAsync, you can use either field names or field IDs.\nconst createRecordCheckResultWithFieldIds = table.checkPermissionsForCreateRecord({\n    [projectNameField.id]: 'Cat video',\n    [budgetField.id]: 200,\n});\n\n// Check if user could potentially create a record.\n// Use when you don't know the specific fields/cell values yet (for example, to show or hide\n// UI controls that let you start creating a record.)\nconst createUnknownRecordCheckResult = table.checkPermissionsForCreateRecord();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2504,
                                    "name": "checkPermissionsForCreateRecord",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Checks whether the current user has permission to create the specified record.",
                                        "text": "Accepts partial input, in the same format as {@link createRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                        "returns": "PermissionCheckResult `{hasPermission: true}` if the current user can create the specified record, `{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be used to display an error message to the user.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can create a specific record, when you already know what fields/cell values\n// will be set for the record.\nconst createRecordCheckResult = table.checkPermissionsForCreateRecord({\n    'Project Name': 'Advertising campaign',\n    'Budget': 100,\n});\nif (!createRecordCheckResult.hasPermission) {\n    alert(createRecordCheckResult.reasonDisplayString);\n}\n\n// Like createRecordAsync, you can use either field names or field IDs.\nconst createRecordCheckResultWithFieldIds = table.checkPermissionsForCreateRecord({\n    [projectNameField.id]: 'Cat video',\n    [budgetField.id]: 200,\n});\n\n// Check if user could potentially create a record.\n// Use when you don't know the specific fields/cell values yet (for example, to show or hide\n// UI controls that let you start creating a record.)\nconst createUnknownRecordCheckResult = table.checkPermissionsForCreateRecord();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2505,
                                            "name": "fields",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "object mapping `FieldId` or field name to value for that field."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ObjectMap",
                                                "typeArguments": [
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "reference",
                                                                "name": "FieldId",
                                                                "id": 635
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "string"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "void"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "PermissionCheckResult",
                                        "id": 837
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 1130,
                                    "character": 35
                                }
                            ]
                        },
                        {
                            "id": 2512,
                            "name": "checkPermissionsForCreateRecords",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Checks whether the current user has permission to create the specified records.",
                                "text": "Accepts partial input, in the same format as {@link createRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                "returns": "PermissionCheckResult `{hasPermission: true}` if the current user can create the specified records, `{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be used to display an error message to the user.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can create specific records, when you already know what fields/cell values\n// will be set for the records.\nconst createRecordsCheckResult = table.checkPermissionsForCreateRecords([\n    // Like createRecordsAsync, fields can be specified by name or ID\n    {\n        'Project Name': 'Advertising campaign',\n        'Budget': 100,\n    },\n    {\n        [projectNameField.id]: 'Cat video',\n        [budgetField.id]: 200,\n    },\n    {},\n]);\nif (!createRecordsCheckResult.hasPermission) {\n    alert(createRecordsCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially create records.\n// Use when you don't know the specific fields/cell values yet (for example, to show or hide\n// UI controls that let you start creating records.)\n// Equivalent to table.checkPermissionsForCreateRecord()\nconst createUnknownRecordCheckResult = table.checkPermissionsForCreateRecords();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2513,
                                    "name": "checkPermissionsForCreateRecords",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Checks whether the current user has permission to create the specified records.",
                                        "text": "Accepts partial input, in the same format as {@link createRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                        "returns": "PermissionCheckResult `{hasPermission: true}` if the current user can create the specified records, `{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be used to display an error message to the user.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can create specific records, when you already know what fields/cell values\n// will be set for the records.\nconst createRecordsCheckResult = table.checkPermissionsForCreateRecords([\n    // Like createRecordsAsync, fields can be specified by name or ID\n    {\n        'Project Name': 'Advertising campaign',\n        'Budget': 100,\n    },\n    {\n        [projectNameField.id]: 'Cat video',\n        [budgetField.id]: 200,\n    },\n    {},\n]);\nif (!createRecordsCheckResult.hasPermission) {\n    alert(createRecordsCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially create records.\n// Use when you don't know the specific fields/cell values yet (for example, to show or hide\n// UI controls that let you start creating records.)\n// Equivalent to table.checkPermissionsForCreateRecord()\nconst createUnknownRecordCheckResult = table.checkPermissionsForCreateRecords();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2514,
                                            "name": "records",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "Array of objects mapping `FieldId` or field name to value for that field."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "reflection",
                                                        "declaration": {
                                                            "id": 2515,
                                                            "name": "__type",
                                                            "kind": 65536,
                                                            "kindString": "Type literal",
                                                            "flags": {},
                                                            "children": [
                                                                {
                                                                    "id": 2516,
                                                                    "name": "fields",
                                                                    "kind": 32,
                                                                    "kindString": "Variable",
                                                                    "flags": {
                                                                        "isOptional": true
                                                                    },
                                                                    "sources": [
                                                                        {
                                                                            "fileName": "src/models/table.ts",
                                                                            "line": 1280,
                                                                            "character": 27
                                                                        }
                                                                    ],
                                                                    "type": {
                                                                        "type": "union",
                                                                        "types": [
                                                                            {
                                                                                "type": "reference",
                                                                                "name": "ObjectMap",
                                                                                "typeArguments": [
                                                                                    {
                                                                                        "type": "union",
                                                                                        "types": [
                                                                                            {
                                                                                                "type": "reference",
                                                                                                "name": "FieldId",
                                                                                                "id": 635
                                                                                            },
                                                                                            {
                                                                                                "type": "intrinsic",
                                                                                                "name": "string"
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "union",
                                                                                        "types": [
                                                                                            {
                                                                                                "type": "intrinsic",
                                                                                                "name": "unknown"
                                                                                            },
                                                                                            {
                                                                                                "type": "intrinsic",
                                                                                                "name": "void"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "void"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "groups": [
                                                                {
                                                                    "title": "Variables",
                                                                    "kind": 32,
                                                                    "children": [2516]
                                                                }
                                                            ],
                                                            "sources": [
                                                                {
                                                                    "fileName": "src/models/table.ts",
                                                                    "line": 1279,
                                                                    "character": 32
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "PermissionCheckResult",
                                        "id": 837
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 1278,
                                    "character": 36
                                }
                            ]
                        },
                        {
                            "id": 2485,
                            "name": "checkPermissionsForDeleteRecord",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Checks whether the current user has permission to delete the specified record.",
                                "text": "Accepts optional input, in the same format as {@link deleteRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                "returns": "PermissionCheckResult `{hasPermission: true}` if the current user can delete the specified record, `{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be used to display an error message to the user.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can delete a specific record\nconst deleteRecordCheckResult = table.checkPermissionsForDeleteRecord(record);\nif (!deleteRecordCheckResult.hasPermission) {\n    alert(deleteRecordCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially delete a record.\n// Use when you don't know the specific record you want to delete yet (for example, to show\n// or hide UI controls that let you select a record to delete.)\nconst deleteUnknownRecordCheckResult = table.checkPermissionsForDeleteRecord();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2486,
                                    "name": "checkPermissionsForDeleteRecord",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Checks whether the current user has permission to delete the specified record.",
                                        "text": "Accepts optional input, in the same format as {@link deleteRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                        "returns": "PermissionCheckResult `{hasPermission: true}` if the current user can delete the specified record, `{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be used to display an error message to the user.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can delete a specific record\nconst deleteRecordCheckResult = table.checkPermissionsForDeleteRecord(record);\nif (!deleteRecordCheckResult.hasPermission) {\n    alert(deleteRecordCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially delete a record.\n// Use when you don't know the specific record you want to delete yet (for example, to show\n// or hide UI controls that let you select a record to delete.)\nconst deleteUnknownRecordCheckResult = table.checkPermissionsForDeleteRecord();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2487,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the record to be deleted"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 1779
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 645
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "PermissionCheckResult",
                                        "id": 837
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 906,
                                    "character": 35
                                }
                            ]
                        },
                        {
                            "id": 2494,
                            "name": "checkPermissionsForDeleteRecords",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Checks whether the current user has permission to delete the specified records.",
                                "text": "Accepts optional input, in the same format as {@link deleteRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                "returns": "PermissionCheckResult `{hasPermission: true}` if the current user can delete the specified records, `{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be used to display an error message to the user.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can delete specific records\nconst deleteRecordsCheckResult = table.checkPermissionsForDeleteRecords([record1, record2]);\nif (!deleteRecordsCheckResult.hasPermission) {\n    alert(deleteRecordsCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially delete records.\n// Use when you don't know the specific records you want to delete yet (for example, to show\n// or hide UI controls that let you select records to delete.)\n// Equivalent to table.hasPermissionToDeleteRecord()\nconst deleteUnknownRecordsCheckResult = table.checkPermissionsForDeleteRecords();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2495,
                                    "name": "checkPermissionsForDeleteRecords",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Checks whether the current user has permission to delete the specified records.",
                                        "text": "Accepts optional input, in the same format as {@link deleteRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                        "returns": "PermissionCheckResult `{hasPermission: true}` if the current user can delete the specified records, `{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be used to display an error message to the user.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can delete specific records\nconst deleteRecordsCheckResult = table.checkPermissionsForDeleteRecords([record1, record2]);\nif (!deleteRecordsCheckResult.hasPermission) {\n    alert(deleteRecordsCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially delete records.\n// Use when you don't know the specific records you want to delete yet (for example, to show\n// or hide UI controls that let you select records to delete.)\n// Equivalent to table.hasPermissionToDeleteRecord()\nconst deleteUnknownRecordsCheckResult = table.checkPermissionsForDeleteRecords();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2496,
                                            "name": "recordsOrRecordIds",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the records to be deleted"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "reference",
                                                                "name": "Record",
                                                                "id": 1779
                                                            },
                                                            {
                                                                "type": "reference",
                                                                "name": "RecordId",
                                                                "id": 645
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "PermissionCheckResult",
                                        "id": 837
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 1009,
                                    "character": 36
                                }
                            ]
                        },
                        {
                            "id": 2456,
                            "name": "checkPermissionsForUpdateRecord",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Checks whether the current user has permission to perform the given record update.",
                                "text": "Accepts partial input, in the same format as {@link updateRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                "returns": "PermissionCheckResult `{hasPermission: true}` if the current user can update the specified record, `{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be used to display an error message to the user.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can update specific fields for a specific record.\nconst updateRecordCheckResult = table.checkPermissionsForUpdateRecord(record, {\n    'Post Title': 'How to make: orange-mango pound cake',\n    'Publication Date': '2020-01-01',\n});\nif (!updateRecordCheckResult.hasPermission) {\n    alert(updateRecordCheckResult.reasonDisplayString);\n}\n\n// Like updateRecordAsync, you can use either field names or field IDs.\nconst updateRecordCheckResultWithFieldIds = table.checkPermissionsForUpdateRecord(record, {\n    [postTitleField.id]: 'Cake decorating tips & tricks',\n    [publicationDateField.id]: '2020-02-02',\n});\n\n// Check if user could update a given record, when you don't know the specific fields that\n// will be updated yet. (for example, to check whether you should allow a user to select\n// a certain record to update)\nconst updateUnknownFieldsCheckResult = table.checkPermissionsForUpdateRecord(record);\n\n// Check if user could update specific fields, when you don't know the specific record that\n// will be updated yet. (for example, if the field is selected by the user and you want to\n// check if your block can write to it)\nconst updateUnknownRecordCheckResult = table.checkPermissionsForUpdateRecord(undefined, {\n    'My field name': 'updated value',\n    // You can use undefined if you know you're going to update a field, but don't know\n    // the new cell value yet.\n    'Another field name': undefined,\n});\n\n// Check if user could perform updates within the table, without knowing the specific record\n// or fields that will be updated yet. (for example, to render your block in \"read only\"\n// mode)\nconst updateUnknownRecordAndFieldsCheckResult = table.checkPermissionsForUpdateRecord();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2457,
                                    "name": "checkPermissionsForUpdateRecord",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Checks whether the current user has permission to perform the given record update.",
                                        "text": "Accepts partial input, in the same format as {@link updateRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                        "returns": "PermissionCheckResult `{hasPermission: true}` if the current user can update the specified record, `{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be used to display an error message to the user.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can update specific fields for a specific record.\nconst updateRecordCheckResult = table.checkPermissionsForUpdateRecord(record, {\n    'Post Title': 'How to make: orange-mango pound cake',\n    'Publication Date': '2020-01-01',\n});\nif (!updateRecordCheckResult.hasPermission) {\n    alert(updateRecordCheckResult.reasonDisplayString);\n}\n\n// Like updateRecordAsync, you can use either field names or field IDs.\nconst updateRecordCheckResultWithFieldIds = table.checkPermissionsForUpdateRecord(record, {\n    [postTitleField.id]: 'Cake decorating tips & tricks',\n    [publicationDateField.id]: '2020-02-02',\n});\n\n// Check if user could update a given record, when you don't know the specific fields that\n// will be updated yet. (for example, to check whether you should allow a user to select\n// a certain record to update)\nconst updateUnknownFieldsCheckResult = table.checkPermissionsForUpdateRecord(record);\n\n// Check if user could update specific fields, when you don't know the specific record that\n// will be updated yet. (for example, if the field is selected by the user and you want to\n// check if your block can write to it)\nconst updateUnknownRecordCheckResult = table.checkPermissionsForUpdateRecord(undefined, {\n    'My field name': 'updated value',\n    // You can use undefined if you know you're going to update a field, but don't know\n    // the new cell value yet.\n    'Another field name': undefined,\n});\n\n// Check if user could perform updates within the table, without knowing the specific record\n// or fields that will be updated yet. (for example, to render your block in \"read only\"\n// mode)\nconst updateUnknownRecordAndFieldsCheckResult = table.checkPermissionsForUpdateRecord();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2458,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the record to update"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 1779
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 645
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2459,
                                            "name": "fields",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "cell values to update in that record, specified as object mapping `FieldId` or field name to value for that field."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ObjectMap",
                                                "typeArguments": [
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "reference",
                                                                "name": "FieldId",
                                                                "id": 635
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "string"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "void"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "PermissionCheckResult",
                                        "id": 837
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 563,
                                    "character": 35
                                }
                            ]
                        },
                        {
                            "id": 2470,
                            "name": "checkPermissionsForUpdateRecords",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Checks whether the current user has permission to perform the given record updates.",
                                "text": "Accepts partial input, in the same format as {@link updateRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                "returns": "PermissionCheckResult `{hasPermission: true}` if the current user can update the specified records, `{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be used to display an error message to the user.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst recordsToUpdate = [\n    {\n        // Validating a complete record update\n        id: record1.id,\n        fields: {\n            'Post Title': 'How to make: orange-mango pound cake',\n            'Publication Date': '2020-01-01',\n        },\n    },\n    {\n        // Like updateRecordsAsync, fields can be specified by name or ID\n        id: record2.id,\n        fields: {\n            [postTitleField.id]: 'Cake decorating tips & tricks',\n            [publicationDateField.id]: '2020-02-02',\n        },\n    },\n    {\n        // Validating an update to a specific record, not knowing what fields will be updated\n        id: record3.id,\n    },\n    {\n        // Validating an update to specific cell values, not knowing what record will be updated\n        fields: {\n            'My field name': 'updated value for unknown record',\n            // You can use undefined if you know you're going to update a field, but don't know\n            // the new cell value yet.\n            'Another field name': undefined,\n        },\n    },\n];\n\nconst updateRecordsCheckResult = table.checkPermissionsForUpdateRecords(recordsToUpdate);\nif (!updateRecordsCheckResult.hasPermission) {\n    alert(updateRecordsCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially update records.\n// Equivalent to table.checkPermissionsForUpdateRecord()\nconst updateUnknownRecordAndFieldsCheckResult = table.checkPermissionsForUpdateRecords();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2471,
                                    "name": "checkPermissionsForUpdateRecords",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Checks whether the current user has permission to perform the given record updates.",
                                        "text": "Accepts partial input, in the same format as {@link updateRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                        "returns": "PermissionCheckResult `{hasPermission: true}` if the current user can update the specified records, `{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be used to display an error message to the user.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst recordsToUpdate = [\n    {\n        // Validating a complete record update\n        id: record1.id,\n        fields: {\n            'Post Title': 'How to make: orange-mango pound cake',\n            'Publication Date': '2020-01-01',\n        },\n    },\n    {\n        // Like updateRecordsAsync, fields can be specified by name or ID\n        id: record2.id,\n        fields: {\n            [postTitleField.id]: 'Cake decorating tips & tricks',\n            [publicationDateField.id]: '2020-02-02',\n        },\n    },\n    {\n        // Validating an update to a specific record, not knowing what fields will be updated\n        id: record3.id,\n    },\n    {\n        // Validating an update to specific cell values, not knowing what record will be updated\n        fields: {\n            'My field name': 'updated value for unknown record',\n            // You can use undefined if you know you're going to update a field, but don't know\n            // the new cell value yet.\n            'Another field name': undefined,\n        },\n    },\n];\n\nconst updateRecordsCheckResult = table.checkPermissionsForUpdateRecords(recordsToUpdate);\nif (!updateRecordsCheckResult.hasPermission) {\n    alert(updateRecordsCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially update records.\n// Equivalent to table.checkPermissionsForUpdateRecord()\nconst updateUnknownRecordAndFieldsCheckResult = table.checkPermissionsForUpdateRecords();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2472,
                                            "name": "records",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "Array of objects containing recordId and fields/cellValues to update for that record (specified as an object mapping `FieldId` or field name to cell value)"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "reflection",
                                                        "declaration": {
                                                            "id": 2473,
                                                            "name": "__type",
                                                            "kind": 65536,
                                                            "kindString": "Type literal",
                                                            "flags": {},
                                                            "children": [
                                                                {
                                                                    "id": 2475,
                                                                    "name": "fields",
                                                                    "kind": 32,
                                                                    "kindString": "Variable",
                                                                    "flags": {
                                                                        "isOptional": true
                                                                    },
                                                                    "sources": [
                                                                        {
                                                                            "fileName": "src/models/table.ts",
                                                                            "line": 771,
                                                                            "character": 27
                                                                        }
                                                                    ],
                                                                    "type": {
                                                                        "type": "union",
                                                                        "types": [
                                                                            {
                                                                                "type": "reference",
                                                                                "name": "ObjectMap",
                                                                                "typeArguments": [
                                                                                    {
                                                                                        "type": "union",
                                                                                        "types": [
                                                                                            {
                                                                                                "type": "reference",
                                                                                                "name": "FieldId",
                                                                                                "id": 635
                                                                                            },
                                                                                            {
                                                                                                "type": "intrinsic",
                                                                                                "name": "string"
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "union",
                                                                                        "types": [
                                                                                            {
                                                                                                "type": "intrinsic",
                                                                                                "name": "unknown"
                                                                                            },
                                                                                            {
                                                                                                "type": "intrinsic",
                                                                                                "name": "void"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "void"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2474,
                                                                    "name": "id",
                                                                    "kind": 32,
                                                                    "kindString": "Variable",
                                                                    "flags": {
                                                                        "isOptional": true
                                                                    },
                                                                    "sources": [
                                                                        {
                                                                            "fileName": "src/models/table.ts",
                                                                            "line": 770,
                                                                            "character": 23
                                                                        }
                                                                    ],
                                                                    "type": {
                                                                        "type": "union",
                                                                        "types": [
                                                                            {
                                                                                "type": "reference",
                                                                                "name": "RecordId",
                                                                                "id": 645
                                                                            },
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "void"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "groups": [
                                                                {
                                                                    "title": "Variables",
                                                                    "kind": 32,
                                                                    "children": [2475, 2474]
                                                                }
                                                            ],
                                                            "sources": [
                                                                {
                                                                    "fileName": "src/models/table.ts",
                                                                    "line": 769,
                                                                    "character": 32
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "PermissionCheckResult",
                                        "id": 837
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 768,
                                    "character": 36
                                }
                            ]
                        },
                        {
                            "id": 2500,
                            "name": "createRecordAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Creates a new record with the specified cell values.",
                                "text": "Throws an error if the user does not have permission to create the given records, or\nif invalid input is provided (eg. invalid cell values).\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the new\nrecord to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your block\nbefore the promise resolves.\n",
                                "returns": "A promise that will resolve to the RecordId of the new record, once the new record is persisted to Airtable.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nfunction createNewRecord(recordFields) {\n    if (table.hasPermissionToCreateRecord(recordFields)) {\n        table.createRecordAsync(recordFields);\n    }\n    // You can now access the new record in your block (eg `table.selectRecords()`) but it is\n    // still being saved to Airtable servers (eg. other users may not be able to see it yet.)\n}\n\nasync function createNewRecordAsync(recordFields) {\n    if (table.hasPermissionToCreateRecord(recordFields)) {\n        const newRecordId = await table.createRecordAsync(recordFields);\n    }\n    // New record has been saved to Airtable servers.\n    alert(`new record with ID ${newRecordId} has been created`);\n}\n\n// Fields can be specified by name or ID\ncreateNewRecord({\n    'Project Name': 'Advertising campaign',\n    'Budget': 100,\n});\ncreateNewRecord({\n    [projectNameField.id]: 'Cat video',\n    [budgetField.id]: 200,\n});\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2501,
                                    "name": "createRecordAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Creates a new record with the specified cell values.",
                                        "text": "Throws an error if the user does not have permission to create the given records, or\nif invalid input is provided (eg. invalid cell values).\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the new\nrecord to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your block\nbefore the promise resolves.\n",
                                        "returns": "A promise that will resolve to the RecordId of the new record, once the new record is persisted to Airtable.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nfunction createNewRecord(recordFields) {\n    if (table.hasPermissionToCreateRecord(recordFields)) {\n        table.createRecordAsync(recordFields);\n    }\n    // You can now access the new record in your block (eg `table.selectRecords()`) but it is\n    // still being saved to Airtable servers (eg. other users may not be able to see it yet.)\n}\n\nasync function createNewRecordAsync(recordFields) {\n    if (table.hasPermissionToCreateRecord(recordFields)) {\n        const newRecordId = await table.createRecordAsync(recordFields);\n    }\n    // New record has been saved to Airtable servers.\n    alert(`new record with ID ${newRecordId} has been created`);\n}\n\n// Fields can be specified by name or ID\ncreateNewRecord({\n    'Project Name': 'Advertising campaign',\n    'Budget': 100,\n});\ncreateNewRecord({\n    [projectNameField.id]: 'Cat video',\n    [budgetField.id]: 200,\n});\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2502,
                                            "name": "fields",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "object mapping `FieldId` or field name to value for that field."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ObjectMap",
                                                "typeArguments": [
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "reference",
                                                                "name": "FieldId",
                                                                "id": 635
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "string"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                ]
                                            },
                                            "defaultValue": " {}"
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "RecordId",
                                                "id": 645
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 1093,
                                    "character": 27
                                }
                            ]
                        },
                        {
                            "id": 2509,
                            "name": "createRecordsAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Creates new records with the specified cell values.",
                                "text": "Throws an error if the user does not have permission to create the given records, or\nif invalid input is provided (eg. invalid cell values).\n\nYou may only create up to 50 records in one call to `createRecordsAsync`.\nSee [Writing changes to records](/packages/sdk/docs/guide_writes.md) for more information\nabout write limits.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the new\nrecord to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your block\nbefore the promise resolves.\n",
                                "returns": "A promise that will resolve to array of RecordIds of the new records, once the new records are persisted to Airtable.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst recordDefs = [\n    // Fields can be specified by name or ID\n    {\n        'Project Name': 'Advertising campaign',\n        'Budget': 100,\n    },\n    {\n        [projectNameField.id]: 'Cat video',\n        [budgetField.id]: 200,\n    },\n    // Specifying no fields will create a new record with no cell values set\n    {},\n];\n\nfunction createNewRecords() {\n    if (table.hasPermissionToCreateRecords(recordDefs)) {\n        table.createRecordsAsync(recordDefs);\n    }\n    // You can now access the new records in your block (eg `table.selectRecords()`) but they\n    // are still being saved to Airtable servers (eg. other users may not be able to see them\n    // yet.)\n}\n\nasync function createNewRecordsAsync() {\n    if (table.hasPermissionToCreateRecords(recordDefs)) {\n        const newRecordIds = await table.createRecordsAsync(recordDefs);\n    }\n    // New records have been saved to Airtable servers.\n    alert(`new records with IDs ${newRecordIds} have been created`);\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2510,
                                    "name": "createRecordsAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Creates new records with the specified cell values.",
                                        "text": "Throws an error if the user does not have permission to create the given records, or\nif invalid input is provided (eg. invalid cell values).\n\nYou may only create up to 50 records in one call to `createRecordsAsync`.\nSee [Writing changes to records](/packages/sdk/docs/guide_writes.md) for more information\nabout write limits.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the new\nrecord to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your block\nbefore the promise resolves.\n",
                                        "returns": "A promise that will resolve to array of RecordIds of the new records, once the new records are persisted to Airtable.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst recordDefs = [\n    // Fields can be specified by name or ID\n    {\n        'Project Name': 'Advertising campaign',\n        'Budget': 100,\n    },\n    {\n        [projectNameField.id]: 'Cat video',\n        [budgetField.id]: 200,\n    },\n    // Specifying no fields will create a new record with no cell values set\n    {},\n];\n\nfunction createNewRecords() {\n    if (table.hasPermissionToCreateRecords(recordDefs)) {\n        table.createRecordsAsync(recordDefs);\n    }\n    // You can now access the new records in your block (eg `table.selectRecords()`) but they\n    // are still being saved to Airtable servers (eg. other users may not be able to see them\n    // yet.)\n}\n\nasync function createNewRecordsAsync() {\n    if (table.hasPermissionToCreateRecords(recordDefs)) {\n        const newRecordIds = await table.createRecordsAsync(recordDefs);\n    }\n    // New records have been saved to Airtable servers.\n    alert(`new records with IDs ${newRecordIds} have been created`);\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2511,
                                            "name": "records",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "Array of objects mapping `FieldId` or field name to value for that field."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "ObjectMap",
                                                        "typeArguments": [
                                                            {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "FieldId",
                                                                        "id": 635
                                                                    },
                                                                    {
                                                                        "type": "intrinsic",
                                                                        "name": "string"
                                                                    }
                                                                ]
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Array",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 645
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 1227,
                                    "character": 28
                                }
                            ]
                        },
                        {
                            "id": 2482,
                            "name": "deleteRecordAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Delete the given record.",
                                "text": "Throws an error if the user does not have permission to delete the given record.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the\ndelete to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your block\nbefore the promise resolves.\n",
                                "returns": "A promise that will resolve once the delete is persisted to Airtable.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nfunction deleteRecord(record) {\n    if (table.hasPermissionToDeleteRecord(record)) {\n        table.deleteRecordAsync(record);\n    }\n    // The record is now deleted within your block (eg will not be returned in\n    // `table.selectRecords`) but it is still being saved to Airtable servers (eg. it may\n    // not look deleted to other users yet)\n}\n\nasync function deleteRecordAsync(record) {\n    if (table.hasPermissionToDeleteRecord(record)) {\n        await table.deleteRecordAsync(record);\n    }\n    // Record deletion has been saved to Airtable servers.\n    alert('record has been deleted');\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2483,
                                    "name": "deleteRecordAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Delete the given record.",
                                        "text": "Throws an error if the user does not have permission to delete the given record.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the\ndelete to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your block\nbefore the promise resolves.\n",
                                        "returns": "A promise that will resolve once the delete is persisted to Airtable.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nfunction deleteRecord(record) {\n    if (table.hasPermissionToDeleteRecord(record)) {\n        table.deleteRecordAsync(record);\n    }\n    // The record is now deleted within your block (eg will not be returned in\n    // `table.selectRecords`) but it is still being saved to Airtable servers (eg. it may\n    // not look deleted to other users yet)\n}\n\nasync function deleteRecordAsync(record) {\n    if (table.hasPermissionToDeleteRecord(record)) {\n        await table.deleteRecordAsync(record);\n    }\n    // Record deletion has been saved to Airtable servers.\n    alert('record has been deleted');\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2484,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the record to be deleted"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 1779
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 645
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 881,
                                    "character": 27
                                }
                            ]
                        },
                        {
                            "id": 2491,
                            "name": "deleteRecordsAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Delete the given records.",
                                "text": "Throws an error if the user does not have permission to delete the given records.\n\nYou may only delete up to 50 records in one call to `deleteRecordsAsync`.\nSee [Writing changes to records](/packages/sdk/docs/guide_writes.md) for more information\nabout write limits.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the\ndelete to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your block\nbefore the promise resolves.\n",
                                "returns": "A promise that will resolve once the deletes are persisted to Airtable.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n\nfunction deleteRecords(records) {\n    if (table.hasPermissionToDeleteRecords(records)) {\n        table.deleteRecordsAsync(records);\n    }\n    // The records are now deleted within your block (eg will not be returned in\n    // `table.selectRecords()`) but are still being saved to Airtable servers (eg. they\n    // may not look deleted to other users yet)\n}\n\nasync function deleteRecordsAsync(records) {\n    if (table.hasPermissionToDeleteRecords(records)) {\n        await table.deleteRecordsAsync(records);\n    }\n    // Record deletions have been saved to Airtable servers.\n    alert('records have been deleted');\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2492,
                                    "name": "deleteRecordsAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Delete the given records.",
                                        "text": "Throws an error if the user does not have permission to delete the given records.\n\nYou may only delete up to 50 records in one call to `deleteRecordsAsync`.\nSee [Writing changes to records](/packages/sdk/docs/guide_writes.md) for more information\nabout write limits.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the\ndelete to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your block\nbefore the promise resolves.\n",
                                        "returns": "A promise that will resolve once the deletes are persisted to Airtable.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n\nfunction deleteRecords(records) {\n    if (table.hasPermissionToDeleteRecords(records)) {\n        table.deleteRecordsAsync(records);\n    }\n    // The records are now deleted within your block (eg will not be returned in\n    // `table.selectRecords()`) but are still being saved to Airtable servers (eg. they\n    // may not look deleted to other users yet)\n}\n\nasync function deleteRecordsAsync(records) {\n    if (table.hasPermissionToDeleteRecords(records)) {\n        await table.deleteRecordsAsync(records);\n    }\n    // Record deletions have been saved to Airtable servers.\n    alert('records have been deleted');\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2493,
                                            "name": "recordsOrRecordIds",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "Array of Records and RecordIds"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "reference",
                                                                "name": "Record",
                                                                "id": 1779
                                                            },
                                                            {
                                                                "type": "reference",
                                                                "name": "RecordId",
                                                                "id": 645
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 975,
                                    "character": 28
                                }
                            ]
                        },
                        {
                            "id": 2414,
                            "name": "getFieldById",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "The field matching the given ID. Throws if that field does not exist in this table. Use {@link getFieldByIdIfExists} instead if you are unsure whether a field exists with the given ID.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst fieldId = 'fldxxxxxxxxxxxxxx';\nconst field = myTable.getFieldById(fieldId);\nconsole.log(field.name);\n// => 'Name'\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2415,
                                    "name": "getFieldById",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "The field matching the given ID. Throws if that field does not exist in this table. Use {@link getFieldByIdIfExists} instead if you are unsure whether a field exists with the given ID.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst fieldId = 'fldxxxxxxxxxxxxxx';\nconst field = myTable.getFieldById(fieldId);\nconsole.log(field.name);\n// => 'Name'\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2416,
                                            "name": "fieldId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The ID of the field."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "FieldId",
                                                "id": 635
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Field",
                                        "id": 1927
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 215,
                                    "character": 16
                                }
                            ]
                        },
                        {
                            "id": 2411,
                            "name": "getFieldByIdIfExists",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "The field matching the given ID, or `null` if that field does not exist in this table.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst fieldId = 'fldxxxxxxxxxxxxxx';\nconst field = myTable.getFieldByIdIfExists(fieldId);\nif (field !== null) {\n    console.log(field.name);\n} else {\n    console.log('No field exists with that ID');\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2412,
                                    "name": "getFieldByIdIfExists",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "The field matching the given ID, or `null` if that field does not exist in this table.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst fieldId = 'fldxxxxxxxxxxxxxx';\nconst field = myTable.getFieldByIdIfExists(fieldId);\nif (field !== null) {\n    console.log(field.name);\n} else {\n    console.log('No field exists with that ID');\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2413,
                                            "name": "fieldId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The ID of the field."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "FieldId",
                                                "id": 635
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Field",
                                                "id": 1927
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 194,
                                    "character": 24
                                }
                            ]
                        },
                        {
                            "id": 2420,
                            "name": "getFieldByName",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "The field matching the given name. Throws if no field exists with that name in this table. Use {@link getFieldByNameIfExists} instead if you are unsure whether a field exists with the given name.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst field = myTable.getFieldByName('Name');\nconsole.log(field.id);\n// => 'fldxxxxxxxxxxxxxx'\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2421,
                                    "name": "getFieldByName",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "The field matching the given name. Throws if no field exists with that name in this table. Use {@link getFieldByNameIfExists} instead if you are unsure whether a field exists with the given name.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst field = myTable.getFieldByName('Name');\nconsole.log(field.id);\n// => 'fldxxxxxxxxxxxxxx'\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2422,
                                            "name": "fieldName",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The name of the field you're looking for."
                                            },
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Field",
                                        "id": 1927
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 253,
                                    "character": 18
                                }
                            ]
                        },
                        {
                            "id": 2417,
                            "name": "getFieldByNameIfExists",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "The field matching the given name, or `null` if no field exists with that name in this table.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst field = myTable.getFieldByNameIfExists('Name');\nif (field !== null) {\n    console.log(field.id);\n} else {\n    console.log('No field exists with that name');\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2418,
                                    "name": "getFieldByNameIfExists",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "The field matching the given name, or `null` if no field exists with that name in this table.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst field = myTable.getFieldByNameIfExists('Name');\nif (field !== null) {\n    console.log(field.id);\n} else {\n    console.log('No field exists with that name');\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2419,
                                            "name": "fieldName",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The name of the field you're looking for."
                                            },
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Field",
                                                "id": 1927
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 235,
                                    "character": 26
                                }
                            ]
                        },
                        {
                            "id": 2440,
                            "name": "getFirstViewOfType",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Returns the first view in the table where the type is one of `allowedViewTypes`.",
                                "returns": "The first view where the type is one of `allowedViewTypes` or `null` if no such view exists in the table.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {viewTypes} from '@airtable/blocks/models';\nconst firstCalendarView = myTable.getFirstViewOfType(viewTypes.CALENDAR);\nif (firstCalendarView !== null) {\n    console.log(firstCalendarView.name);\n} else {\n    console.log('No calendar views exist in the table');\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2441,
                                    "name": "getFirstViewOfType",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Returns the first view in the table where the type is one of `allowedViewTypes`.",
                                        "returns": "The first view where the type is one of `allowedViewTypes` or `null` if no such view exists in the table.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {viewTypes} from '@airtable/blocks/models';\nconst firstCalendarView = myTable.getFirstViewOfType(viewTypes.CALENDAR);\nif (firstCalendarView !== null) {\n    console.log(firstCalendarView.name);\n} else {\n    console.log('No calendar views exist in the table');\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2442,
                                            "name": "allowedViewTypes",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "An array of view types or a single view type to match against."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Array",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "ViewType",
                                                                "id": 665
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ViewType",
                                                        "id": 665
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2443,
                                            "name": "preferredViewOrViewId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "If a view or view ID is supplied and that view exists & has the correct type, that view\nwill be returned before checking the other views in the table."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "View",
                                                        "id": 2280
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ViewId",
                                                        "id": 664
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "View",
                                                "id": 2280
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 418,
                                    "character": 22
                                }
                            ]
                        },
                        {
                            "id": 2428,
                            "name": "getViewById",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "The view matching the given ID. Throws if that view does not exist in this table. Use {@link getViewByIdIfExists} instead if you are unsure whether a view exists with the given ID.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst viewId = 'viwxxxxxxxxxxxxxx';\nconst view = myTable.getViewById(viewId);\nconsole.log(view.name);\n// => 'Grid view'\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2429,
                                    "name": "getViewById",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "The view matching the given ID. Throws if that view does not exist in this table. Use {@link getViewByIdIfExists} instead if you are unsure whether a view exists with the given ID.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst viewId = 'viwxxxxxxxxxxxxxx';\nconst view = myTable.getViewById(viewId);\nconsole.log(view.name);\n// => 'Grid view'\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2430,
                                            "name": "viewId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The ID of the view."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ViewId",
                                                "id": 664
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "View",
                                        "id": 2280
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 318,
                                    "character": 15
                                }
                            ]
                        },
                        {
                            "id": 2425,
                            "name": "getViewByIdIfExists",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "The view matching the given ID, or `null` if that view does not exist in this table.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst viewId = 'viwxxxxxxxxxxxxxx';\nconst view = myTable.getViewByIdIfExists(viewId);\nif (view !== null) {\n    console.log(view.name);\n} else {\n    console.log('No view exists with that ID');\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2426,
                                    "name": "getViewByIdIfExists",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "The view matching the given ID, or `null` if that view does not exist in this table.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst viewId = 'viwxxxxxxxxxxxxxx';\nconst view = myTable.getViewByIdIfExists(viewId);\nif (view !== null) {\n    console.log(view.name);\n} else {\n    console.log('No view exists with that ID');\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2427,
                                            "name": "viewId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The ID of the view."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ViewId",
                                                "id": 664
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "View",
                                                "id": 2280
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 292,
                                    "character": 23
                                }
                            ]
                        },
                        {
                            "id": 2434,
                            "name": "getViewByName",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "The view matching the given name. Throws if no view exists with that name in this table. Use {@link getViewByNameIfExists} instead if you are unsure whether a view exists with the given name.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst view = myTable.getViewByName('Name');\nconsole.log(view.id);\n// => 'viwxxxxxxxxxxxxxx'\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2435,
                                    "name": "getViewByName",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "The view matching the given name. Throws if no view exists with that name in this table. Use {@link getViewByNameIfExists} instead if you are unsure whether a view exists with the given name.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst view = myTable.getViewByName('Name');\nconsole.log(view.id);\n// => 'viwxxxxxxxxxxxxxx'\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2436,
                                            "name": "viewName",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The name of the view you're looking for."
                                            },
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "View",
                                        "id": 2280
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 356,
                                    "character": 17
                                }
                            ]
                        },
                        {
                            "id": 2431,
                            "name": "getViewByNameIfExists",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "The view matching the given name, or `null` if no view exists with that name in this table.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst view = myTable.getViewByNameIfExists('Name');\nif (view !== null) {\n    console.log(view.id);\n} else {\n    console.log('No view exists with that name');\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2432,
                                    "name": "getViewByNameIfExists",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "The view matching the given name, or `null` if no view exists with that name in this table.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst view = myTable.getViewByNameIfExists('Name');\nif (view !== null) {\n    console.log(view.id);\n} else {\n    console.log('No view exists with that name');\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2433,
                                            "name": "viewName",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The name of the view you're looking for."
                                            },
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "View",
                                                "id": 2280
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 338,
                                    "character": 25
                                }
                            ]
                        },
                        {
                            "id": 2506,
                            "name": "hasPermissionToCreateRecord",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "An alias for `checkPermissionsForCreateRecord(fields).hasPermission`.",
                                "text": "Checks whether the current user has permission to create the specified record.\n\nAccepts partial input, in the same format as {@link createRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                "returns": "boolean Whether the current user can create the specified record.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can create a specific record, when you already know what fields/cell values\n// will be set for the record.\nconst canCreateRecord = table.hasPermissionToCreateRecord({\n    'Project Name': 'Advertising campaign',\n    'Budget': 100,\n});\nif (!canCreateRecord) {\n    alert('not allowed!');\n}\n\n// Like createRecordAsync, you can use either field names or field IDs.\nconst canCreateRecordWithFieldIds = table.hasPermissionToCreateRecord({\n    [projectNameField.id]: 'Cat video',\n    [budgetField.id]: 200,\n});\n\n// Check if user could potentially create a record.\n// Use when you don't know the specific fields/cell values yet (for example, to show or hide\n// UI controls that let you start creating a record.)\nconst canCreateUnknownRecord = table.hasPermissionToCreateRecord();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2507,
                                    "name": "hasPermissionToCreateRecord",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "An alias for `checkPermissionsForCreateRecord(fields).hasPermission`.",
                                        "text": "Checks whether the current user has permission to create the specified record.\n\nAccepts partial input, in the same format as {@link createRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                        "returns": "boolean Whether the current user can create the specified record.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can create a specific record, when you already know what fields/cell values\n// will be set for the record.\nconst canCreateRecord = table.hasPermissionToCreateRecord({\n    'Project Name': 'Advertising campaign',\n    'Budget': 100,\n});\nif (!canCreateRecord) {\n    alert('not allowed!');\n}\n\n// Like createRecordAsync, you can use either field names or field IDs.\nconst canCreateRecordWithFieldIds = table.hasPermissionToCreateRecord({\n    [projectNameField.id]: 'Cat video',\n    [budgetField.id]: 200,\n});\n\n// Check if user could potentially create a record.\n// Use when you don't know the specific fields/cell values yet (for example, to show or hide\n// UI controls that let you start creating a record.)\nconst canCreateUnknownRecord = table.hasPermissionToCreateRecord();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2508,
                                            "name": "fields",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "object mapping `FieldId` or field name to value for that field."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ObjectMap",
                                                "typeArguments": [
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "reference",
                                                                "name": "FieldId",
                                                                "id": 635
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "string"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "void"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 1173,
                                    "character": 31
                                }
                            ]
                        },
                        {
                            "id": 2517,
                            "name": "hasPermissionToCreateRecords",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "An alias for `checkPermissionsForCreateRecords(records).hasPermission`.",
                                "text": "Checks whether the current user has permission to create the specified records.\n\nAccepts partial input, in the same format as {@link createRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                "returns": "boolean Whether the current user can create the specified records.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can create specific records, when you already know what fields/cell values\n// will be set for the records.\nconst canCreateRecords = table.hasPermissionToCreateRecords([\n    // Like createRecordsAsync, fields can be specified by name or ID\n    {\n        'Project Name': 'Advertising campaign',\n        'Budget': 100,\n    },\n    {\n        [projectNameField.id]: 'Cat video',\n        [budgetField.id]: 200,\n    },\n    {},\n]);\nif (!canCreateRecords) {\n    alert('not allowed');\n}\n\n// Check if user could potentially create records.\n// Use when you don't know the specific fields/cell values yet (for example, to show or hide\n// UI controls that let you start creating records.)\n// Equivalent to table.hasPermissionToCreateRecord()\nconst canCreateUnknownRecords = table.hasPermissionToCreateRecords();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2518,
                                    "name": "hasPermissionToCreateRecords",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "An alias for `checkPermissionsForCreateRecords(records).hasPermission`.",
                                        "text": "Checks whether the current user has permission to create the specified records.\n\nAccepts partial input, in the same format as {@link createRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                        "returns": "boolean Whether the current user can create the specified records.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can create specific records, when you already know what fields/cell values\n// will be set for the records.\nconst canCreateRecords = table.hasPermissionToCreateRecords([\n    // Like createRecordsAsync, fields can be specified by name or ID\n    {\n        'Project Name': 'Advertising campaign',\n        'Budget': 100,\n    },\n    {\n        [projectNameField.id]: 'Cat video',\n        [budgetField.id]: 200,\n    },\n    {},\n]);\nif (!canCreateRecords) {\n    alert('not allowed');\n}\n\n// Check if user could potentially create records.\n// Use when you don't know the specific fields/cell values yet (for example, to show or hide\n// UI controls that let you start creating records.)\n// Equivalent to table.hasPermissionToCreateRecord()\nconst canCreateUnknownRecords = table.hasPermissionToCreateRecords();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2519,
                                            "name": "records",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "Array of objects mapping `FieldId` or field name to value for that field."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "reflection",
                                                        "declaration": {
                                                            "id": 2520,
                                                            "name": "__type",
                                                            "kind": 65536,
                                                            "kindString": "Type literal",
                                                            "flags": {},
                                                            "children": [
                                                                {
                                                                    "id": 2521,
                                                                    "name": "fields",
                                                                    "kind": 32,
                                                                    "kindString": "Variable",
                                                                    "flags": {
                                                                        "isOptional": true
                                                                    },
                                                                    "sources": [
                                                                        {
                                                                            "fileName": "src/models/table.ts",
                                                                            "line": 1335,
                                                                            "character": 27
                                                                        }
                                                                    ],
                                                                    "type": {
                                                                        "type": "union",
                                                                        "types": [
                                                                            {
                                                                                "type": "reference",
                                                                                "name": "ObjectMap",
                                                                                "typeArguments": [
                                                                                    {
                                                                                        "type": "union",
                                                                                        "types": [
                                                                                            {
                                                                                                "type": "reference",
                                                                                                "name": "FieldId",
                                                                                                "id": 635
                                                                                            },
                                                                                            {
                                                                                                "type": "intrinsic",
                                                                                                "name": "string"
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "union",
                                                                                        "types": [
                                                                                            {
                                                                                                "type": "intrinsic",
                                                                                                "name": "unknown"
                                                                                            },
                                                                                            {
                                                                                                "type": "intrinsic",
                                                                                                "name": "void"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "void"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "groups": [
                                                                {
                                                                    "title": "Variables",
                                                                    "kind": 32,
                                                                    "children": [2521]
                                                                }
                                                            ],
                                                            "sources": [
                                                                {
                                                                    "fileName": "src/models/table.ts",
                                                                    "line": 1334,
                                                                    "character": 32
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 1333,
                                    "character": 32
                                }
                            ]
                        },
                        {
                            "id": 2488,
                            "name": "hasPermissionToDeleteRecord",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "An alias for `checkPermissionsForDeleteRecord(recordOrRecordId).hasPermission`.",
                                "text": "Checks whether the current user has permission to delete the specified record.\n\nAccepts optional input, in the same format as {@link deleteRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                "returns": "boolean Whether the current user can delete the specified record.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can delete a specific record\nconst canDeleteRecord = table.hasPermissionToDeleteRecord(record);\nif (!canDeleteRecord) {\n    alert('not allowed');\n}\n\n// Check if user could potentially delete a record.\n// Use when you don't know the specific record you want to delete yet (for example, to show\n// or hide UI controls that let you select a record to delete.)\nconst canDeleteUnknownRecord = table.hasPermissionToDeleteRecord();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2489,
                                    "name": "hasPermissionToDeleteRecord",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "An alias for `checkPermissionsForDeleteRecord(recordOrRecordId).hasPermission`.",
                                        "text": "Checks whether the current user has permission to delete the specified record.\n\nAccepts optional input, in the same format as {@link deleteRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                        "returns": "boolean Whether the current user can delete the specified record.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can delete a specific record\nconst canDeleteRecord = table.hasPermissionToDeleteRecord(record);\nif (!canDeleteRecord) {\n    alert('not allowed');\n}\n\n// Check if user could potentially delete a record.\n// Use when you don't know the specific record you want to delete yet (for example, to show\n// or hide UI controls that let you select a record to delete.)\nconst canDeleteUnknownRecord = table.hasPermissionToDeleteRecord();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2490,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the record to be deleted"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 1779
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 645
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 935,
                                    "character": 31
                                }
                            ]
                        },
                        {
                            "id": 2497,
                            "name": "hasPermissionToDeleteRecords",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "An alias for `checkPermissionsForDeleteRecords(recordsOrRecordIds).hasPermission`.",
                                "text": "Checks whether the current user has permission to delete the specified records.\n\nAccepts optional input, in the same format as {@link deleteRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                "returns": "boolean Whether the current user can delete the specified records.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can delete specific records\nconst canDeleteRecords = table.hasPermissionToDeleteRecords([record1, record2]);\nif (!canDeleteRecords) {\n    alert('not allowed!');\n}\n\n// Check if user could potentially delete records.\n// Use when you don't know the specific records you want to delete yet (for example, to show\n// or hide UI controls that let you select records to delete.)\n// Equivalent to table.hasPermissionToDeleteRecord()\nconst canDeleteUnknownRecords = table.hasPermissionToDeleteRecords();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2498,
                                    "name": "hasPermissionToDeleteRecords",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "An alias for `checkPermissionsForDeleteRecords(recordsOrRecordIds).hasPermission`.",
                                        "text": "Checks whether the current user has permission to delete the specified records.\n\nAccepts optional input, in the same format as {@link deleteRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                        "returns": "boolean Whether the current user can delete the specified records.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can delete specific records\nconst canDeleteRecords = table.hasPermissionToDeleteRecords([record1, record2]);\nif (!canDeleteRecords) {\n    alert('not allowed!');\n}\n\n// Check if user could potentially delete records.\n// Use when you don't know the specific records you want to delete yet (for example, to show\n// or hide UI controls that let you select records to delete.)\n// Equivalent to table.hasPermissionToDeleteRecord()\nconst canDeleteUnknownRecords = table.hasPermissionToDeleteRecords();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2499,
                                            "name": "recordsOrRecordIds",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the records to be deleted"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "reference",
                                                                "name": "Record",
                                                                "id": 1779
                                                            },
                                                            {
                                                                "type": "reference",
                                                                "name": "RecordId",
                                                                "id": 645
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 1047,
                                    "character": 32
                                }
                            ]
                        },
                        {
                            "id": 2460,
                            "name": "hasPermissionToUpdateRecord",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "An alias for `checkPermissionsForUpdateRecord(recordOrRecordId, fields).hasPermission`.",
                                "text": "Checks whether the current user has permission to perform the given record update.\n\nAccepts partial input, in the same format as {@link updateRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                "returns": "boolean Whether the user can update the specified record.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can update specific fields for a specific record.\nconst canUpdateRecord = table.hasPermissionToUpdateRecord(record, {\n    'Post Title': 'How to make: orange-mango pound cake',\n    'Publication Date': '2020-01-01',\n});\nif (!canUpdateRecord) {\n    alert('not allowed!');\n}\n\n// Like updateRecordAsync, you can use either field names or field IDs.\nconst canUpdateRecordWithFieldIds = table.hasPermissionToUpdateRecord(record, {\n    [postTitleField.id]: 'Cake decorating tips & tricks',\n    [publicationDateField.id]: '2020-02-02',\n});\n\n// Check if user could update a given record, when you don't know the specific fields that\n// will be updated yet. (for example, to check whether you should allow a user to select\n// a certain record to update)\nconst canUpdateUnknownFields = table.hasPermissionToUpdateRecord(record);\n\n// Check if user could update specific fields, when you don't know the specific record that\n// will be updated yet. (for example, if the field is selected by the user and you want to\n// check if your block can write to it)\nconst canUpdateUnknownRecord = table.hasPermissionToUpdateRecord(undefined, {\n    'My field name': 'updated value',\n    // You can use undefined if you know you're going to update a field, but don't know\n    // the new cell value yet.\n    'Another field name': undefined,\n});\n\n// Check if user could perform updates within the table, without knowing the specific record\n// or fields that will be updated yet. (for example, to render your block in \"read only\"\n// mode)\nconst canUpdateUnknownRecordAndFields = table.hasPermissionToUpdateRecord();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2461,
                                    "name": "hasPermissionToUpdateRecord",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "An alias for `checkPermissionsForUpdateRecord(recordOrRecordId, fields).hasPermission`.",
                                        "text": "Checks whether the current user has permission to perform the given record update.\n\nAccepts partial input, in the same format as {@link updateRecordAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                        "returns": "boolean Whether the user can update the specified record.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can update specific fields for a specific record.\nconst canUpdateRecord = table.hasPermissionToUpdateRecord(record, {\n    'Post Title': 'How to make: orange-mango pound cake',\n    'Publication Date': '2020-01-01',\n});\nif (!canUpdateRecord) {\n    alert('not allowed!');\n}\n\n// Like updateRecordAsync, you can use either field names or field IDs.\nconst canUpdateRecordWithFieldIds = table.hasPermissionToUpdateRecord(record, {\n    [postTitleField.id]: 'Cake decorating tips & tricks',\n    [publicationDateField.id]: '2020-02-02',\n});\n\n// Check if user could update a given record, when you don't know the specific fields that\n// will be updated yet. (for example, to check whether you should allow a user to select\n// a certain record to update)\nconst canUpdateUnknownFields = table.hasPermissionToUpdateRecord(record);\n\n// Check if user could update specific fields, when you don't know the specific record that\n// will be updated yet. (for example, if the field is selected by the user and you want to\n// check if your block can write to it)\nconst canUpdateUnknownRecord = table.hasPermissionToUpdateRecord(undefined, {\n    'My field name': 'updated value',\n    // You can use undefined if you know you're going to update a field, but don't know\n    // the new cell value yet.\n    'Another field name': undefined,\n});\n\n// Check if user could perform updates within the table, without knowing the specific record\n// or fields that will be updated yet. (for example, to render your block in \"read only\"\n// mode)\nconst canUpdateUnknownRecordAndFields = table.hasPermissionToUpdateRecord();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2462,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the record to update"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 1779
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 645
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2463,
                                            "name": "fields",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "cell values to update in that record, specified as object mapping `FieldId` or field name to value for that field."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ObjectMap",
                                                "typeArguments": [
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "reference",
                                                                "name": "FieldId",
                                                                "id": 635
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "string"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "void"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 628,
                                    "character": 31
                                }
                            ]
                        },
                        {
                            "id": 2476,
                            "name": "hasPermissionToUpdateRecords",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "An alias for `checkPermissionsForUpdateRecords(records).hasPermission`.",
                                "text": "Checks whether the current user has permission to perform the given record updates.\n\nAccepts partial input, in the same format as {@link updateRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                "returns": "boolean Whether the current user can update the specified records.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst recordsToUpdate = [\n    {\n        // Validating a complete record update\n        id: record1.id,\n        fields: {\n            'Post Title': 'How to make: orange-mango pound cake',\n            'Publication Date': '2020-01-01',\n        },\n    },\n    {\n        // Like updateRecordsAsync, fields can be specified by name or ID\n        id: record2.id,\n        fields: {\n            [postTitleField.id]: 'Cake decorating tips & tricks',\n            [publicationDateField.id]: '2020-02-02',\n        },\n    },\n    {\n        // Validating an update to a specific record, not knowing what fields will be updated\n        id: record3.id,\n    },\n    {\n        // Validating an update to specific cell values, not knowing what record will be updated\n        fields: {\n            'My field name': 'updated value for unknown record',\n            // You can use undefined if you know you're going to update a field, but don't know\n            // the new cell value yet.\n            'Another field name': undefined,\n        },\n    },\n];\n\nconst canUpdateRecords = table.hasPermissionToUpdateRecords(recordsToUpdate);\nif (!canUpdateRecords) {\n    alert('not allowed');\n}\n\n// Check if user could potentially update records.\n// Equivalent to table.hasPermissionToUpdateRecord()\nconst canUpdateUnknownRecordsAndFields = table.hasPermissionToUpdateRecords();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2477,
                                    "name": "hasPermissionToUpdateRecords",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "An alias for `checkPermissionsForUpdateRecords(records).hasPermission`.",
                                        "text": "Checks whether the current user has permission to perform the given record updates.\n\nAccepts partial input, in the same format as {@link updateRecordsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                        "returns": "boolean Whether the current user can update the specified records.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst recordsToUpdate = [\n    {\n        // Validating a complete record update\n        id: record1.id,\n        fields: {\n            'Post Title': 'How to make: orange-mango pound cake',\n            'Publication Date': '2020-01-01',\n        },\n    },\n    {\n        // Like updateRecordsAsync, fields can be specified by name or ID\n        id: record2.id,\n        fields: {\n            [postTitleField.id]: 'Cake decorating tips & tricks',\n            [publicationDateField.id]: '2020-02-02',\n        },\n    },\n    {\n        // Validating an update to a specific record, not knowing what fields will be updated\n        id: record3.id,\n    },\n    {\n        // Validating an update to specific cell values, not knowing what record will be updated\n        fields: {\n            'My field name': 'updated value for unknown record',\n            // You can use undefined if you know you're going to update a field, but don't know\n            // the new cell value yet.\n            'Another field name': undefined,\n        },\n    },\n];\n\nconst canUpdateRecords = table.hasPermissionToUpdateRecords(recordsToUpdate);\nif (!canUpdateRecords) {\n    alert('not allowed');\n}\n\n// Check if user could potentially update records.\n// Equivalent to table.hasPermissionToUpdateRecord()\nconst canUpdateUnknownRecordsAndFields = table.hasPermissionToUpdateRecords();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2478,
                                            "name": "records",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "Array of objects containing recordId and fields/cellValues to update for that record (specified as an object mapping `FieldId` or field name to cell value)"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "reflection",
                                                        "declaration": {
                                                            "id": 2479,
                                                            "name": "__type",
                                                            "kind": 65536,
                                                            "kindString": "Type literal",
                                                            "flags": {},
                                                            "children": [
                                                                {
                                                                    "id": 2481,
                                                                    "name": "fields",
                                                                    "kind": 32,
                                                                    "kindString": "Variable",
                                                                    "flags": {
                                                                        "isOptional": true
                                                                    },
                                                                    "sources": [
                                                                        {
                                                                            "fileName": "src/models/table.ts",
                                                                            "line": 844,
                                                                            "character": 27
                                                                        }
                                                                    ],
                                                                    "type": {
                                                                        "type": "union",
                                                                        "types": [
                                                                            {
                                                                                "type": "reference",
                                                                                "name": "ObjectMap",
                                                                                "typeArguments": [
                                                                                    {
                                                                                        "type": "union",
                                                                                        "types": [
                                                                                            {
                                                                                                "type": "reference",
                                                                                                "name": "FieldId",
                                                                                                "id": 635
                                                                                            },
                                                                                            {
                                                                                                "type": "intrinsic",
                                                                                                "name": "string"
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "union",
                                                                                        "types": [
                                                                                            {
                                                                                                "type": "intrinsic",
                                                                                                "name": "unknown"
                                                                                            },
                                                                                            {
                                                                                                "type": "intrinsic",
                                                                                                "name": "void"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "void"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2480,
                                                                    "name": "id",
                                                                    "kind": 32,
                                                                    "kindString": "Variable",
                                                                    "flags": {
                                                                        "isOptional": true
                                                                    },
                                                                    "sources": [
                                                                        {
                                                                            "fileName": "src/models/table.ts",
                                                                            "line": 843,
                                                                            "character": 23
                                                                        }
                                                                    ],
                                                                    "type": {
                                                                        "type": "union",
                                                                        "types": [
                                                                            {
                                                                                "type": "reference",
                                                                                "name": "RecordId",
                                                                                "id": 645
                                                                            },
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "void"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "groups": [
                                                                {
                                                                    "title": "Variables",
                                                                    "kind": 32,
                                                                    "children": [2481, 2480]
                                                                }
                                                            ],
                                                            "sources": [
                                                                {
                                                                    "fileName": "src/models/table.ts",
                                                                    "line": 842,
                                                                    "character": 32
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 841,
                                    "character": 32
                                }
                            ]
                        },
                        {
                            "id": 2437,
                            "name": "selectRecords",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Select records from the table. Returns a query result. See {@link RecordQueryResult} for more.",
                                "returns": "A query result.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {UI} from '@airtable/blocks';\nimport React from 'react';\n\nfunction TodoList() {\n    const base = UI.useBase();\n    const table = base.getTableByName('Tasks');\n\n    const queryResult = table.selectRecords();\n    const records = UI.useRecords(queryResult);\n\n    return (\n        <ul>\n            {records.map(record => (\n                <li key={record.id}>\n                    {record.primaryCellValueAsString || 'Unnamed record'}\n                </li>\n            ))}\n        </ul>\n    );\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2438,
                                    "name": "selectRecords",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Select records from the table. Returns a query result. See {@link RecordQueryResult} for more.",
                                        "returns": "A query result.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {UI} from '@airtable/blocks';\nimport React from 'react';\n\nfunction TodoList() {\n    const base = UI.useBase();\n    const table = base.getTableByName('Tasks');\n\n    const queryResult = table.selectRecords();\n    const records = UI.useRecords(queryResult);\n\n    return (\n        <ul>\n            {records.map(record => (\n                <li key={record.id}>\n                    {record.primaryCellValueAsString || 'Unnamed record'}\n                </li>\n            ))}\n        </ul>\n    );\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2439,
                                            "name": "opts",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "Options for the query, such as sorts and fields."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "RecordQueryResultOpts",
                                                "id": 2036
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "TableOrViewQueryResult",
                                        "id": 1321
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 392,
                                    "character": 17
                                }
                            ]
                        },
                        {
                            "id": 2551,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "A string representation of the model for use in debugging.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2552,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "A string representation of the model for use in debugging.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.toString",
                                        "id": 864
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.toString",
                                "id": 864
                            }
                        },
                        {
                            "id": 2579,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatch keys watched with `.watch`.",
                                "text": "Should be called with the same arguments given to `.watch`.\n",
                                "returns": "the array of keys that were unwatched\n"
                            },
                            "signatures": [
                                {
                                    "id": 2580,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatch keys watched with `.watch`.",
                                        "text": "Should be called with the same arguments given to `.watch`.\n",
                                        "returns": "the array of keys that were unwatched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2581,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to unwatch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableTableKey",
                                                        "id": 2595
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableTableKey",
                                                                "id": 2595
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2582,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the function passed to `.watch` for these keys"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 2583,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 2584,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 2585,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2586,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableTableKey",
                                                                        "id": 2595
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2587,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 111,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 2588,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the context that was passed to `.watch` for this `callback`"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableTableKey",
                                                "id": 2595
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 767
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 109,
                                    "character": 11
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 767
                            }
                        },
                        {
                            "id": 2452,
                            "name": "updateRecordAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Updates cell values for a record.",
                                "text": "Throws an error if the user does not have permission to update the given cell values in\nthe record, or if invalid input is provided (eg. invalid cell values).\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the updated\ncell values to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your block\nbefore the promise resolves.\n",
                                "returns": "A promise that will resolve to the RecordId of the new record, once the new record is persisted to Airtable.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nfunction updateRecord(record, recordFields) {\n    if (table.hasPermissionToUpdateRecord(record, recordFields)) {\n        table.updateRecordAsync(record, recordFields);\n    }\n    // The updated values will now show in your block (eg in `table.selectRecords()` result)\n    // but are still being saved to Airtable servers (eg. other users may not be able to see\n    // them yet.)\n}\n\nasync function updateRecordAsync(record, recordFields) {\n    if (table.hasPermissionToUpdateRecord(record, recordFields)) {\n        await table.updateRecordAsync(record, recordFields);\n    }\n    // New record has been saved to Airtable servers.\n    alert(`record with ID ${record.id} has been updated`);\n}\n\n// Fields can be specified by name or ID\nupdateRecord(record1, {\n    'Post Title': 'How to make: orange-mango pound cake',\n    'Publication Date': '2020-01-01',\n});\nupdateRecord(record2, {\n    [postTitleField.id]: 'Cake decorating tips & tricks',\n    [publicationDateField.id]: '2020-02-02',\n});\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2453,
                                    "name": "updateRecordAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Updates cell values for a record.",
                                        "text": "Throws an error if the user does not have permission to update the given cell values in\nthe record, or if invalid input is provided (eg. invalid cell values).\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the updated\ncell values to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your block\nbefore the promise resolves.\n",
                                        "returns": "A promise that will resolve to the RecordId of the new record, once the new record is persisted to Airtable.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nfunction updateRecord(record, recordFields) {\n    if (table.hasPermissionToUpdateRecord(record, recordFields)) {\n        table.updateRecordAsync(record, recordFields);\n    }\n    // The updated values will now show in your block (eg in `table.selectRecords()` result)\n    // but are still being saved to Airtable servers (eg. other users may not be able to see\n    // them yet.)\n}\n\nasync function updateRecordAsync(record, recordFields) {\n    if (table.hasPermissionToUpdateRecord(record, recordFields)) {\n        await table.updateRecordAsync(record, recordFields);\n    }\n    // New record has been saved to Airtable servers.\n    alert(`record with ID ${record.id} has been updated`);\n}\n\n// Fields can be specified by name or ID\nupdateRecord(record1, {\n    'Post Title': 'How to make: orange-mango pound cake',\n    'Publication Date': '2020-01-01',\n});\nupdateRecord(record2, {\n    [postTitleField.id]: 'Cake decorating tips & tricks',\n    [publicationDateField.id]: '2020-02-02',\n});\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2454,
                                            "name": "recordOrRecordId",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the record to update"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Record",
                                                        "id": 1779
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "RecordId",
                                                        "id": 645
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2455,
                                            "name": "fields",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "cell values to update in that record, specified as object mapping `FieldId` or field name to value for that field."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ObjectMap",
                                                "typeArguments": [
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "reference",
                                                                "name": "FieldId",
                                                                "id": 635
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "string"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 502,
                                    "character": 27
                                }
                            ]
                        },
                        {
                            "id": 2464,
                            "name": "updateRecordsAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Updates cell values for records.",
                                "text": "Throws an error if the user does not have permission to update the given cell values in\nthe records, or if invalid input is provided (eg. invalid cell values).\n\nYou may only update up to 50 records in one call to `updateRecordsAsync`.\nSee [Writing changes to records](/packages/sdk/docs/guide_writes.md) for more information\nabout write limits.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the\nupdates to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your block\nbefore the promise resolves.\n",
                                "returns": "A promise that will resolve once the updates are persisted to Airtable.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconst recordsToUpdate = [\n    // Fields can be specified by name or ID\n    {\n        id: record1.id,\n        fields: {\n            'Post Title': 'How to make: orange-mango pound cake',\n            'Publication Date': '2020-01-01',\n        },\n    },\n    {\n        id: record2.id,\n        fields: {\n            // Sets the cell values to be empty.\n            'Post Title': '',\n            'Publication Date': '',\n        },\n    },\n    {\n        id: record3.id,\n        fields: {\n            [postTitleField.id]: 'Cake decorating tips & tricks',\n            [publicationDateField.id]: '2020-02-02',\n        },\n    },\n];\n\nfunction updateRecords() {\n    if (table.hasPermissionToUpdateRecords(recordsToUpdate)) {\n        table.updateRecordsAsync(recordsToUpdate);\n    }\n    // The records are now updated within your block (eg will be reflected in\n    // `table.selectRecords()`) but are still being saved to Airtable servers (eg. they\n    // may not be updated for other users yet)\n}\n\nasync function updateRecordsAsync() {\n    if (table.hasPermissionToUpdateRecords(recordsToUpdate)) {\n        await table.updateRecordsAsync(recordsToUpdate);\n    }\n    // Record updates have been saved to Airtable servers.\n    alert('records have been updated');\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2465,
                                    "name": "updateRecordsAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Updates cell values for records.",
                                        "text": "Throws an error if the user does not have permission to update the given cell values in\nthe records, or if invalid input is provided (eg. invalid cell values).\n\nYou may only update up to 50 records in one call to `updateRecordsAsync`.\nSee [Writing changes to records](/packages/sdk/docs/guide_writes.md) for more information\nabout write limits.\n\nThis action is asynchronous: `await` the returned promise if you wish to wait for the\nupdates to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in your block\nbefore the promise resolves.\n",
                                        "returns": "A promise that will resolve once the updates are persisted to Airtable.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconst recordsToUpdate = [\n    // Fields can be specified by name or ID\n    {\n        id: record1.id,\n        fields: {\n            'Post Title': 'How to make: orange-mango pound cake',\n            'Publication Date': '2020-01-01',\n        },\n    },\n    {\n        id: record2.id,\n        fields: {\n            // Sets the cell values to be empty.\n            'Post Title': '',\n            'Publication Date': '',\n        },\n    },\n    {\n        id: record3.id,\n        fields: {\n            [postTitleField.id]: 'Cake decorating tips & tricks',\n            [publicationDateField.id]: '2020-02-02',\n        },\n    },\n];\n\nfunction updateRecords() {\n    if (table.hasPermissionToUpdateRecords(recordsToUpdate)) {\n        table.updateRecordsAsync(recordsToUpdate);\n    }\n    // The records are now updated within your block (eg will be reflected in\n    // `table.selectRecords()`) but are still being saved to Airtable servers (eg. they\n    // may not be updated for other users yet)\n}\n\nasync function updateRecordsAsync() {\n    if (table.hasPermissionToUpdateRecords(recordsToUpdate)) {\n        await table.updateRecordsAsync(recordsToUpdate);\n    }\n    // Record updates have been saved to Airtable servers.\n    alert('records have been updated');\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2466,
                                            "name": "records",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "Array of objects containing recordId and fields/cellValues to update for that record (specified as an object mapping `FieldId` or field name to cell value)"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "reflection",
                                                        "declaration": {
                                                            "id": 2467,
                                                            "name": "__type",
                                                            "kind": 65536,
                                                            "kindString": "Type literal",
                                                            "flags": {},
                                                            "children": [
                                                                {
                                                                    "id": 2469,
                                                                    "name": "fields",
                                                                    "kind": 32,
                                                                    "kindString": "Variable",
                                                                    "flags": {},
                                                                    "sources": [
                                                                        {
                                                                            "fileName": "src/models/table.ts",
                                                                            "line": 700,
                                                                            "character": 27
                                                                        }
                                                                    ],
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "ObjectMap",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "union",
                                                                                "types": [
                                                                                    {
                                                                                        "type": "reference",
                                                                                        "name": "FieldId",
                                                                                        "id": 635
                                                                                    },
                                                                                    {
                                                                                        "type": "intrinsic",
                                                                                        "name": "string"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "unknown"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2468,
                                                                    "name": "id",
                                                                    "kind": 32,
                                                                    "kindString": "Variable",
                                                                    "flags": {},
                                                                    "sources": [
                                                                        {
                                                                            "fileName": "src/models/table.ts",
                                                                            "line": 699,
                                                                            "character": 23
                                                                        }
                                                                    ],
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "RecordId",
                                                                        "id": 645
                                                                    }
                                                                }
                                                            ],
                                                            "groups": [
                                                                {
                                                                    "title": "Variables",
                                                                    "kind": 32,
                                                                    "children": [2469, 2468]
                                                                }
                                                            ],
                                                            "sources": [
                                                                {
                                                                    "fileName": "src/models/table.ts",
                                                                    "line": 698,
                                                                    "character": 31
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/table.ts",
                                    "line": 697,
                                    "character": 28
                                }
                            ]
                        },
                        {
                            "id": 2569,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get notified of changes to the model.",
                                "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n",
                                "returns": "the array of keys that were watched\n"
                            },
                            "signatures": [
                                {
                                    "id": 2570,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get notified of changes to the model.",
                                        "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n",
                                        "returns": "the array of keys that were watched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2571,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to watch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableTableKey",
                                                        "id": 2595
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableTableKey",
                                                                "id": 2595
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2572,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "a function to call when those keys change"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 2573,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 2574,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 2575,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2576,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableTableKey",
                                                                        "id": 2595
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2577,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 65,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 2578,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "an optional context for `this` in `callback`."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableTableKey",
                                                "id": 2595
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 757
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 63,
                                    "character": 9
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 757
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [2403, 2409, 2541, 2545, 2401, 2407, 2405, 2423]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [
                                2503,
                                2512,
                                2485,
                                2494,
                                2456,
                                2470,
                                2500,
                                2509,
                                2482,
                                2491,
                                2414,
                                2411,
                                2420,
                                2417,
                                2440,
                                2428,
                                2425,
                                2434,
                                2431,
                                2506,
                                2517,
                                2488,
                                2497,
                                2460,
                                2476,
                                2437,
                                2551,
                                2579,
                                2452,
                                2464,
                                2569
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/table.ts",
                            "line": 44,
                            "character": 11
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AbstractModel",
                            "id": 839,
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "TableData"
                                },
                                {
                                    "type": "reference",
                                    "name": "WatchableTableKey",
                                    "id": 2595
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 687,
                    "name": "TableId",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/types/table.ts",
                            "line": 8,
                            "character": 19
                        }
                    ],
                    "type": {
                        "type": "intrinsic",
                        "name": "string"
                    }
                },
                {
                    "id": 2595,
                    "name": "WatchableTableKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A key in {@link Table} that can be watched.\n- `name`\n- `description`\n- `views`\n- `fields`"
                    },
                    "sources": [
                        {
                            "fileName": "src/models/table.ts",
                            "line": 37,
                            "character": 29
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "name"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "description"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "views"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "fields"
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [2370]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [687, 2595]
                }
            ],
            "sources": [
                {
                    "fileName": "src/types/table.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 647,
            "name": "@airtable/blocks/models: View",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/types/view.ts",
            "comment": {},
            "children": [
                {
                    "id": 648,
                    "name": "ViewTypes",
                    "kind": 4,
                    "kindString": "Enumeration",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "An enum of Airtable's view types",
                        "tags": [
                            {
                                "tag": "alias",
                                "text": "viewTypes"
                            },
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {viewTypes} from '@airtable/blocks/models';\nconst gridViews = myTable.views.filter(view => (\n    view.type === viewTypes.GRID\n));\n```\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 651,
                            "name": "CALENDAR",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/types/view.ts",
                                    "line": 28,
                                    "character": 12
                                }
                            ],
                            "defaultValue": "\"calendar\""
                        },
                        {
                            "id": 650,
                            "name": "FORM",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/types/view.ts",
                                    "line": 26,
                                    "character": 8
                                }
                            ],
                            "defaultValue": "\"form\""
                        },
                        {
                            "id": 652,
                            "name": "GALLERY",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/types/view.ts",
                                    "line": 30,
                                    "character": 11
                                }
                            ],
                            "defaultValue": "\"gallery\""
                        },
                        {
                            "id": 649,
                            "name": "GRID",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/types/view.ts",
                                    "line": 24,
                                    "character": 8
                                }
                            ],
                            "defaultValue": "\"grid\""
                        },
                        {
                            "id": 653,
                            "name": "KANBAN",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/types/view.ts",
                                    "line": 32,
                                    "character": 10
                                }
                            ],
                            "defaultValue": "\"kanban\""
                        }
                    ],
                    "groups": [
                        {
                            "title": "Enumeration members",
                            "kind": 16,
                            "children": [651, 650, 652, 649, 653]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/types/view.ts",
                            "line": 22,
                            "character": 21
                        }
                    ]
                },
                {
                    "id": 2280,
                    "name": "View",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A class that represents an Airtable view. Every {@link Table} has one or more views.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "models/View\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 2313,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 2314,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.id",
                                        "id": 852
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.id",
                                "id": 852
                            }
                        },
                        {
                            "id": 2317,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 2318,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.isDeleted",
                                        "id": 858
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.isDeleted",
                                "id": 858
                            }
                        },
                        {
                            "id": 2297,
                            "name": "name",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The name of the view. Can be watched.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myView.name);\n// => 'Grid view'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 2298,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The name of the view. Can be watched.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myView.name);\n// => 'Grid view'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/view.ts",
                                    "line": 91,
                                    "character": 12
                                }
                            ]
                        },
                        {
                            "id": 2299,
                            "name": "type",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The type of the view, such as Grid, Calendar, or Kanban. Should never change because view types cannot be modified.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myView.type);\n// => 'kanban'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 2300,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The type of the view, such as Grid, Calendar, or Kanban. Should never change because view types cannot be modified.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myView.type);\n// => 'kanban'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "ViewType",
                                        "id": 665
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/view.ts",
                                    "line": 103,
                                    "character": 12
                                }
                            ]
                        },
                        {
                            "id": 2301,
                            "name": "url",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The URL for the view. You can visit this URL in the browser to be taken to the view in the Airtable UI.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nconsole.log(myView.url);\n// => 'https://airtable.com/tblxxxxxxxxxxxxxx/viwxxxxxxxxxxxxxx'\n```\n"
                                    }
                                ]
                            },
                            "getSignature": [
                                {
                                    "id": 2302,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The URL for the view. You can visit this URL in the browser to be taken to the view in the Airtable UI.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nconsole.log(myView.url);\n// => 'https://airtable.com/tblxxxxxxxxxxxxxx/viwxxxxxxxxxxxxxx'\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/view.ts",
                                    "line": 115,
                                    "character": 11
                                }
                            ]
                        },
                        {
                            "id": 2306,
                            "name": "selectMetadata",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Select the field order and visible fields from the view. See {@ViewMetadataQueryResult} for more.",
                                "returns": "a {@ViewMetadataQueryResult}",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nasync function loadMetadataForViewAsync(view) {\n    const viewMetadata = view.selectMetadata();\n    await viewMetadata.loadDataAsync();\n\n    console.log('Visible fields:');\n    console.log(viewMetadata.visibleFields.map(field => field.name));\n    // => ['Field 1', 'Field 2', 'Field 3']\n\n    console.log('All fields:');\n    console.log(viewMetadata.allFields.map(field => field.name));\n    // => ['Field 1', 'Field 2', 'Field 3', 'Hidden field 4']\n\n    viewMetadata.unloadData();\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2307,
                                    "name": "selectMetadata",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Select the field order and visible fields from the view. See {@ViewMetadataQueryResult} for more.",
                                        "returns": "a {@ViewMetadataQueryResult}",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nasync function loadMetadataForViewAsync(view) {\n    const viewMetadata = view.selectMetadata();\n    await viewMetadata.loadDataAsync();\n\n    console.log('Visible fields:');\n    console.log(viewMetadata.visibleFields.map(field => field.name));\n    // => ['Field 1', 'Field 2', 'Field 3']\n\n    console.log('All fields:');\n    console.log(viewMetadata.allFields.map(field => field.name));\n    // => ['Field 1', 'Field 2', 'Field 3', 'Hidden field 4']\n\n    viewMetadata.unloadData();\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "ViewMetadataQueryResult",
                                        "id": 2181
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/view.ts",
                                    "line": 189,
                                    "character": 18
                                }
                            ]
                        },
                        {
                            "id": 2303,
                            "name": "selectRecords",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Select records from the view. Returns a query result. See {@RecordQueryResult} for more.",
                                "returns": "A record query result.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {UI} from '@airtable/blocks';\nimport React from 'react';\n\nfunction TodoList() {\n    const base = UI.useBase();\n    const table = base.getTableByName('Tasks');\n    const view = table.getViewByName('Grid view');\n\n    const queryResult = view.selectRecords();\n    const records = UI.useRecords(queryResult);\n\n    return (\n        <ul>\n            {records.map(record => (\n                <li key={record.id}>\n                    {record.primaryCellValueAsString || 'Unnamed record'}\n                </li>\n            ))}\n        </ul>\n    );\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2304,
                                    "name": "selectRecords",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Select records from the view. Returns a query result. See {@RecordQueryResult} for more.",
                                        "returns": "A record query result.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {UI} from '@airtable/blocks';\nimport React from 'react';\n\nfunction TodoList() {\n    const base = UI.useBase();\n    const table = base.getTableByName('Tasks');\n    const view = table.getViewByName('Grid view');\n\n    const queryResult = view.selectRecords();\n    const records = UI.useRecords(queryResult);\n\n    return (\n        <ul>\n            {records.map(record => (\n                <li key={record.id}>\n                    {record.primaryCellValueAsString || 'Unnamed record'}\n                </li>\n            ))}\n        </ul>\n    );\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2305,
                                            "name": "opts",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "Options for the query, such as sorts, fields, and record coloring. By\ndefault, records will be coloured according to the view."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "RecordQueryResultOpts",
                                                "id": 2036
                                            },
                                            "defaultValue": " {}"
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "TableOrViewQueryResult",
                                        "id": 1321
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/view.ts",
                                    "line": 152,
                                    "character": 17
                                }
                            ]
                        },
                        {
                            "id": 2323,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "A string representation of the model for use in debugging.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2324,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "A string representation of the model for use in debugging.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.toString",
                                        "id": 864
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.toString",
                                "id": 864
                            }
                        },
                        {
                            "id": 2351,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatch keys watched with `.watch`.",
                                "text": "Should be called with the same arguments given to `.watch`.\n",
                                "returns": "the array of keys that were unwatched\n"
                            },
                            "signatures": [
                                {
                                    "id": 2352,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatch keys watched with `.watch`.",
                                        "text": "Should be called with the same arguments given to `.watch`.\n",
                                        "returns": "the array of keys that were unwatched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2353,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to unwatch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableViewKey",
                                                        "id": 2367
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableViewKey",
                                                                "id": 2367
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2354,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the function passed to `.watch` for these keys"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 2355,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 2356,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 2357,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2358,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableViewKey",
                                                                        "id": 2367
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2359,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 111,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 2360,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the context that was passed to `.watch` for this `callback`"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableViewKey",
                                                "id": 2367
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 767
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 109,
                                    "character": 11
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 767
                            }
                        },
                        {
                            "id": 2341,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get notified of changes to the model.",
                                "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n",
                                "returns": "the array of keys that were watched\n"
                            },
                            "signatures": [
                                {
                                    "id": 2342,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get notified of changes to the model.",
                                        "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n",
                                        "returns": "the array of keys that were watched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2343,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to watch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableViewKey",
                                                        "id": 2367
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableViewKey",
                                                                "id": 2367
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2344,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "a function to call when those keys change"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 2345,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 2346,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 2347,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2348,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableViewKey",
                                                                        "id": 2367
                                                                    }
                                                                },
                                                                {
                                                                    "id": 2349,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 65,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 2350,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "an optional context for `this` in `callback`."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableViewKey",
                                                "id": 2367
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 757
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 63,
                                    "character": 9
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 757
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [2313, 2317, 2297, 2299, 2301]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [2306, 2303, 2323, 2351, 2341]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/view.ts",
                            "line": 30,
                            "character": 10
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AbstractModel",
                            "id": 839,
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "ViewData"
                                },
                                {
                                    "type": "reference",
                                    "name": "WatchableViewKey",
                                    "id": 2367
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 2181,
                    "name": "ViewMetadataQueryResult",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Contains information about a view that isn't loaded by default e.g. field order and visible fields.",
                        "text": "In a React component, you might want to use {@link useViewMetadata}.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nasync function loadMetadataForViewAsync(view) {\n    const viewMetadata = view.selectMetadata();\n    await viewMetadata.loadDataAsync();\n\n    console.log(viewMetadata.visibleField);\n    // => [Field, Field, Field]\n\n    console.log(viewMetadata.allFields);\n    // => [Field, Field, Field, Field, Field]\n\n    viewMetadata.unloadData();\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "models/Query results/ViewMetadataQueryResult\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 2193,
                            "name": "parentView",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/models/view_metadata_query_result.ts",
                                    "line": 97,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "View",
                                "id": 2280
                            }
                        },
                        {
                            "id": 2212,
                            "name": "allFields",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Returns every field in the table in the order they appear in this view. Watchable."
                            },
                            "getSignature": [
                                {
                                    "id": 2213,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Returns every field in the table in the order they appear in this view. Watchable."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Field",
                                                "id": 1927
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/view_metadata_query_result.ts",
                                    "line": 162,
                                    "character": 17
                                }
                            ]
                        },
                        {
                            "id": 2239,
                            "name": "id",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The ID for this model."
                            },
                            "getSignature": [
                                {
                                    "id": 2240,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID for this model."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.id",
                                        "id": 852
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 42,
                                    "character": 10
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.id",
                                "id": 852
                            }
                        },
                        {
                            "id": 2231,
                            "name": "isDataLoaded",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "getSignature": [
                                {
                                    "id": 2232,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.isDataLoaded",
                                        "id": 932
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 92,
                                    "character": 20
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.isDataLoaded",
                                "id": 932
                            }
                        },
                        {
                            "id": 2243,
                            "name": "isDeleted",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 2244,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the model has been deleted, and `false` otherwise.",
                                        "text": "In general, it's best to avoid keeping a reference to an object past the\ncurrent event loop, since it may be deleted and trying to access any data\nof a deleted object (other than its ID) will throw. But if you keep a\nreference, you can use `isDeleted` to check that it's safe to access the\nmodel's data.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.isDeleted",
                                        "id": 858
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 71,
                                    "character": 17
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.isDeleted",
                                "id": 858
                            }
                        },
                        {
                            "id": 2214,
                            "name": "visibleFields",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Returns every field visible in this view. Watchable."
                            },
                            "getSignature": [
                                {
                                    "id": 2215,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Returns every field visible in this view. Watchable."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Field",
                                                "id": 1927
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/view_metadata_query_result.ts",
                                    "line": 173,
                                    "character": 21
                                }
                            ]
                        },
                        {
                            "id": 2233,
                            "name": "loadDataAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Will cause all the async data to be fetched and retained. Every call to\n`loadDataAsync` should have a matching call to `unloadData`.",
                                "text": "Returns a Promise that will resolve once the data is loaded.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2234,
                                    "name": "loadDataAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Will cause all the async data to be fetched and retained. Every call to\n`loadDataAsync` should have a matching call to `unloadData`.",
                                        "text": "Returns a Promise that will resolve once the data is loaded.\n"
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.loadDataAsync",
                                        "id": 940
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 122,
                                    "character": 23
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.loadDataAsync",
                                "id": 940
                            }
                        },
                        {
                            "id": 2249,
                            "name": "toString",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "returns": "A string representation of the model for use in debugging.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2250,
                                    "name": "toString",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "returns": "A string representation of the model for use in debugging.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModel.toString",
                                        "id": 864
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model.ts",
                                    "line": 92,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModel.toString",
                                "id": 864
                            }
                        },
                        {
                            "id": 2235,
                            "name": "unloadData",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "signatures": [
                                {
                                    "id": 2236,
                                    "name": "unloadData",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "void"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.unloadData",
                                        "id": 942
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 156,
                                    "character": 14
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.unloadData",
                                "id": 942
                            }
                        },
                        {
                            "id": 2226,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatching a key that needs to load data asynchronously will automatically\ncause the data to be released. Once the data is available, the callback\nwill be called.",
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": "\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2227,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatching a key that needs to load data asynchronously will automatically\ncause the data to be released. Once the data is available, the callback\nwill be called.",
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": "\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2228,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableViewMetadataKey",
                                                        "id": 2275
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableViewMetadataKey",
                                                                "id": 2275
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2229,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 2230,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableViewMetadataKey",
                                                "id": 2275
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 767
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.unwatch",
                                        "id": 927
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 74,
                                    "character": 11
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 767
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.unwatch",
                                "id": 927
                            }
                        },
                        {
                            "id": 2221,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Watching a key that needs to load data asynchronously will automatically\ncause the data to be fetched. Once the data is available, the callback\nwill be called.",
                                "tags": [
                                    {
                                        "tag": "inheritdoc",
                                        "text": "\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 2222,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Watching a key that needs to load data asynchronously will automatically\ncause the data to be fetched. Once the data is available, the callback\nwill be called.",
                                        "tags": [
                                            {
                                                "tag": "inheritdoc",
                                                "text": "\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 2223,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableViewMetadataKey",
                                                        "id": 2275
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableViewMetadataKey",
                                                                "id": 2275
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 2224,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 2225,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableViewMetadataKey",
                                                "id": 2275
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 757
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "AbstractModelWithAsyncData.watch",
                                        "id": 922
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/models/abstract_model_with_async_data.ts",
                                    "line": 49,
                                    "character": 9
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 757
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AbstractModelWithAsyncData.watch",
                                "id": 922
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [2193]
                        },
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [2212, 2239, 2231, 2243, 2214]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [2233, 2249, 2235, 2226, 2221]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/models/view_metadata_query_result.ts",
                            "line": 63,
                            "character": 29
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AbstractModelWithAsyncData",
                            "id": 907,
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "ViewMetadata"
                                },
                                {
                                    "type": "reference",
                                    "name": "WatchableViewMetadataKey",
                                    "id": 2275
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 664,
                    "name": "ViewId",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/types/view.ts",
                            "line": 8,
                            "character": 18
                        }
                    ],
                    "type": {
                        "type": "intrinsic",
                        "name": "string"
                    }
                },
                {
                    "id": 665,
                    "name": "ViewType",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/types/view.ts",
                            "line": 36,
                            "character": 20
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "reference",
                                "name": "GRID",
                                "id": 649
                            },
                            {
                                "type": "reference",
                                "name": "FORM",
                                "id": 650
                            },
                            {
                                "type": "reference",
                                "name": "CALENDAR",
                                "id": 651
                            },
                            {
                                "type": "reference",
                                "name": "GALLERY",
                                "id": 652
                            },
                            {
                                "type": "reference",
                                "name": "KANBAN",
                                "id": 653
                            }
                        ]
                    }
                },
                {
                    "id": 2367,
                    "name": "WatchableViewKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A key in {@link View} that can be watched.\n- `name`"
                    },
                    "sources": [
                        {
                            "fileName": "src/models/view.ts",
                            "line": 23,
                            "character": 28
                        }
                    ],
                    "type": {
                        "type": "reference",
                        "name": "ObjectValues",
                        "typeArguments": [
                            {
                                "type": "reflection",
                                "declaration": {
                                    "id": 2368,
                                    "name": "__type",
                                    "kind": 65536,
                                    "kindString": "Type literal",
                                    "flags": {},
                                    "sources": [
                                        {
                                            "fileName": "src/models/view.ts",
                                            "line": 23,
                                            "character": 44
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                },
                {
                    "id": 2275,
                    "name": "WatchableViewMetadataKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "A key in {@link ViewMetadataQueryResult} that can be watched.\n- `allFields`\n- `visibleFields`\n- `isDataLoaded`"
                    },
                    "sources": [
                        {
                            "fileName": "src/models/view_metadata_query_result.ts",
                            "line": 24,
                            "character": 29
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "isDataLoaded"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "allFields"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "visibleFields"
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Enumerations",
                    "kind": 4,
                    "children": [648]
                },
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [2280, 2181]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [664, 665, 2367, 2275]
                }
            ],
            "sources": [
                {
                    "fileName": "src/types/view.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 8176,
            "name": "@airtable/blocks/ui/system: All style props",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/system/all_styles_set.ts",
            "comment": {},
            "children": [
                {
                    "id": 8177,
                    "name": "AllStylesProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "In the Blocks SDK, UI components can be styled via a set of supported style props.\nThese style props (e.g. `width`, `margin`, `backgroundColor`) take a subset of\nsupported CSS properties and expose them as explicit React component props.",
                        "text": "Here is an example that uses the {@link Box} layout primitive:\n\n```\n<Box\n    display=\"flex\"\n    alignItems=\"center\"\n    justifyContent=\"center\"\n    width=\"200px\"\n    height=\"200px\"\n>\n    Hello world\n</Box>\n```\n\nThis is equivalent to the following:\n\n```\n<Box style={{\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '200px',\n    height: '200px',\n}}>\n    Hello world\n</Box>\n```\n\nStyle props also provide access to Airtable's design tokens, including our color\npalette, typographic scale, and spacing scale. This allows developers to quickly\nbuild UIs that adhere to the Airtable design system. As an example, numbers passed\nto the `margin` or `padding` props are converted to our spacing scale, based on\npowers of two.\n\n```\n<Box margin={0} /> // margin: 0;\n<Box margin={1} /> // margin: 4px;\n<Box margin={2} /> // margin: 8px;\n<Box margin={3} /> // margin: 16px;\n\n// Negative margins are also supported\n<Box margin={-1} /> // margin: -4px;\n<Box margin={-2} /> // margin: -8px;\n<Box margin={-3} /> // margin: -16px;\n```\n\nTo override this behavior and use a specific pixel value (or other units, like percentages\nor ems/rems), you may pass a string like `200px`. However, this is generally discouraged,\nas these values don't adhere to the same grid/vertical rhythm as the rest of our components.\n\nAs another example, style props like `backgroundColor` and `textColor` accept\n{@link Colors|color names} that ensure visual consistency with the Airtable styleguide.\nLike the spacing scale, you can always opt out by passing in hex/rgb/hsl strings directly.\n\n```\n<Box backgroundColor=\"blue\" textColor=\"white\" />\n```\n\nEach component in our UI library exposes a particular subset of style props, documented as\nstyle prop interfaces. For more information, refer to the API reference for the specific\ncomponent that you're trying to use.\n\nAll supported style props:\n* {@link AppearanceSetProps|Appearance}\n* {@link DimensionsSetProps|Dimensions}\n* {@link FlexContainerSetProps|Flex container}\n* {@link FlexItemSetProps|Flex item}\n* {@link PositionSetProps|Position}\n* {@link SpacingSetProps|Spacing}\n* {@link TypographySetProps|Typography}\n* {@link DisplayProps|Display}\n* {@link OverflowProps|Overflow}\n",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/system/All styles\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 8198,
                            "name": "alignContent",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the alignment of a flex container's lines when there is extra space in the cross-axis. This property has no effect on a single-line flex container."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/align_content.ts",
                                    "line": 10,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "AlignContentProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AlignContentProps.alignContent",
                                "id": 7742
                            }
                        },
                        {
                            "id": 8199,
                            "name": "alignItems",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the alignment of flex items on the cross-axis of a flex container."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/align_items.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "AlignItemsProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AlignItemsProps.alignItems",
                                "id": 7750
                            }
                        },
                        {
                            "id": 8208,
                            "name": "alignSelf",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Aligns flex items of the current flex line, overriding the `alignItems` value."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/align_self.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "AlignSelfProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AlignSelfProps.alignSelf",
                                "id": 7833
                            }
                        },
                        {
                            "id": 8178,
                            "name": "backgroundColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the background color of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/background_color.ts",
                                    "line": 10,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BackgroundColorProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BackgroundColorProps.backgroundColor",
                                "id": 7566
                            }
                        },
                        {
                            "id": 8179,
                            "name": "border",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets an element's border. It's a shorthand for `borderWidth`, `borderStyle`, and `borderColor`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 19,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.border",
                                "id": 7576
                            }
                        },
                        {
                            "id": 8185,
                            "name": "borderBottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's bottom border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 31,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderBottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderBottom",
                                "id": 7582
                            }
                        },
                        {
                            "id": 8182,
                            "name": "borderColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the color of all sides of an element's border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 25,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderColorProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderColor",
                                "id": 7579
                            }
                        },
                        {
                            "id": 8186,
                            "name": "borderLeft",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's left border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 33,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderLeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderLeft",
                                "id": 7583
                            }
                        },
                        {
                            "id": 8189,
                            "name": "borderRadius",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border_radius.ts",
                                    "line": 10,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderRadiusProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderRadiusProps.borderRadius",
                                "id": 7622
                            }
                        },
                        {
                            "id": 8184,
                            "name": "borderRight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's right border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 29,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderRightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderRight",
                                "id": 7581
                            }
                        },
                        {
                            "id": 8181,
                            "name": "borderStyle",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the line style for all four sides of an element's border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 23,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderStyleProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderStyle",
                                "id": 7578
                            }
                        },
                        {
                            "id": 8183,
                            "name": "borderTop",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's top border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 27,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderTopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderTop",
                                "id": 7580
                            }
                        },
                        {
                            "id": 8180,
                            "name": "borderWidth",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the widths of all four sides of an element's border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 21,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderWidthProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderWidth",
                                "id": 7577
                            }
                        },
                        {
                            "id": 8187,
                            "name": "borderX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's left and right borders."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 35,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderX",
                                "id": 7584
                            }
                        },
                        {
                            "id": 8188,
                            "name": "borderY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's top and bottom borders."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 37,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderY",
                                "id": 7585
                            }
                        },
                        {
                            "id": 8214,
                            "name": "bottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the vertical position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/bottom.ts",
                                    "line": 11,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BottomProps.bottom",
                                "id": 7909
                            }
                        },
                        {
                            "id": 8190,
                            "name": "boxShadow",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii, and color."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/box_shadow.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BoxShadowProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BoxShadowProps.boxShadow",
                                "id": 7632
                            }
                        },
                        {
                            "id": 8241,
                            "name": "display",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/display.ts",
                                    "line": 14,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "DisplayProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "DisplayProps.display",
                                "id": 8158
                            }
                        },
                        {
                            "id": 8204,
                            "name": "flex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flexGrow`, `flexShrink`, and `flexBasis`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex.ts",
                                    "line": 10,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexProps.flex",
                                "id": 7801
                            }
                        },
                        {
                            "id": 8207,
                            "name": "flexBasis",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the initial main size of a flex item."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex_basis.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexBasisProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexBasisProps.flexBasis",
                                "id": 7825
                            }
                        },
                        {
                            "id": 8200,
                            "name": "flexDirection",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed)."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/flex_direction.ts",
                                    "line": 10,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexDirectionProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexDirectionProps.flexDirection",
                                "id": 7758
                            }
                        },
                        {
                            "id": 8205,
                            "name": "flexGrow",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the flex grow factor of a flex item. If the size of flex items is smaller than the flex container, items grow to fit according to `flexGrow`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex_grow.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalsNumber"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexGrowProps.flexGrow",
                                "id": 7809
                            }
                        },
                        {
                            "id": 8206,
                            "name": "flexShrink",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the flex shrink factor of a flex item. If the size of flex items is larger than the flex container, items shrink to fit according to `flexShrink`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex_shrink.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalsNumber"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexShrinkProps.flexShrink",
                                "id": 7817
                            }
                        },
                        {
                            "id": 8201,
                            "name": "flexWrap",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/flex_wrap.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexWrapProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexWrapProps.flexWrap",
                                "id": 7766
                            }
                        },
                        {
                            "id": 8231,
                            "name": "fontFamily",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies a prioritized list of one or more font family names and/or generic family names for the selected element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/font_family.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FontFamilyProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FontFamilyProps.fontFamily",
                                "id": 8053
                            }
                        },
                        {
                            "id": 8232,
                            "name": "fontSize",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the size of the font. This property is also used to compute the size of `em`, `ex`, and other relative length units."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/font_size.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FontSizeProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FontSizeProps.fontSize",
                                "id": 8063
                            }
                        },
                        {
                            "id": 8233,
                            "name": "fontStyle",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets whether a font should be styled with a normal, italic, or oblique face."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/font_style.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FontStyleProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FontStyleProps.fontStyle",
                                "id": 8073
                            }
                        },
                        {
                            "id": 8234,
                            "name": "fontWeight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the weight (or boldness) of the font."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/font_weight.ts",
                                    "line": 11,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "FontWeightProperty"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FontWeightProps.fontWeight",
                                "id": 8081
                            }
                        },
                        {
                            "id": 8192,
                            "name": "height",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the height of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/height.ts",
                                    "line": 10,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "HeightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "HeightProps.height",
                                "id": 7671
                            }
                        },
                        {
                            "id": 8202,
                            "name": "justifyContent",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the alignment of flex items on the main axis of a flex container."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/justify_content.ts",
                                    "line": 10,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "JustifyContentProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "JustifyContentProps.justifyContent",
                                "id": 7774
                            }
                        },
                        {
                            "id": 8215,
                            "name": "left",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/left.ts",
                                    "line": 11,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "LeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "LeftProps.left",
                                "id": 7920
                            }
                        },
                        {
                            "id": 8235,
                            "name": "letterSpacing",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the spacing behavior between text characters."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/letter_spacing.ts",
                                    "line": 10,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "LetterSpacingProperty",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Length"
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "LetterSpacingProps.letterSpacing",
                                "id": 8091
                            }
                        },
                        {
                            "id": 8236,
                            "name": "lineHeight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the amount of space used for lines, such as in text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/line_height.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "LineHeightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "LineHeightProps.lineHeight",
                                "id": 8101
                            }
                        },
                        {
                            "id": 8217,
                            "name": "margin",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on all four sides of an element. It is a shorthand for `marginTop`, `marginRight`, `marginBottom`, and `marginLeft`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 17,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.margin",
                                "id": 7952
                            }
                        },
                        {
                            "id": 8220,
                            "name": "marginBottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 23,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginBottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginBottom",
                                "id": 7955
                            }
                        },
                        {
                            "id": 8221,
                            "name": "marginLeft",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the left of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 25,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginLeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginLeft",
                                "id": 7956
                            }
                        },
                        {
                            "id": 8219,
                            "name": "marginRight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the right of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 21,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginRightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginRight",
                                "id": 7954
                            }
                        },
                        {
                            "id": 8218,
                            "name": "marginTop",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 19,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginTopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginTop",
                                "id": 7953
                            }
                        },
                        {
                            "id": 8222,
                            "name": "marginX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the left and right of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 27,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginX",
                                "id": 7957
                            }
                        },
                        {
                            "id": 8223,
                            "name": "marginY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the top and bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 29,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginY",
                                "id": 7958
                            }
                        },
                        {
                            "id": 8193,
                            "name": "maxHeight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the maximum height of an element. It prevents the used value of the `height` property from becoming larger than the value specified for `maxHeight`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/max_height.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MaxHeightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MaxHeightProps.maxHeight",
                                "id": 7681
                            }
                        },
                        {
                            "id": 8194,
                            "name": "maxWidth",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the maximum width of an element. It prevents the used value of the `width` property from becoming larger than the value specified by `maxWidth`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/max_width.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MaxWidthProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MaxWidthProps.maxWidth",
                                "id": 7691
                            }
                        },
                        {
                            "id": 8195,
                            "name": "minHeight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the minimum height of an element. It prevents the used value of the `height` property from becoming smaller than the value specified for `minHeight`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/min_height.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MinHeightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MinHeightProps.minHeight",
                                "id": 7701
                            }
                        },
                        {
                            "id": 8196,
                            "name": "minWidth",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the minimum width of an element. It prevents the used value of the `width` property from becoming smaller than the value specified for `minWidth`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/min_width.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MinWidthProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MinWidthProps.minWidth",
                                "id": 7711
                            }
                        },
                        {
                            "id": 8191,
                            "name": "opacity",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the transparency of an element or the degree to which content behind an element is visible."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/opacity.ts",
                                    "line": 11,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "GlobalsNumber"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "OpacityProps.opacity",
                                "id": 7642
                            }
                        },
                        {
                            "id": 8210,
                            "name": "order",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the order to lay out an item in a flex container. Items are sorted by ascending `order` value and then by their source code order."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/order.ts",
                                    "line": 10,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalsNumber"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "OrderProps.order",
                                "id": 7849
                            }
                        },
                        {
                            "id": 8242,
                            "name": "overflow",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets what to do when an element's content is too big to fit in its block formatting context. It is a shorthand for `overflowX` and `overflowY`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/overflow.ts",
                                    "line": 14,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "OverflowProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "OverflowProps.overflow",
                                "id": 8166
                            }
                        },
                        {
                            "id": 8244,
                            "name": "overflowX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/overflow.ts",
                                    "line": 18,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "OverflowYProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "OverflowProps.overflowX",
                                "id": 8168
                            }
                        },
                        {
                            "id": 8243,
                            "name": "overflowY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/overflow.ts",
                                    "line": 16,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "OverflowXProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "OverflowProps.overflowY",
                                "id": 8167
                            }
                        },
                        {
                            "id": 8224,
                            "name": "padding",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the padding area on all four sides of an element. It is a shorthand for `paddingTop`, `paddingRight`, `paddingBottom`, and `paddingLeft`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 17,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.padding",
                                "id": 7993
                            }
                        },
                        {
                            "id": 8227,
                            "name": "paddingBottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the height of the padding area on the bottom side of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 23,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingBottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.paddingBottom",
                                "id": 7996
                            }
                        },
                        {
                            "id": 8228,
                            "name": "paddingLeft",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width of the padding area on the left side of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 25,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingLeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.paddingLeft",
                                "id": 7997
                            }
                        },
                        {
                            "id": 8226,
                            "name": "paddingRight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width of the padding area on the right side of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 21,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingRightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.paddingRight",
                                "id": 7995
                            }
                        },
                        {
                            "id": 8225,
                            "name": "paddingTop",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the height of the padding area on the top side of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 19,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingTopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.paddingTop",
                                "id": 7994
                            }
                        },
                        {
                            "id": 8229,
                            "name": "paddingX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width of the padding area on the left and right sides of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 27,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.paddingX",
                                "id": 7998
                            }
                        },
                        {
                            "id": 8230,
                            "name": "paddingY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the height of the padding area on the top and bottom sides of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 29,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.paddingY",
                                "id": 7999
                            }
                        },
                        {
                            "id": 8211,
                            "name": "position",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/position.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PositionProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PositionProps.position",
                                "id": 7869
                            }
                        },
                        {
                            "id": 8213,
                            "name": "right",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/right.ts",
                                    "line": 11,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "RightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "RightProps.right",
                                "id": 7898
                            }
                        },
                        {
                            "id": 8237,
                            "name": "textAlign",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the horizontal alignment of the text."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/text_align.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TextAlignProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "TextAlignProps.textAlign",
                                "id": 8109
                            }
                        },
                        {
                            "id": 8238,
                            "name": "textColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the foreground color value of an element's text and text decorations, and sets the `currentcolor` value.",
                                "tags": [
                                    {
                                        "tag": "see",
                                        "text": "{@link colors}\n"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/text_color.ts",
                                    "line": 14,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "ColorProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "TextColorProps.textColor",
                                "id": 8117
                            }
                        },
                        {
                            "id": 8239,
                            "name": "textDecoration",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the appearance of decorative lines on text."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/text_decoration.ts",
                                    "line": 12,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TextDecorationProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "TextDecorationProps.textDecoration",
                                "id": 8127
                            }
                        },
                        {
                            "id": 8240,
                            "name": "textTransform",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/text_transform.ts",
                                    "line": 10,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TextTransformProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "TextTransformProps.textTransform",
                                "id": 8135
                            }
                        },
                        {
                            "id": 8212,
                            "name": "top",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the vertical position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/top.ts",
                                    "line": 11,
                                    "character": 7
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "TopProps.top",
                                "id": 7887
                            }
                        },
                        {
                            "id": 8197,
                            "name": "width",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the width of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/width.ts",
                                    "line": 10,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "WidthProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "WidthProps.width",
                                "id": 7721
                            }
                        },
                        {
                            "id": 8216,
                            "name": "zIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with larger z-indexes cover those with smaller ones."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/z_index.ts",
                                    "line": 10,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "ZIndexProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "ZIndexProps.zIndex",
                                "id": 7931
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                8198,
                                8199,
                                8208,
                                8178,
                                8179,
                                8185,
                                8182,
                                8186,
                                8189,
                                8184,
                                8181,
                                8183,
                                8180,
                                8187,
                                8188,
                                8214,
                                8190,
                                8241,
                                8204,
                                8207,
                                8200,
                                8205,
                                8206,
                                8201,
                                8231,
                                8232,
                                8233,
                                8234,
                                8192,
                                8202,
                                8215,
                                8235,
                                8236,
                                8217,
                                8220,
                                8221,
                                8219,
                                8218,
                                8222,
                                8223,
                                8193,
                                8194,
                                8195,
                                8196,
                                8191,
                                8210,
                                8242,
                                8244,
                                8243,
                                8224,
                                8227,
                                8228,
                                8226,
                                8225,
                                8229,
                                8230,
                                8211,
                                8213,
                                8237,
                                8238,
                                8239,
                                8240,
                                8212,
                                8197,
                                8216
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/all_styles_set.ts",
                            "line": 113,
                            "character": 31
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AppearanceSetProps",
                            "id": 7651
                        },
                        {
                            "type": "reference",
                            "name": "DimensionsSetProps",
                            "id": 7730
                        },
                        {
                            "type": "reference",
                            "name": "FlexContainerSetProps",
                            "id": 7789
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7856
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7940
                        },
                        {
                            "type": "reference",
                            "name": "SpacingSetProps",
                            "id": 8033
                        },
                        {
                            "type": "reference",
                            "name": "TypographySetProps",
                            "id": 8142
                        },
                        {
                            "type": "reference",
                            "name": "DisplayProps",
                            "id": 8157
                        },
                        {
                            "type": "reference",
                            "name": "OverflowProps",
                            "id": 8165
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "BoxProps",
                            "id": 11035
                        },
                        {
                            "type": "reference",
                            "name": "TextProps",
                            "id": 13811
                        },
                        {
                            "type": "reference",
                            "name": "HeadingProps",
                            "id": 14034
                        },
                        {
                            "type": "reference",
                            "name": "LabelProps",
                            "id": 14144
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [8177]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/system/all_styles_set.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 7564,
            "name": "@airtable/blocks/ui/system: Appearance",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/system/appearance/background_color.ts",
            "comment": {},
            "children": [
                {
                    "id": 7651,
                    "name": "AppearanceSetProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props for the visual appearance of an element.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/system/Appearance\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 7652,
                            "name": "backgroundColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the background color of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/background_color.ts",
                                    "line": 10,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BackgroundColorProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BackgroundColorProps.backgroundColor",
                                "id": 7566
                            }
                        },
                        {
                            "id": 7653,
                            "name": "border",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets an element's border. It's a shorthand for `borderWidth`, `borderStyle`, and `borderColor`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 19,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.border",
                                "id": 7576
                            }
                        },
                        {
                            "id": 7659,
                            "name": "borderBottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's bottom border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 31,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderBottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderBottom",
                                "id": 7582
                            }
                        },
                        {
                            "id": 7656,
                            "name": "borderColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the color of all sides of an element's border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 25,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderColorProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderColor",
                                "id": 7579
                            }
                        },
                        {
                            "id": 7660,
                            "name": "borderLeft",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's left border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 33,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderLeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderLeft",
                                "id": 7583
                            }
                        },
                        {
                            "id": 7663,
                            "name": "borderRadius",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border_radius.ts",
                                    "line": 10,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderRadiusProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderRadiusProps.borderRadius",
                                "id": 7622
                            }
                        },
                        {
                            "id": 7658,
                            "name": "borderRight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's right border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 29,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderRightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderRight",
                                "id": 7581
                            }
                        },
                        {
                            "id": 7655,
                            "name": "borderStyle",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the line style for all four sides of an element's border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 23,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderStyleProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderStyle",
                                "id": 7578
                            }
                        },
                        {
                            "id": 7657,
                            "name": "borderTop",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's top border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 27,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderTopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderTop",
                                "id": 7580
                            }
                        },
                        {
                            "id": 7654,
                            "name": "borderWidth",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the widths of all four sides of an element's border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 21,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderWidthProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderWidth",
                                "id": 7577
                            }
                        },
                        {
                            "id": 7661,
                            "name": "borderX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's left and right borders."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 35,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderX",
                                "id": 7584
                            }
                        },
                        {
                            "id": 7662,
                            "name": "borderY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's top and bottom borders."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 37,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BorderProps.borderY",
                                "id": 7585
                            }
                        },
                        {
                            "id": 7664,
                            "name": "boxShadow",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii, and color."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/box_shadow.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BoxShadowProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BoxShadowProps.boxShadow",
                                "id": 7632
                            }
                        },
                        {
                            "id": 7665,
                            "name": "opacity",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the transparency of an element or the degree to which content behind an element is visible."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/opacity.ts",
                                    "line": 11,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "GlobalsNumber"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "OpacityProps.opacity",
                                "id": 7642
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                7652,
                                7653,
                                7659,
                                7656,
                                7660,
                                7663,
                                7658,
                                7655,
                                7657,
                                7654,
                                7661,
                                7662,
                                7664,
                                7665
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/appearance/appearance_set.ts",
                            "line": 15,
                            "character": 35
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "BackgroundColorProps",
                            "id": 7565
                        },
                        {
                            "type": "reference",
                            "name": "BorderProps",
                            "id": 7575
                        },
                        {
                            "type": "reference",
                            "name": "BorderRadiusProps",
                            "id": 7621
                        },
                        {
                            "type": "reference",
                            "name": "BoxShadowProps",
                            "id": 7631
                        },
                        {
                            "type": "reference",
                            "name": "OpacityProps",
                            "id": 7641
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8177
                        }
                    ]
                },
                {
                    "id": 7565,
                    "name": "BackgroundColorProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7566,
                            "name": "backgroundColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the background color of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/background_color.ts",
                                    "line": 10,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BackgroundColorProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7566]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/appearance/background_color.ts",
                            "line": 8,
                            "character": 37
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AppearanceSetProps",
                            "id": 7651
                        },
                        {
                            "type": "reference",
                            "name": "ProgressBarStyleProps",
                            "id": 11797
                        },
                        {
                            "type": "reference",
                            "name": "SwitchStyleProps",
                            "id": 13563
                        }
                    ]
                },
                {
                    "id": 7575,
                    "name": "BorderProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7576,
                            "name": "border",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets an element's border. It's a shorthand for `borderWidth`, `borderStyle`, and `borderColor`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 19,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7582,
                            "name": "borderBottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's bottom border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 31,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderBottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7579,
                            "name": "borderColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the color of all sides of an element's border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 25,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderColorProperty"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7583,
                            "name": "borderLeft",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's left border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 33,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderLeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7581,
                            "name": "borderRight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's right border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 29,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderRightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7578,
                            "name": "borderStyle",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the line style for all four sides of an element's border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 23,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderStyleProperty"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7580,
                            "name": "borderTop",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's top border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 27,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderTopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7577,
                            "name": "borderWidth",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the widths of all four sides of an element's border."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 21,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderWidthProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7584,
                            "name": "borderX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's left and right borders."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 35,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7585,
                            "name": "borderY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width, line style, and color for an element's top and bottom borders."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border.ts",
                                    "line": 37,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7576, 7582, 7579, 7583, 7581, 7578, 7580, 7577, 7584, 7585]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/appearance/border.ts",
                            "line": 17,
                            "character": 28
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AppearanceSetProps",
                            "id": 7651
                        }
                    ]
                },
                {
                    "id": 7621,
                    "name": "BorderRadiusProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7622,
                            "name": "borderRadius",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/border_radius.ts",
                                    "line": 10,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BorderRadiusProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7622]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/appearance/border_radius.ts",
                            "line": 8,
                            "character": 34
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AppearanceSetProps",
                            "id": 7651
                        },
                        {
                            "type": "reference",
                            "name": "DialogCloseButtonStyleProps",
                            "id": 12972
                        }
                    ]
                },
                {
                    "id": 7631,
                    "name": "BoxShadowProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7632,
                            "name": "boxShadow",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii, and color."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/box_shadow.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BoxShadowProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7632]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/appearance/box_shadow.ts",
                            "line": 8,
                            "character": 31
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AppearanceSetProps",
                            "id": 7651
                        }
                    ]
                },
                {
                    "id": 7641,
                    "name": "OpacityProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7642,
                            "name": "opacity",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the transparency of an element or the degree to which content behind an element is visible."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/appearance/opacity.ts",
                                    "line": 11,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "GlobalsNumber"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7642]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/appearance/opacity.ts",
                            "line": 8,
                            "character": 29
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AppearanceSetProps",
                            "id": 7651
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [7651, 7565, 7575, 7621, 7631, 7641]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/system/appearance/background_color.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 9126,
            "name": "@airtable/blocks/ui/system: Control sizes",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/control_sizes.ts",
            "comment": {},
            "children": [
                {
                    "id": 9127,
                    "name": "ControlSize",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Sizes for the {@link Button}, {@link Input}, {@link Select}, {@link SelectButtons}, and {@link Switch} components."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/control_sizes.ts",
                            "line": 13,
                            "character": 23
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "small"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "default"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "large"
                            }
                        ]
                    }
                },
                {
                    "id": 9130,
                    "name": "ControlSizeProp",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Size prop for the {@link Button}, {@link Input}, {@link Select}, {@link SelectButtons}, and {@link Switch} components."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/control_sizes.ts",
                            "line": 19,
                            "character": 27
                        }
                    ],
                    "type": {
                        "type": "reference",
                        "name": "ResponsiveProp",
                        "id": 7559,
                        "typeArguments": [
                            {
                                "type": "reference",
                                "name": "ControlSize",
                                "id": 9127
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [9127, 9130]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/control_sizes.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 7669,
            "name": "@airtable/blocks/ui/system: Dimensions",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/system/dimensions/height.ts",
            "comment": {},
            "children": [
                {
                    "id": 7730,
                    "name": "DimensionsSetProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props for the dimensions of an element.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/system/Dimensions\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 7731,
                            "name": "height",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the height of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/height.ts",
                                    "line": 10,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "HeightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "HeightProps.height",
                                "id": 7671
                            }
                        },
                        {
                            "id": 7732,
                            "name": "maxHeight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the maximum height of an element. It prevents the used value of the `height` property from becoming larger than the value specified for `maxHeight`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/max_height.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MaxHeightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MaxHeightProps.maxHeight",
                                "id": 7681
                            }
                        },
                        {
                            "id": 7733,
                            "name": "maxWidth",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the maximum width of an element. It prevents the used value of the `width` property from becoming larger than the value specified by `maxWidth`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/max_width.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MaxWidthProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MaxWidthProps.maxWidth",
                                "id": 7691
                            }
                        },
                        {
                            "id": 7734,
                            "name": "minHeight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the minimum height of an element. It prevents the used value of the `height` property from becoming smaller than the value specified for `minHeight`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/min_height.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MinHeightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MinHeightProps.minHeight",
                                "id": 7701
                            }
                        },
                        {
                            "id": 7735,
                            "name": "minWidth",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the minimum width of an element. It prevents the used value of the `width` property from becoming smaller than the value specified for `minWidth`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/min_width.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MinWidthProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MinWidthProps.minWidth",
                                "id": 7711
                            }
                        },
                        {
                            "id": 7736,
                            "name": "width",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the width of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/width.ts",
                                    "line": 10,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "WidthProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "WidthProps.width",
                                "id": 7721
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7731, 7732, 7733, 7734, 7735, 7736]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/dimensions/dimensions_set.ts",
                            "line": 16,
                            "character": 35
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "HeightProps",
                            "id": 7670
                        },
                        {
                            "type": "reference",
                            "name": "MaxHeightProps",
                            "id": 7680
                        },
                        {
                            "type": "reference",
                            "name": "MaxWidthProps",
                            "id": 7690
                        },
                        {
                            "type": "reference",
                            "name": "MinHeightProps",
                            "id": 7700
                        },
                        {
                            "type": "reference",
                            "name": "MinWidthProps",
                            "id": 7710
                        },
                        {
                            "type": "reference",
                            "name": "WidthProps",
                            "id": 7720
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8177
                        },
                        {
                            "type": "reference",
                            "name": "RecordCardListStyleProps",
                            "id": 12353
                        },
                        {
                            "type": "reference",
                            "name": "DialogCloseButtonStyleProps",
                            "id": 12972
                        },
                        {
                            "type": "reference",
                            "name": "DialogStyleProps",
                            "id": 13114
                        }
                    ]
                },
                {
                    "id": 7670,
                    "name": "HeightProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7671,
                            "name": "height",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the height of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/height.ts",
                                    "line": 10,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "HeightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7671]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/dimensions/height.ts",
                            "line": 8,
                            "character": 28
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "DimensionsSetProps",
                            "id": 7730
                        },
                        {
                            "type": "reference",
                            "name": "ProgressBarStyleProps",
                            "id": 11797
                        }
                    ]
                },
                {
                    "id": 7680,
                    "name": "MaxHeightProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7681,
                            "name": "maxHeight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the maximum height of an element. It prevents the used value of the `height` property from becoming larger than the value specified for `maxHeight`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/max_height.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MaxHeightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7681]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/dimensions/max_height.ts",
                            "line": 8,
                            "character": 31
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "DimensionsSetProps",
                            "id": 7730
                        }
                    ]
                },
                {
                    "id": 7690,
                    "name": "MaxWidthProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7691,
                            "name": "maxWidth",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the maximum width of an element. It prevents the used value of the `width` property from becoming larger than the value specified by `maxWidth`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/max_width.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MaxWidthProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7691]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/dimensions/max_width.ts",
                            "line": 8,
                            "character": 30
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "DimensionsSetProps",
                            "id": 7730
                        },
                        {
                            "type": "reference",
                            "name": "SelectStyleProps",
                            "id": 9149
                        },
                        {
                            "type": "reference",
                            "name": "InputStyleProps",
                            "id": 10026
                        },
                        {
                            "type": "reference",
                            "name": "CellRendererStyleProps",
                            "id": 10321
                        },
                        {
                            "type": "reference",
                            "name": "ColorPaletteStyleProps",
                            "id": 11417
                        },
                        {
                            "type": "reference",
                            "name": "ProgressBarStyleProps",
                            "id": 11797
                        },
                        {
                            "type": "reference",
                            "name": "ButtonStyleProps",
                            "id": 11879
                        },
                        {
                            "type": "reference",
                            "name": "SelectButtonsStyleProps",
                            "id": 12597
                        },
                        {
                            "type": "reference",
                            "name": "SwitchStyleProps",
                            "id": 13563
                        },
                        {
                            "type": "reference",
                            "name": "LinkStyleProps",
                            "id": 13915
                        },
                        {
                            "type": "reference",
                            "name": "FormFieldStyleProps",
                            "id": 14234
                        },
                        {
                            "type": "reference",
                            "name": "TextButtonStyleProps",
                            "id": 15176
                        }
                    ]
                },
                {
                    "id": 7700,
                    "name": "MinHeightProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7701,
                            "name": "minHeight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the minimum height of an element. It prevents the used value of the `height` property from becoming smaller than the value specified for `minHeight`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/min_height.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MinHeightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7701]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/dimensions/min_height.ts",
                            "line": 8,
                            "character": 31
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "DimensionsSetProps",
                            "id": 7730
                        }
                    ]
                },
                {
                    "id": 7710,
                    "name": "MinWidthProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7711,
                            "name": "minWidth",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the minimum width of an element. It prevents the used value of the `width` property from becoming smaller than the value specified for `minWidth`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/min_width.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MinWidthProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7711]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/dimensions/min_width.ts",
                            "line": 8,
                            "character": 30
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "DimensionsSetProps",
                            "id": 7730
                        },
                        {
                            "type": "reference",
                            "name": "SelectStyleProps",
                            "id": 9149
                        },
                        {
                            "type": "reference",
                            "name": "InputStyleProps",
                            "id": 10026
                        },
                        {
                            "type": "reference",
                            "name": "CellRendererStyleProps",
                            "id": 10321
                        },
                        {
                            "type": "reference",
                            "name": "ColorPaletteStyleProps",
                            "id": 11417
                        },
                        {
                            "type": "reference",
                            "name": "ProgressBarStyleProps",
                            "id": 11797
                        },
                        {
                            "type": "reference",
                            "name": "ButtonStyleProps",
                            "id": 11879
                        },
                        {
                            "type": "reference",
                            "name": "SelectButtonsStyleProps",
                            "id": 12597
                        },
                        {
                            "type": "reference",
                            "name": "SwitchStyleProps",
                            "id": 13563
                        },
                        {
                            "type": "reference",
                            "name": "LinkStyleProps",
                            "id": 13915
                        },
                        {
                            "type": "reference",
                            "name": "FormFieldStyleProps",
                            "id": 14234
                        },
                        {
                            "type": "reference",
                            "name": "TextButtonStyleProps",
                            "id": 15176
                        }
                    ]
                },
                {
                    "id": 7720,
                    "name": "WidthProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7721,
                            "name": "width",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the width of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/dimensions/width.ts",
                                    "line": 10,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "WidthProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7721]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/dimensions/width.ts",
                            "line": 8,
                            "character": 27
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "DimensionsSetProps",
                            "id": 7730
                        },
                        {
                            "type": "reference",
                            "name": "SelectStyleProps",
                            "id": 9149
                        },
                        {
                            "type": "reference",
                            "name": "InputStyleProps",
                            "id": 10026
                        },
                        {
                            "type": "reference",
                            "name": "CellRendererStyleProps",
                            "id": 10321
                        },
                        {
                            "type": "reference",
                            "name": "ColorPaletteStyleProps",
                            "id": 11417
                        },
                        {
                            "type": "reference",
                            "name": "ProgressBarStyleProps",
                            "id": 11797
                        },
                        {
                            "type": "reference",
                            "name": "ButtonStyleProps",
                            "id": 11879
                        },
                        {
                            "type": "reference",
                            "name": "SelectButtonsStyleProps",
                            "id": 12597
                        },
                        {
                            "type": "reference",
                            "name": "SwitchStyleProps",
                            "id": 13563
                        },
                        {
                            "type": "reference",
                            "name": "LinkStyleProps",
                            "id": 13915
                        },
                        {
                            "type": "reference",
                            "name": "FormFieldStyleProps",
                            "id": 14234
                        },
                        {
                            "type": "reference",
                            "name": "TextButtonStyleProps",
                            "id": 15176
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [7730, 7670, 7680, 7690, 7700, 7710, 7720]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/system/dimensions/height.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 8156,
            "name": "@airtable/blocks/ui/system: Display",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/system/display.ts",
            "comment": {},
            "children": [
                {
                    "id": 8157,
                    "name": "DisplayProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style prop for the display type of an element.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/system/Display\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 8158,
                            "name": "display",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/display.ts",
                                    "line": 14,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "DisplayProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8158]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/display.ts",
                            "line": 12,
                            "character": 29
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8177
                        },
                        {
                            "type": "reference",
                            "name": "DialogCloseButtonStyleProps",
                            "id": 12972
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [8157]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/system/display.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 7740,
            "name": "@airtable/blocks/ui/system: Flex container",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/system/flex_container/align_content.ts",
            "comment": {},
            "children": [
                {
                    "id": 7741,
                    "name": "AlignContentProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7742,
                            "name": "alignContent",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the alignment of a flex container's lines when there is extra space in the cross-axis. This property has no effect on a single-line flex container."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/align_content.ts",
                                    "line": 10,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "AlignContentProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7742]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_container/align_content.ts",
                            "line": 8,
                            "character": 34
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FlexContainerSetProps",
                            "id": 7789
                        }
                    ]
                },
                {
                    "id": 7749,
                    "name": "AlignItemsProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7750,
                            "name": "alignItems",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the alignment of flex items on the cross-axis of a flex container."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/align_items.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "AlignItemsProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7750]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_container/align_items.ts",
                            "line": 8,
                            "character": 32
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FlexContainerSetProps",
                            "id": 7789
                        }
                    ]
                },
                {
                    "id": 7789,
                    "name": "FlexContainerSetProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props for a flex container element.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/system/FlexContainer\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 7790,
                            "name": "alignContent",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the alignment of a flex container's lines when there is extra space in the cross-axis. This property has no effect on a single-line flex container."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/align_content.ts",
                                    "line": 10,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "AlignContentProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AlignContentProps.alignContent",
                                "id": 7742
                            }
                        },
                        {
                            "id": 7791,
                            "name": "alignItems",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the alignment of flex items on the cross-axis of a flex container."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/align_items.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "AlignItemsProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AlignItemsProps.alignItems",
                                "id": 7750
                            }
                        },
                        {
                            "id": 7792,
                            "name": "flexDirection",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed)."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/flex_direction.ts",
                                    "line": 10,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexDirectionProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexDirectionProps.flexDirection",
                                "id": 7758
                            }
                        },
                        {
                            "id": 7793,
                            "name": "flexWrap",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/flex_wrap.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexWrapProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexWrapProps.flexWrap",
                                "id": 7766
                            }
                        },
                        {
                            "id": 7794,
                            "name": "justifyContent",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the alignment of flex items on the main axis of a flex container."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/justify_content.ts",
                                    "line": 10,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "JustifyContentProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "JustifyContentProps.justifyContent",
                                "id": 7774
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7790, 7791, 7792, 7793, 7794]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_container/flex_container_set.ts",
                            "line": 16,
                            "character": 38
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AlignContentProps",
                            "id": 7741
                        },
                        {
                            "type": "reference",
                            "name": "AlignItemsProps",
                            "id": 7749
                        },
                        {
                            "type": "reference",
                            "name": "FlexDirectionProps",
                            "id": 7757
                        },
                        {
                            "type": "reference",
                            "name": "FlexWrapProps",
                            "id": 7765
                        },
                        {
                            "type": "reference",
                            "name": "JustifyContentProps",
                            "id": 7773
                        },
                        {
                            "type": "reference",
                            "name": "JustifyItemsProps"
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8177
                        },
                        {
                            "type": "reference",
                            "name": "DialogCloseButtonStyleProps",
                            "id": 12972
                        },
                        {
                            "type": "reference",
                            "name": "DialogStyleProps",
                            "id": 13114
                        }
                    ]
                },
                {
                    "id": 7757,
                    "name": "FlexDirectionProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7758,
                            "name": "flexDirection",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed)."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/flex_direction.ts",
                                    "line": 10,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexDirectionProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7758]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_container/flex_direction.ts",
                            "line": 8,
                            "character": 35
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FlexContainerSetProps",
                            "id": 7789
                        }
                    ]
                },
                {
                    "id": 7765,
                    "name": "FlexWrapProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7766,
                            "name": "flexWrap",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/flex_wrap.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexWrapProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7766]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_container/flex_wrap.ts",
                            "line": 8,
                            "character": 30
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FlexContainerSetProps",
                            "id": 7789
                        }
                    ]
                },
                {
                    "id": 7773,
                    "name": "JustifyContentProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7774,
                            "name": "justifyContent",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the alignment of flex items on the main axis of a flex container."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_container/justify_content.ts",
                                    "line": 10,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "JustifyContentProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7774]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_container/justify_content.ts",
                            "line": 8,
                            "character": 36
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FlexContainerSetProps",
                            "id": 7789
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [7741, 7749, 7789, 7757, 7765, 7773]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/system/flex_container/align_content.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 7799,
            "name": "@airtable/blocks/ui/system: Flex item",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/system/flex_item/flex.ts",
            "comment": {},
            "children": [
                {
                    "id": 7832,
                    "name": "AlignSelfProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7833,
                            "name": "alignSelf",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Aligns flex items of the current flex line, overriding the `alignItems` value."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/align_self.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "AlignSelfProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7833]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_item/align_self.ts",
                            "line": 8,
                            "character": 31
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7856
                        }
                    ]
                },
                {
                    "id": 7824,
                    "name": "FlexBasisProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7825,
                            "name": "flexBasis",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the initial main size of a flex item."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex_basis.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexBasisProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7825]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_item/flex_basis.ts",
                            "line": 8,
                            "character": 31
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7856
                        }
                    ]
                },
                {
                    "id": 7808,
                    "name": "FlexGrowProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7809,
                            "name": "flexGrow",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the flex grow factor of a flex item. If the size of flex items is smaller than the flex container, items grow to fit according to `flexGrow`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex_grow.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalsNumber"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7809]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_item/flex_grow.ts",
                            "line": 8,
                            "character": 30
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7856
                        }
                    ]
                },
                {
                    "id": 7856,
                    "name": "FlexItemSetProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props for a flex item element.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/system/FlexItem\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 7861,
                            "name": "alignSelf",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Aligns flex items of the current flex line, overriding the `alignItems` value."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/align_self.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "AlignSelfProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AlignSelfProps.alignSelf",
                                "id": 7833
                            }
                        },
                        {
                            "id": 7857,
                            "name": "flex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flexGrow`, `flexShrink`, and `flexBasis`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex.ts",
                                    "line": 10,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexProps.flex",
                                "id": 7801
                            }
                        },
                        {
                            "id": 7860,
                            "name": "flexBasis",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the initial main size of a flex item."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex_basis.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexBasisProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexBasisProps.flexBasis",
                                "id": 7825
                            }
                        },
                        {
                            "id": 7858,
                            "name": "flexGrow",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the flex grow factor of a flex item. If the size of flex items is smaller than the flex container, items grow to fit according to `flexGrow`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex_grow.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalsNumber"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexGrowProps.flexGrow",
                                "id": 7809
                            }
                        },
                        {
                            "id": 7859,
                            "name": "flexShrink",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the flex shrink factor of a flex item. If the size of flex items is larger than the flex container, items shrink to fit according to `flexShrink`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex_shrink.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalsNumber"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexShrinkProps.flexShrink",
                                "id": 7817
                            }
                        },
                        {
                            "id": 7863,
                            "name": "order",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the order to lay out an item in a flex container. Items are sorted by ascending `order` value and then by their source code order."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/order.ts",
                                    "line": 10,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalsNumber"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "OrderProps.order",
                                "id": 7849
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7861, 7857, 7860, 7858, 7859, 7863]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_item/flex_item_set.ts",
                            "line": 17,
                            "character": 33
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "FlexProps",
                            "id": 7800
                        },
                        {
                            "type": "reference",
                            "name": "FlexGrowProps",
                            "id": 7808
                        },
                        {
                            "type": "reference",
                            "name": "FlexShrinkProps",
                            "id": 7816
                        },
                        {
                            "type": "reference",
                            "name": "FlexBasisProps",
                            "id": 7824
                        },
                        {
                            "type": "reference",
                            "name": "AlignSelfProps",
                            "id": 7832
                        },
                        {
                            "type": "reference",
                            "name": "JustifySelfProps"
                        },
                        {
                            "type": "reference",
                            "name": "OrderProps",
                            "id": 7848
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8177
                        },
                        {
                            "type": "reference",
                            "name": "SelectStyleProps",
                            "id": 9149
                        },
                        {
                            "type": "reference",
                            "name": "InputStyleProps",
                            "id": 10026
                        },
                        {
                            "type": "reference",
                            "name": "CellRendererStyleProps",
                            "id": 10321
                        },
                        {
                            "type": "reference",
                            "name": "IconStyleProps",
                            "id": 10526
                        },
                        {
                            "type": "reference",
                            "name": "LoaderStyleProps",
                            "id": 10688
                        },
                        {
                            "type": "reference",
                            "name": "CollaboratorTokenStyleProps",
                            "id": 11277
                        },
                        {
                            "type": "reference",
                            "name": "ChoiceTokenStyleProps",
                            "id": 11347
                        },
                        {
                            "type": "reference",
                            "name": "ColorPaletteStyleProps",
                            "id": 11417
                        },
                        {
                            "type": "reference",
                            "name": "ProgressBarStyleProps",
                            "id": 11797
                        },
                        {
                            "type": "reference",
                            "name": "ButtonStyleProps",
                            "id": 11879
                        },
                        {
                            "type": "reference",
                            "name": "RecordCardStyleProps",
                            "id": 12042
                        },
                        {
                            "type": "reference",
                            "name": "RecordCardListStyleProps",
                            "id": 12353
                        },
                        {
                            "type": "reference",
                            "name": "SelectButtonsStyleProps",
                            "id": 12597
                        },
                        {
                            "type": "reference",
                            "name": "DialogCloseButtonStyleProps",
                            "id": 12972
                        },
                        {
                            "type": "reference",
                            "name": "SwitchStyleProps",
                            "id": 13563
                        },
                        {
                            "type": "reference",
                            "name": "LinkStyleProps",
                            "id": 13915
                        },
                        {
                            "type": "reference",
                            "name": "FormFieldStyleProps",
                            "id": 14234
                        },
                        {
                            "type": "reference",
                            "name": "TextButtonStyleProps",
                            "id": 15176
                        }
                    ]
                },
                {
                    "id": 7800,
                    "name": "FlexProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7801,
                            "name": "flex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flexGrow`, `flexShrink`, and `flexBasis`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex.ts",
                                    "line": 10,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7801]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_item/flex.ts",
                            "line": 8,
                            "character": 26
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7856
                        }
                    ]
                },
                {
                    "id": 7816,
                    "name": "FlexShrinkProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7817,
                            "name": "flexShrink",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the flex shrink factor of a flex item. If the size of flex items is larger than the flex container, items shrink to fit according to `flexShrink`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex_shrink.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalsNumber"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7817]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_item/flex_shrink.ts",
                            "line": 8,
                            "character": 32
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7856
                        }
                    ]
                },
                {
                    "id": 7848,
                    "name": "OrderProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7849,
                            "name": "order",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the order to lay out an item in a flex container. Items are sorted by ascending `order` value and then by their source code order."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/order.ts",
                                    "line": 10,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalsNumber"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7849]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/flex_item/order.ts",
                            "line": 8,
                            "character": 27
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7856
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [7832, 7824, 7808, 7856, 7800, 7816, 7848]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/system/flex_item/flex.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 8164,
            "name": "@airtable/blocks/ui/system: Overflow",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/system/overflow.ts",
            "comment": {},
            "children": [
                {
                    "id": 8165,
                    "name": "OverflowProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props for the overflow behavior of an element.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/system/Overflow\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 8166,
                            "name": "overflow",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets what to do when an element's content is too big to fit in its block formatting context. It is a shorthand for `overflowX` and `overflowY`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/overflow.ts",
                                    "line": 14,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "OverflowProperty"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 8168,
                            "name": "overflowX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/overflow.ts",
                                    "line": 18,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "OverflowYProperty"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 8167,
                            "name": "overflowY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/overflow.ts",
                                    "line": 16,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "OverflowXProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8166, 8168, 8167]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/overflow.ts",
                            "line": 12,
                            "character": 30
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8177
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [8165]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/system/overflow.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 7867,
            "name": "@airtable/blocks/ui/system: Position",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/system/position/position.ts",
            "comment": {},
            "children": [
                {
                    "id": 7908,
                    "name": "BottomProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7909,
                            "name": "bottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the vertical position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/bottom.ts",
                                    "line": 11,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7909]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/position/bottom.ts",
                            "line": 9,
                            "character": 28
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7940
                        }
                    ]
                },
                {
                    "id": 7919,
                    "name": "LeftProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7920,
                            "name": "left",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/left.ts",
                                    "line": 11,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "LeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7920]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/position/left.ts",
                            "line": 9,
                            "character": 26
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7940
                        }
                    ]
                },
                {
                    "id": 7868,
                    "name": "PositionProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7869,
                            "name": "position",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/position.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PositionProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7869]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/position/position.ts",
                            "line": 8,
                            "character": 30
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7940
                        }
                    ]
                },
                {
                    "id": 7940,
                    "name": "PositionSetProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props for the position of an element.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/system/Position\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 7944,
                            "name": "bottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the vertical position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/bottom.ts",
                                    "line": 11,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BottomProps.bottom",
                                "id": 7909
                            }
                        },
                        {
                            "id": 7945,
                            "name": "left",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/left.ts",
                                    "line": 11,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "LeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "LeftProps.left",
                                "id": 7920
                            }
                        },
                        {
                            "id": 7941,
                            "name": "position",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/position.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PositionProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PositionProps.position",
                                "id": 7869
                            }
                        },
                        {
                            "id": 7943,
                            "name": "right",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/right.ts",
                                    "line": 11,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "RightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "RightProps.right",
                                "id": 7898
                            }
                        },
                        {
                            "id": 7942,
                            "name": "top",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the vertical position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/top.ts",
                                    "line": 11,
                                    "character": 7
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "TopProps.top",
                                "id": 7887
                            }
                        },
                        {
                            "id": 7946,
                            "name": "zIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with larger z-indexes cover those with smaller ones."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/z_index.ts",
                                    "line": 10,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "ZIndexProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "ZIndexProps.zIndex",
                                "id": 7931
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7944, 7945, 7941, 7943, 7942, 7946]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/position/position_set.ts",
                            "line": 16,
                            "character": 33
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "PositionProps",
                            "id": 7868
                        },
                        {
                            "type": "reference",
                            "name": "TopProps",
                            "id": 7886
                        },
                        {
                            "type": "reference",
                            "name": "RightProps",
                            "id": 7897
                        },
                        {
                            "type": "reference",
                            "name": "BottomProps",
                            "id": 7908
                        },
                        {
                            "type": "reference",
                            "name": "LeftProps",
                            "id": 7919
                        },
                        {
                            "type": "reference",
                            "name": "ZIndexProps",
                            "id": 7930
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8177
                        },
                        {
                            "type": "reference",
                            "name": "SelectStyleProps",
                            "id": 9149
                        },
                        {
                            "type": "reference",
                            "name": "InputStyleProps",
                            "id": 10026
                        },
                        {
                            "type": "reference",
                            "name": "CellRendererStyleProps",
                            "id": 10321
                        },
                        {
                            "type": "reference",
                            "name": "IconStyleProps",
                            "id": 10526
                        },
                        {
                            "type": "reference",
                            "name": "LoaderStyleProps",
                            "id": 10688
                        },
                        {
                            "type": "reference",
                            "name": "CollaboratorTokenStyleProps",
                            "id": 11277
                        },
                        {
                            "type": "reference",
                            "name": "ChoiceTokenStyleProps",
                            "id": 11347
                        },
                        {
                            "type": "reference",
                            "name": "ColorPaletteStyleProps",
                            "id": 11417
                        },
                        {
                            "type": "reference",
                            "name": "ProgressBarStyleProps",
                            "id": 11797
                        },
                        {
                            "type": "reference",
                            "name": "ButtonStyleProps",
                            "id": 11879
                        },
                        {
                            "type": "reference",
                            "name": "RecordCardStyleProps",
                            "id": 12042
                        },
                        {
                            "type": "reference",
                            "name": "RecordCardListStyleProps",
                            "id": 12353
                        },
                        {
                            "type": "reference",
                            "name": "SelectButtonsStyleProps",
                            "id": 12597
                        },
                        {
                            "type": "reference",
                            "name": "DialogCloseButtonStyleProps",
                            "id": 12972
                        },
                        {
                            "type": "reference",
                            "name": "SwitchStyleProps",
                            "id": 13563
                        },
                        {
                            "type": "reference",
                            "name": "LinkStyleProps",
                            "id": 13915
                        },
                        {
                            "type": "reference",
                            "name": "FormFieldStyleProps",
                            "id": 14234
                        },
                        {
                            "type": "reference",
                            "name": "TextButtonStyleProps",
                            "id": 15176
                        }
                    ]
                },
                {
                    "id": 7897,
                    "name": "RightProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7898,
                            "name": "right",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/right.ts",
                                    "line": 11,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "RightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7898]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/position/right.ts",
                            "line": 9,
                            "character": 27
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7940
                        }
                    ]
                },
                {
                    "id": 7886,
                    "name": "TopProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7887,
                            "name": "top",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the vertical position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/top.ts",
                                    "line": 11,
                                    "character": 7
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7887]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/position/top.ts",
                            "line": 9,
                            "character": 25
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7940
                        }
                    ]
                },
                {
                    "id": 7930,
                    "name": "ZIndexProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7931,
                            "name": "zIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with larger z-indexes cover those with smaller ones."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/z_index.ts",
                                    "line": 10,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "ZIndexProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7931]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/position/z_index.ts",
                            "line": 8,
                            "character": 28
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7940
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [7908, 7919, 7868, 7940, 7897, 7886, 7930]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/system/position/position.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 7551,
            "name": "@airtable/blocks/ui/system: Responsive props",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/system/utils/types.ts",
            "comment": {},
            "children": [
                {
                    "id": 7552,
                    "name": "ResponsivePropObject",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "An object that specifies the responsive behavior of a {@link ResponsiveProp}.\nFor each viewport size, you may specify the value that will be used for\nthe prop. This is equivalent to defining a media query in CSS."
                    },
                    "typeParameter": [
                        {
                            "id": 7553,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 7557,
                            "name": "largeViewport",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the value of this responsive prop in a large viewport."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/utils/types.ts",
                                    "line": 16,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "T",
                                "id": 7553
                            }
                        },
                        {
                            "id": 7556,
                            "name": "mediumViewport",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the value of this responsive prop in a medium viewport."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/utils/types.ts",
                                    "line": 14,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "T",
                                "id": 7553
                            }
                        },
                        {
                            "id": 7555,
                            "name": "smallViewport",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the value of this responsive prop in a small viewport."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/utils/types.ts",
                                    "line": 12,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "T",
                                "id": 7553
                            }
                        },
                        {
                            "id": 7554,
                            "name": "xsmallViewport",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the value of this responsive prop in an extra small viewport."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/utils/types.ts",
                                    "line": 10,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "T",
                                "id": 7553
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7557, 7556, 7555, 7554]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/utils/types.ts",
                            "line": 8,
                            "character": 37
                        }
                    ]
                },
                {
                    "id": 7561,
                    "name": "OptionalResponsiveProp",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "An optional {@link ResponsiveProp} that can be null or undefined."
                    },
                    "typeParameter": [
                        {
                            "id": 7562,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/utils/types.ts",
                            "line": 32,
                            "character": 34
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "reference",
                                "name": "ResponsiveProp",
                                "id": 7559,
                                "typeArguments": [
                                    {
                                        "type": "typeParameter",
                                        "name": "T"
                                    }
                                ]
                            },
                            {
                                "type": "intrinsic",
                                "name": "undefined"
                            },
                            {
                                "type": "intrinsic",
                                "name": "null"
                            }
                        ]
                    }
                },
                {
                    "id": 7559,
                    "name": "ResponsiveProp",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A React component prop that may vary based on the viewport width.\nYou can either pass in a single value that applies to all viewports\nor a {@link ResponsivePropObject} that specifies responsive behavior."
                    },
                    "typeParameter": [
                        {
                            "id": 7560,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/utils/types.ts",
                            "line": 27,
                            "character": 26
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "typeParameter",
                                "name": "T"
                            },
                            {
                                "type": "reference",
                                "name": "ResponsivePropObject",
                                "id": 7552,
                                "typeArguments": [
                                    {
                                        "type": "typeParameter",
                                        "name": "T"
                                    }
                                ]
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [7552]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [7561, 7559]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/system/utils/types.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 7950,
            "name": "@airtable/blocks/ui/system: Spacing",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/system/spacing/margin.ts",
            "comment": {},
            "children": [
                {
                    "id": 7951,
                    "name": "MarginProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7952,
                            "name": "margin",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on all four sides of an element. It is a shorthand for `marginTop`, `marginRight`, `marginBottom`, and `marginLeft`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 17,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7955,
                            "name": "marginBottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 23,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginBottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7956,
                            "name": "marginLeft",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the left of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 25,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginLeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7954,
                            "name": "marginRight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the right of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 21,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginRightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7953,
                            "name": "marginTop",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 19,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginTopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7957,
                            "name": "marginX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the left and right of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 27,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7958,
                            "name": "marginY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the top and bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 29,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7952, 7955, 7956, 7954, 7953, 7957, 7958]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/spacing/margin.ts",
                            "line": 15,
                            "character": 28
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "SpacingSetProps",
                            "id": 8033
                        },
                        {
                            "type": "reference",
                            "name": "SelectStyleProps",
                            "id": 9149
                        },
                        {
                            "type": "reference",
                            "name": "InputStyleProps",
                            "id": 10026
                        },
                        {
                            "type": "reference",
                            "name": "CellRendererStyleProps",
                            "id": 10321
                        },
                        {
                            "type": "reference",
                            "name": "IconStyleProps",
                            "id": 10526
                        },
                        {
                            "type": "reference",
                            "name": "LoaderStyleProps",
                            "id": 10688
                        },
                        {
                            "type": "reference",
                            "name": "CollaboratorTokenStyleProps",
                            "id": 11277
                        },
                        {
                            "type": "reference",
                            "name": "ChoiceTokenStyleProps",
                            "id": 11347
                        },
                        {
                            "type": "reference",
                            "name": "ColorPaletteStyleProps",
                            "id": 11417
                        },
                        {
                            "type": "reference",
                            "name": "ProgressBarStyleProps",
                            "id": 11797
                        },
                        {
                            "type": "reference",
                            "name": "ButtonStyleProps",
                            "id": 11879
                        },
                        {
                            "type": "reference",
                            "name": "RecordCardStyleProps",
                            "id": 12042
                        },
                        {
                            "type": "reference",
                            "name": "RecordCardListStyleProps",
                            "id": 12353
                        },
                        {
                            "type": "reference",
                            "name": "SelectButtonsStyleProps",
                            "id": 12597
                        }
                    ]
                },
                {
                    "id": 7992,
                    "name": "PaddingProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 7993,
                            "name": "padding",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the padding area on all four sides of an element. It is a shorthand for `paddingTop`, `paddingRight`, `paddingBottom`, and `paddingLeft`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 17,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7996,
                            "name": "paddingBottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the height of the padding area on the bottom side of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 23,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingBottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7997,
                            "name": "paddingLeft",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width of the padding area on the left side of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 25,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingLeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7995,
                            "name": "paddingRight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width of the padding area on the right side of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 21,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingRightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7994,
                            "name": "paddingTop",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the height of the padding area on the top side of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 19,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingTopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7998,
                            "name": "paddingX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width of the padding area on the left and right sides of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 27,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 7999,
                            "name": "paddingY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the height of the padding area on the top and bottom sides of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 29,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [7993, 7996, 7997, 7995, 7994, 7998, 7999]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/spacing/padding.ts",
                            "line": 15,
                            "character": 29
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "SpacingSetProps",
                            "id": 8033
                        }
                    ]
                },
                {
                    "id": 8033,
                    "name": "SpacingSetProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props for the spacing of an element.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/system/Spacing\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 8034,
                            "name": "margin",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on all four sides of an element. It is a shorthand for `marginTop`, `marginRight`, `marginBottom`, and `marginLeft`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 17,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.margin",
                                "id": 7952
                            }
                        },
                        {
                            "id": 8037,
                            "name": "marginBottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 23,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginBottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginBottom",
                                "id": 7955
                            }
                        },
                        {
                            "id": 8038,
                            "name": "marginLeft",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the left of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 25,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginLeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginLeft",
                                "id": 7956
                            }
                        },
                        {
                            "id": 8036,
                            "name": "marginRight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the right of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 21,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginRightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginRight",
                                "id": 7954
                            }
                        },
                        {
                            "id": 8035,
                            "name": "marginTop",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 19,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginTopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginTop",
                                "id": 7953
                            }
                        },
                        {
                            "id": 8039,
                            "name": "marginX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the left and right of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 27,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginX",
                                "id": 7957
                            }
                        },
                        {
                            "id": 8040,
                            "name": "marginY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the top and bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 29,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginY",
                                "id": 7958
                            }
                        },
                        {
                            "id": 8041,
                            "name": "padding",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the padding area on all four sides of an element. It is a shorthand for `paddingTop`, `paddingRight`, `paddingBottom`, and `paddingLeft`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 17,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.padding",
                                "id": 7993
                            }
                        },
                        {
                            "id": 8044,
                            "name": "paddingBottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the height of the padding area on the bottom side of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 23,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingBottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.paddingBottom",
                                "id": 7996
                            }
                        },
                        {
                            "id": 8045,
                            "name": "paddingLeft",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width of the padding area on the left side of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 25,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingLeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.paddingLeft",
                                "id": 7997
                            }
                        },
                        {
                            "id": 8043,
                            "name": "paddingRight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width of the padding area on the right side of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 21,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingRightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.paddingRight",
                                "id": 7995
                            }
                        },
                        {
                            "id": 8042,
                            "name": "paddingTop",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the height of the padding area on the top side of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 19,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingTopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.paddingTop",
                                "id": 7994
                            }
                        },
                        {
                            "id": 8046,
                            "name": "paddingX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the width of the padding area on the left and right sides of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 27,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.paddingX",
                                "id": 7998
                            }
                        },
                        {
                            "id": 8047,
                            "name": "paddingY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the height of the padding area on the top and bottom sides of an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/padding.ts",
                                    "line": 29,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PaddingProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PaddingProps.paddingY",
                                "id": 7999
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                8034,
                                8037,
                                8038,
                                8036,
                                8035,
                                8039,
                                8040,
                                8041,
                                8044,
                                8045,
                                8043,
                                8042,
                                8046,
                                8047
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/spacing/spacing_set.ts",
                            "line": 12,
                            "character": 32
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7951
                        },
                        {
                            "type": "reference",
                            "name": "PaddingProps",
                            "id": 7992
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8177
                        },
                        {
                            "type": "reference",
                            "name": "DialogCloseButtonStyleProps",
                            "id": 12972
                        },
                        {
                            "type": "reference",
                            "name": "DialogStyleProps",
                            "id": 13114
                        },
                        {
                            "type": "reference",
                            "name": "SwitchStyleProps",
                            "id": 13563
                        },
                        {
                            "type": "reference",
                            "name": "LinkStyleProps",
                            "id": 13915
                        },
                        {
                            "type": "reference",
                            "name": "FormFieldStyleProps",
                            "id": 14234
                        },
                        {
                            "type": "reference",
                            "name": "TextButtonStyleProps",
                            "id": 15176
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [7951, 7992, 8033]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/system/spacing/margin.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 8051,
            "name": "@airtable/blocks/ui/system: Typography",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/system/typography/font_family.ts",
            "comment": {},
            "children": [
                {
                    "id": 8052,
                    "name": "FontFamilyProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 8053,
                            "name": "fontFamily",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies a prioritized list of one or more font family names and/or generic family names for the selected element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/font_family.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FontFamilyProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8053]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/typography/font_family.ts",
                            "line": 8,
                            "character": 32
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TypographySetProps",
                            "id": 8142
                        }
                    ]
                },
                {
                    "id": 8062,
                    "name": "FontSizeProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 8063,
                            "name": "fontSize",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the size of the font. This property is also used to compute the size of `em`, `ex`, and other relative length units."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/font_size.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FontSizeProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8063]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/typography/font_size.ts",
                            "line": 8,
                            "character": 30
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TypographySetProps",
                            "id": 8142
                        }
                    ]
                },
                {
                    "id": 8072,
                    "name": "FontStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 8073,
                            "name": "fontStyle",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets whether a font should be styled with a normal, italic, or oblique face."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/font_style.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FontStyleProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8073]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/typography/font_style.ts",
                            "line": 8,
                            "character": 31
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TypographySetProps",
                            "id": 8142
                        }
                    ]
                },
                {
                    "id": 8080,
                    "name": "FontWeightProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 8081,
                            "name": "fontWeight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the weight (or boldness) of the font."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/font_weight.ts",
                                    "line": 11,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "FontWeightProperty"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8081]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/typography/font_weight.ts",
                            "line": 8,
                            "character": 32
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TypographySetProps",
                            "id": 8142
                        },
                        {
                            "type": "reference",
                            "name": "LinkStyleProps",
                            "id": 13915
                        }
                    ]
                },
                {
                    "id": 8090,
                    "name": "LetterSpacingProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 8091,
                            "name": "letterSpacing",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the spacing behavior between text characters."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/letter_spacing.ts",
                                    "line": 10,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "LetterSpacingProperty",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Length"
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8091]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/typography/letter_spacing.ts",
                            "line": 8,
                            "character": 35
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TypographySetProps",
                            "id": 8142
                        }
                    ]
                },
                {
                    "id": 8100,
                    "name": "LineHeightProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 8101,
                            "name": "lineHeight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the amount of space used for lines, such as in text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/line_height.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "LineHeightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8101]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/typography/line_height.ts",
                            "line": 8,
                            "character": 32
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TypographySetProps",
                            "id": 8142
                        }
                    ]
                },
                {
                    "id": 8108,
                    "name": "TextAlignProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 8109,
                            "name": "textAlign",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the horizontal alignment of the text."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/text_align.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TextAlignProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8109]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/typography/text_align.ts",
                            "line": 8,
                            "character": 31
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TypographySetProps",
                            "id": 8142
                        }
                    ]
                },
                {
                    "id": 8116,
                    "name": "TextColorProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 8117,
                            "name": "textColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the foreground color value of an element's text and text decorations, and sets the `currentcolor` value.",
                                "tags": [
                                    {
                                        "tag": "see",
                                        "text": "{@link colors}\n"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/text_color.ts",
                                    "line": 14,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "ColorProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8117]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/typography/text_color.ts",
                            "line": 8,
                            "character": 31
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TypographySetProps",
                            "id": 8142
                        }
                    ]
                },
                {
                    "id": 8126,
                    "name": "TextDecorationProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 8127,
                            "name": "textDecoration",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the appearance of decorative lines on text."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/text_decoration.ts",
                                    "line": 12,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TextDecorationProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8127]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/typography/text_decoration.ts",
                            "line": 8,
                            "character": 36
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TypographySetProps",
                            "id": 8142
                        }
                    ]
                },
                {
                    "id": 8134,
                    "name": "TextTransformProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 8135,
                            "name": "textTransform",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/text_transform.ts",
                                    "line": 10,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TextTransformProperty"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8135]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/typography/text_transform.ts",
                            "line": 8,
                            "character": 35
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TypographySetProps",
                            "id": 8142
                        }
                    ]
                },
                {
                    "id": 8142,
                    "name": "TypographySetProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props for the typography of an element.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/system/Typography\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 8143,
                            "name": "fontFamily",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies a prioritized list of one or more font family names and/or generic family names for the selected element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/font_family.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FontFamilyProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FontFamilyProps.fontFamily",
                                "id": 8053
                            }
                        },
                        {
                            "id": 8144,
                            "name": "fontSize",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the size of the font. This property is also used to compute the size of `em`, `ex`, and other relative length units."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/font_size.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FontSizeProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FontSizeProps.fontSize",
                                "id": 8063
                            }
                        },
                        {
                            "id": 8145,
                            "name": "fontStyle",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets whether a font should be styled with a normal, italic, or oblique face."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/font_style.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FontStyleProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FontStyleProps.fontStyle",
                                "id": 8073
                            }
                        },
                        {
                            "id": 8146,
                            "name": "fontWeight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the weight (or boldness) of the font."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/font_weight.ts",
                                    "line": 11,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "FontWeightProperty"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FontWeightProps.fontWeight",
                                "id": 8081
                            }
                        },
                        {
                            "id": 8147,
                            "name": "letterSpacing",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the spacing behavior between text characters."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/letter_spacing.ts",
                                    "line": 10,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "LetterSpacingProperty",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "Length"
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "LetterSpacingProps.letterSpacing",
                                "id": 8091
                            }
                        },
                        {
                            "id": 8148,
                            "name": "lineHeight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the amount of space used for lines, such as in text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/line_height.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "LineHeightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "LineHeightProps.lineHeight",
                                "id": 8101
                            }
                        },
                        {
                            "id": 8149,
                            "name": "textAlign",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the horizontal alignment of the text."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/text_align.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TextAlignProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "TextAlignProps.textAlign",
                                "id": 8109
                            }
                        },
                        {
                            "id": 8150,
                            "name": "textColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the foreground color value of an element's text and text decorations, and sets the `currentcolor` value.",
                                "tags": [
                                    {
                                        "tag": "see",
                                        "text": "{@link colors}\n"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/text_color.ts",
                                    "line": 14,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "ColorProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "TextColorProps.textColor",
                                "id": 8117
                            }
                        },
                        {
                            "id": 8151,
                            "name": "textDecoration",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the appearance of decorative lines on text."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/text_decoration.ts",
                                    "line": 12,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TextDecorationProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "TextDecorationProps.textDecoration",
                                "id": 8127
                            }
                        },
                        {
                            "id": 8152,
                            "name": "textTransform",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/typography/text_transform.ts",
                                    "line": 10,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TextTransformProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "TextTransformProps.textTransform",
                                "id": 8135
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [8143, 8144, 8145, 8146, 8147, 8148, 8149, 8150, 8151, 8152]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/system/typography/typography_set.ts",
                            "line": 20,
                            "character": 35
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "FontFamilyProps",
                            "id": 8052
                        },
                        {
                            "type": "reference",
                            "name": "FontSizeProps",
                            "id": 8062
                        },
                        {
                            "type": "reference",
                            "name": "FontStyleProps",
                            "id": 8072
                        },
                        {
                            "type": "reference",
                            "name": "FontWeightProps",
                            "id": 8080
                        },
                        {
                            "type": "reference",
                            "name": "LetterSpacingProps",
                            "id": 8090
                        },
                        {
                            "type": "reference",
                            "name": "LineHeightProps",
                            "id": 8100
                        },
                        {
                            "type": "reference",
                            "name": "TextAlignProps",
                            "id": 8108
                        },
                        {
                            "type": "reference",
                            "name": "TextColorProps",
                            "id": 8116
                        },
                        {
                            "type": "reference",
                            "name": "TextDecorationProps",
                            "id": 8126
                        },
                        {
                            "type": "reference",
                            "name": "TextTransformProps",
                            "id": 8134
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8177
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [8052, 8062, 8072, 8080, 8090, 8100, 8108, 8116, 8126, 8134, 8142]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/system/typography/font_family.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 11007,
            "name": "@airtable/blocks/ui/types: Aria props",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/types/aria_props.ts",
            "comment": {},
            "children": [
                {
                    "id": 11008,
                    "name": "AriaProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 11012,
                            "name": "aria-controls",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Identifies the element (or elements) whose contents or presence are controlled by the current element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/types/aria_props.ts",
                                    "line": 14,
                                    "character": 21
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11011,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Identifies the element (or elements) that describes the current object."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/types/aria_props.ts",
                                    "line": 12,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11013,
                            "name": "aria-expanded",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/types/aria_props.ts",
                                    "line": 16,
                                    "character": 21
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "false"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11014,
                            "name": "aria-haspopup",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/types/aria_props.ts",
                                    "line": 18,
                                    "character": 21
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "grid"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "dialog"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "menu"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "listbox"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "false"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "true"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "tree"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11015,
                            "name": "aria-hidden",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Indicates whether the element is exposed to an accessibility API."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/types/aria_props.ts",
                                    "line": 20,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "false"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11009,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Defines a string value that labels the current element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/types/aria_props.ts",
                                    "line": 8,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11010,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Identifies the element (or elements) that labels the current object."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/types/aria_props.ts",
                                    "line": 10,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11016,
                            "name": "aria-live",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/types/aria_props.ts",
                                    "line": 22,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "off"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "assertive"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "polite"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [11012, 11011, 11013, 11014, 11015, 11009, 11010, 11016]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/types/aria_props.ts",
                            "line": 6,
                            "character": 26
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "BoxProps",
                            "id": 11035
                        },
                        {
                            "type": "reference",
                            "name": "ButtonProps",
                            "id": 11904
                        },
                        {
                            "type": "reference",
                            "name": "TextProps",
                            "id": 13811
                        },
                        {
                            "type": "reference",
                            "name": "LinkProps",
                            "id": 13948
                        },
                        {
                            "type": "reference",
                            "name": "HeadingProps",
                            "id": 14034
                        },
                        {
                            "type": "reference",
                            "name": "LabelProps",
                            "id": 14144
                        },
                        {
                            "type": "reference",
                            "name": "TextButtonProps",
                            "id": 15208
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [11008]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/types/aria_props.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 11034,
            "name": "@airtable/blocks/ui: Box",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/box.tsx",
            "comment": {},
            "children": [
                {
                    "id": 11035,
                    "name": "BoxProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props for the Box component. Also accepts:\n* {@link AllStylesProps}\n* {@link AriaProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Box"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 11119,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 11036,
                            "name": "as",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The element that is rendered. Defaults to `div`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/box.tsx",
                                    "line": 21,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "stringLiteral",
                                        "value": "div"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "span"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "section"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "main"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "nav"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "header"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "footer"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "aside"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "article"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "address"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "hgroup"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "blockquote"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "figure"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "figcaption"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "ol"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "ul"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "li"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "pre"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11037,
                            "name": "children",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The contents of the box."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/box.tsx",
                                    "line": 41,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "React.ReactNode"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11041,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/box.tsx",
                                    "line": 49,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11043,
                            "name": "dataAttributes",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Data attributes that are spread onto the element, e.g. `dataAttributes={{'data-*': '...'}}`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/box.tsx",
                                    "line": 53,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "DataAttributesProp"
                            }
                        },
                        {
                            "id": 11040,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/box.tsx",
                                    "line": 47,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11039,
                            "name": "role",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `role` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/box.tsx",
                                    "line": 45,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11042,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/box.tsx",
                                    "line": 51,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 11038,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabIndex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/box.tsx",
                                    "line": 43,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [11036, 11037, 11041, 11043, 11040, 11039, 11042, 11038]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/box.tsx",
                            "line": 19,
                            "character": 25
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8177
                        },
                        {
                            "type": "reference",
                            "name": "AriaProps",
                            "id": 11008
                        },
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps"
                        }
                    ]
                },
                {
                    "id": 11133,
                    "name": "Box",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A box component for creating layouts.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {Box} from '@airtable/blocks/ui';\nimport React from 'react';\n\nfunction BoxExample() {\n    return (\n        <Box display='flex' alignItems='center' justifyContent='center' padding={3} margin={3}>\n            Hello world\n        </Box>\n    );\n}\n```"
                            },
                            {
                                "tag": "component",
                                "text": ""
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/Box\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 11134,
                            "name": "Box",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A box component for creating layouts."
                            },
                            "parameters": [
                                {
                                    "id": 11135,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "BoxProps",
                                        "id": 11035
                                    }
                                },
                                {
                                    "id": 11136,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/box.tsx",
                            "line": 75,
                            "character": 9
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [11035]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [11133]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/box.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 11878,
            "name": "@airtable/blocks/ui: Button",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/button.tsx",
            "comment": {},
            "children": [
                {
                    "id": 11904,
                    "name": "ButtonProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link Button} component. Also accepts:\n* {@link AriaProps}\n* {@link ButtonStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Button\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 11919,
                            "name": "aria-selected",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-selected` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 139,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11912,
                            "name": "children",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The contents of the button."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 129,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "React.ReactNode"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11917,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra `className`s to apply to the button, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 135,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11910,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Indicates whether or not the user can interact with the button."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 123,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11907,
                            "name": "icon",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The name of the icon or a React node. For more details, see the [list of supported icons](/packages/sdk/docs/icons.md)."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 117,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "IconName"
                                    },
                                    {
                                        "type": "reference",
                                        "name": "ReactElement"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11909,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 121,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11913,
                            "name": "onClick",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Click event handler. Also handles Space and Enter keypress events."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 133,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 11914,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 11915,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 11916,
                                                            "name": "e",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {
                                                                "isOptional": true
                                                            },
                                                            "type": {
                                                                "type": "reference",
                                                                "name": "React.MouseEvent",
                                                                "typeArguments": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "HTMLButtonElement"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "overwrites": {
                                "type": "reference",
                                "name": "TooltipAnchorProps.onClick"
                            }
                        },
                        {
                            "id": 11905,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the button. Defaults to `default`. Can be a responsive prop object."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 113,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9130
                            }
                        },
                        {
                            "id": 11918,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra styles to apply to the button."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 137,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 11911,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Indicates if the button can be focused and if/where it participates in sequential keyboard navigation."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 125,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11908,
                            "name": "type",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The type of the button. Defaults to `button`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 119,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "stringLiteral",
                                        "value": "button"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "submit"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "reset"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11906,
                            "name": "variant",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The variant of the button. Defaults to `default`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 115,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ButtonVariant",
                                "id": 11964
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                11919,
                                11912,
                                11917,
                                11910,
                                11907,
                                11909,
                                11913,
                                11905,
                                11918,
                                11911,
                                11908,
                                11906
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/button.tsx",
                            "line": 111,
                            "character": 21
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AriaProps",
                            "id": 11008
                        },
                        {
                            "type": "reference",
                            "name": "ButtonStyleProps",
                            "id": 11879
                        },
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "HTMLButtonElement"
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 11879,
                    "name": "ButtonStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Style props for the {@link Button} component. Also accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link WidthProps}"
                    },
                    "children": [
                        {
                            "id": 11880,
                            "name": "display",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/button.tsx",
                                    "line": 59,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "stringLiteral",
                                                "value": "inline-flex"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "flex"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "none"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [11880]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/button.tsx",
                            "line": 51,
                            "character": 26
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "MaxWidthProps",
                            "id": 7690
                        },
                        {
                            "type": "reference",
                            "name": "MinWidthProps",
                            "id": 7710
                        },
                        {
                            "type": "reference",
                            "name": "WidthProps",
                            "id": 7720
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7856
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7940
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7951
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "ButtonProps",
                            "id": 11904
                        }
                    ]
                },
                {
                    "id": 11964,
                    "name": "ButtonVariant",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Variants for the {@link Button} component:",
                        "text": "• **default**\n\nGray button for toolbars and other generic actions.\n\n• **primary**\n\nBlue button used for primary actions and CTAs. There should only be one primary button present at a time. Often used in {@link Dialog} and bottom bars.\n\n• **secondary**\n\nTransparent button that pairs with the primary button. This is typically used for cancel or back buttons.\n\n• **danger**\n\nRed button that replaces primary buttons for dangerous or otherwise difficult-to-reverse actions like record deletion.\n"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/button.tsx",
                            "line": 93,
                            "character": 18
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "default"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "primary"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "secondary"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "danger"
                            }
                        ]
                    }
                },
                {
                    "id": 11971,
                    "name": "Button",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "Clickable button component.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {Button} from '@airtable/blocks/ui';\n\nconst button = (\n    <Button\n        onClick={() => alert('Clicked!')}\n        disabled={false}\n        variant=\"primary\"\n    >\n        Click here!\n    </Button>\n);\n```"
                            },
                            {
                                "tag": "component",
                                "text": ""
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/Button\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 11972,
                            "name": "Button",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Clickable button component."
                            },
                            "parameters": [
                                {
                                    "id": 11973,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "ButtonProps",
                                        "id": 11904
                                    }
                                },
                                {
                                    "id": 11974,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLButtonElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/button.tsx",
                            "line": 162,
                            "character": 12
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [11904, 11879]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [11964]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [11971]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/button.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 10320,
            "name": "@airtable/blocks/ui: CellRenderer",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/cell_renderer.tsx",
            "comment": {},
            "children": [
                {
                    "id": 10392,
                    "name": "CellRenderer",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Displays the contents of a cell.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport React, {useState} from 'react';\nimport {Box, CellRenderer, FieldPicker, useBase, useRecords} from '@airtable/blocks/ui';\n\nexport default function CellRendererExample(props) {\n   const [field, setField] = useState(null);\n   const base = useBase();\n   const table = base.tables[0];\n   const queryResult = table.selectRecords();\n   const records = useRecords(queryResult);\n   return (\n       <Box display=\"flex\" flexDirection=\"column\">\n           <FieldPicker table={table} field={field} onChange={setField} />\n           {field && (\n               <CellRenderer\n                   className=\"user-defined-class\"\n                   field={field}\n                   record={records[0]}\n                   margin={3}\n               />\n           )}\n       </Box>\n   );\n}\n```"
                            },
                            {
                                "tag": "component",
                                "text": ""
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/CellRenderer\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 10415,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 10416,
                            "name": "SS",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 10457,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/cell_renderer.tsx",
                            "line": 134,
                            "character": 25
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Component",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "CellRendererProps",
                                    "id": 10346
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 10346,
                    "name": "CellRendererProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link CellRenderer} component. Also accepts:\n* {@link CellRendererStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/CellRenderer"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 10353,
                            "name": "cellClassName",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the cell itself, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/cell_renderer.tsx",
                                    "line": 97,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10354,
                            "name": "cellStyle",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the cell itself."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/cell_renderer.tsx",
                                    "line": 99,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 10348,
                            "name": "cellValue",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The cell value to render. Either `record` or `cellValue` must be provided to the CellRenderer. If both are provided, `record` will be used."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/cell_renderer.tsx",
                                    "line": 85,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "unknown"
                            }
                        },
                        {
                            "id": 10351,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the cell renderer container, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/cell_renderer.tsx",
                                    "line": 91,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10349,
                            "name": "field",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The {@link Field} for a given {@link Record} being rendered as a cell."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/cell_renderer.tsx",
                                    "line": 87,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Field",
                                "id": 1927
                            }
                        },
                        {
                            "id": 10347,
                            "name": "record",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The {@link Record} from which to render a cell. Either `record` or `cellValue` must be provided to the CellRenderer. If both are provided, `record` will be used."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/cell_renderer.tsx",
                                    "line": 83,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Record",
                                        "id": 1779
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10350,
                            "name": "shouldWrap",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Whether to wrap cell contents. Defaults to true."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/cell_renderer.tsx",
                                    "line": 89,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10352,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the cell renderer container."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/cell_renderer.tsx",
                                    "line": 93,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [10353, 10354, 10348, 10351, 10349, 10347, 10350, 10352]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/cell_renderer.tsx",
                            "line": 81,
                            "character": 27
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "CellRendererStyleProps",
                            "id": 10321
                        },
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "HTMLDivElement"
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 10321,
                    "name": "CellRendererStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Style props for the {@link CellRenderer} component. Also accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link WidthProps}"
                    },
                    "children": [
                        {
                            "id": 10322,
                            "name": "display",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/cell_renderer.tsx",
                                    "line": 58,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "stringLiteral",
                                                "value": "block"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "inline"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "inline-block"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [10322]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/cell_renderer.tsx",
                            "line": 50,
                            "character": 32
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7856
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7951
                        },
                        {
                            "type": "reference",
                            "name": "MaxWidthProps",
                            "id": 7690
                        },
                        {
                            "type": "reference",
                            "name": "MinWidthProps",
                            "id": 7710
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7940
                        },
                        {
                            "type": "reference",
                            "name": "WidthProps",
                            "id": 7720
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "CellRendererProps",
                            "id": 10346
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [10392]
                },
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [10346, 10321]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/cell_renderer.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 11346,
            "name": "@airtable/blocks/ui: ChoiceToken",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/choice_token.tsx",
            "comment": {},
            "children": [
                {
                    "id": 11372,
                    "name": "ChoiceTokenProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link ChoiceToken} component. Also accepts:\n* {@link ChoiceTokenStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/ChoiceToken"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 11396,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 11373,
                            "name": "choice",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "An object representing a select option. You should not create these objects from scratch, but should instead grab them from base data."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/choice_token.tsx",
                                    "line": 63,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "SelectOption",
                                "id": 11368
                            }
                        },
                        {
                            "id": 11375,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the choice token."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/choice_token.tsx",
                                    "line": 67,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11374,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the choice token."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/choice_token.tsx",
                                    "line": 65,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [11373, 11375, 11374]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/choice_token.tsx",
                            "line": 61,
                            "character": 26
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "ChoiceTokenStyleProps",
                            "id": 11347
                        },
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps"
                        }
                    ]
                },
                {
                    "id": 11347,
                    "name": "ChoiceTokenStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Style props for the {@link ChoiceToken} component. Accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link PositionSetProps}"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/choice_token.tsx",
                            "line": 32,
                            "character": 31
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7856
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7940
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7951
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "ChoiceTokenProps",
                            "id": 11372
                        }
                    ]
                },
                {
                    "id": 11368,
                    "name": "SelectOption",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "An option from a select field. You should not create these objects from scratch, but should instead grab them from base data."
                    },
                    "children": [
                        {
                            "id": 11371,
                            "name": "color",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The color of the select option."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/choice_token.tsx",
                                    "line": 51,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Color",
                                "id": 556
                            }
                        },
                        {
                            "id": 11369,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The ID of the select option."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/choice_token.tsx",
                                    "line": 47,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        },
                        {
                            "id": 11370,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The name of the select option."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/choice_token.tsx",
                                    "line": 49,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [11371, 11369, 11370]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/choice_token.tsx",
                            "line": 45,
                            "character": 22
                        }
                    ]
                },
                {
                    "id": 11413,
                    "name": "ChoiceToken",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true,
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A component that shows a single choice in a small token, to be displayed inline or in a list of choices.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {ChoiceToken} from '@airtable/blocks/ui';\nimport React from 'react';\n\nfunction ChoicesForSelectField({selectField}) {\n    const choiceNodes = selectField.options.choices.map(choice => (\n        <ChoiceToken\n            key={choice.id}\n            choice={choice}\n        />\n    ));\n\n    return (\n        <React.Fragment>\n            Here are all of your choices:\n            {choiceNodes}\n        </React.Fragment>\n    );\n}\n```"
                            },
                            {
                                "tag": "component",
                                "text": ""
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/ChoiceToken\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 11414,
                            "name": "ChoiceToken",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A component that shows a single choice in a small token, to be displayed inline or in a list of choices."
                            },
                            "parameters": [
                                {
                                    "id": 11415,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "ChoiceTokenProps",
                                        "id": 11372
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/choice_token.tsx",
                            "line": 97,
                            "character": 17
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [11372, 11347, 11368]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [11413]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/choice_token.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 11276,
            "name": "@airtable/blocks/ui: CollaboratorToken",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/collaborator_token.tsx",
            "comment": {},
            "children": [
                {
                    "id": 11298,
                    "name": "CollaboratorTokenProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link CollaboratorToken} component. Also accepts:\n* {@link CollaboratorTokenStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/CollaboratorToken\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 11322,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 11300,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the collaborator token."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/collaborator_token.tsx",
                                    "line": 56,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11299,
                            "name": "collaborator",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "An object representing a collaborator. You should not create these objects from scratch, but should instead grab them from base data."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/collaborator_token.tsx",
                                    "line": 54,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Partial",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "CollaboratorData",
                                        "id": 693
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11301,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the collaborator token."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/collaborator_token.tsx",
                                    "line": 58,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [11300, 11299, 11301]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/collaborator_token.tsx",
                            "line": 52,
                            "character": 32
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "CollaboratorTokenStyleProps",
                            "id": 11277
                        },
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps"
                        }
                    ]
                },
                {
                    "id": 11277,
                    "name": "CollaboratorTokenStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Style props for the {@link CollaboratorToken} component. Accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link PositionSetProps}"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/collaborator_token.tsx",
                            "line": 35,
                            "character": 37
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7856
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7940
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7951
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "CollaboratorTokenProps",
                            "id": 11298
                        }
                    ]
                },
                {
                    "id": 11339,
                    "name": "CollaboratorToken",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true,
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A component that shows a single collaborator in a small token, to be displayed inline or in a list of choices.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {CollaboratorToken, useSession} from '@airtable/blocks/ui';\n\nfunction CurrentUserGreeter() {\n    const session = useSession();\n    return (\n        <React.Fragment>\n            Hello,\n            <CollaboratorToken collaborator={session.currentUser} />!\n        </React.Fragment>\n    );\n}\n```"
                            },
                            {
                                "tag": "component",
                                "text": ""
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/CollaboratorToken\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 11340,
                            "name": "CollaboratorToken",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A component that shows a single collaborator in a small token, to be displayed inline or in a list of choices."
                            },
                            "parameters": [
                                {
                                    "id": 11341,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "CollaboratorTokenProps",
                                        "id": 11298
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/collaborator_token.tsx",
                            "line": 81,
                            "character": 23
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [11298, 11277]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [11339]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/collaborator_token.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 11416,
            "name": "@airtable/blocks/ui: ColorPalette",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/color_palette.tsx",
            "comment": {},
            "children": [
                {
                    "id": 11538,
                    "name": "ColorPalette",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A color selection component. Accepts a list of `allowedColors` to be displayed\nas selectable color squares.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {ColorPalette, colors} from '@airtable/blocks/ui';\nimport React, {useState} from 'react';\n\nfunction DisplayOptions() {\n    const allowedColors = [colors.GREEN, colors.BLUE, colors.RED];\n    const [selectedColor, setSelectedColor] = useState(colors.GREEN);\n    return (\n        <ColorPalette\n            allowedColors={allowedColors}\n            onChange={setSelectedColor}\n        />\n    );\n}\n```"
                            },
                            {
                                "tag": "component",
                                "text": ""
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/ColorPalette\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 11582,
                            "name": "SS",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/color_palette.tsx",
                            "line": 139,
                            "character": 25
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Component",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "ColorPaletteProps",
                                    "id": 11488
                                },
                                {
                                    "type": "reference",
                                    "name": "ColorPaletteState"
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 11710,
                    "name": "ColorPaletteSynced",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A wrapper around the {@link ColorPalette} component that syncs with {@link GlobalConfig}.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {ColorPaletteSynced, colors} from '@airtable/blocks/ui';\nimport {globalConfig} from '@airtable/blocks';\nimport React from 'react';\n\nfunction DisplayOptions() {\n    const allowedColors = [colors.GREEN, colors.BLUE, colors.RED]\n    return (\n        <ColorPaletteSynced\n            allowedColors={allowedColors}\n            globalConfigKey=\"displayColor\"\n        />\n    );\n}\n```"
                            },
                            {
                                "tag": "component",
                                "text": ""
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/ColorPaletteSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/ColorPalette\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 11715,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 11716,
                            "name": "SS",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 11761,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/color_palette_synced.tsx",
                            "line": 48,
                            "character": 24
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Component",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "ColorPaletteSyncedProps",
                                    "id": 11662
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 11488,
                    "name": "ColorPaletteProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link ColorPalette} component. Also accepts:\n* {@link ColorPaletteStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/ColorPalette\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 11522,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 11490,
                            "name": "allowedColors",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The list of {@link Color|colors} to display in the color palette."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 77,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedColorPaletteProps.allowedColors",
                                "id": 11442
                            }
                        },
                        {
                            "id": 11496,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the color palette, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 83,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedColorPaletteProps.className",
                                "id": 11448
                            }
                        },
                        {
                            "id": 11489,
                            "name": "color",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The current selected {@link Color} option."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 108,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11498,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the color palette will not allow color selection."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 87,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedColorPaletteProps.disabled",
                                "id": 11450
                            }
                        },
                        {
                            "id": 11491,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected color changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 79,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 11492,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 11493,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 11494,
                                                            "name": "arg1",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "string"
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedColorPaletteProps.onChange",
                                "id": 11443
                            }
                        },
                        {
                            "id": 11495,
                            "name": "squareMargin",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The margin between color squares in the color palette."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 81,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedColorPaletteProps.squareMargin",
                                "id": 11447
                            }
                        },
                        {
                            "id": 11497,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the color palette."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 85,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedColorPaletteProps.style",
                                "id": 11449
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [11490, 11496, 11489, 11498, 11491, 11495, 11497]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/color_palette.tsx",
                            "line": 106,
                            "character": 27
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedColorPaletteProps",
                            "id": 11441
                        }
                    ]
                },
                {
                    "id": 11417,
                    "name": "ColorPaletteStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props shared between the {@link ColorPalette} and {@link ColorPaletteSynced} components. Accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link WidthProps}"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/color_palette.tsx",
                            "line": 53,
                            "character": 39
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "MaxWidthProps",
                            "id": 7690
                        },
                        {
                            "type": "reference",
                            "name": "MinWidthProps",
                            "id": 7710
                        },
                        {
                            "type": "reference",
                            "name": "WidthProps",
                            "id": 7720
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7856
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7940
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7951
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "SharedColorPaletteProps",
                            "id": 11441
                        }
                    ]
                },
                {
                    "id": 11662,
                    "name": "ColorPaletteSyncedProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link ColorPaletteSynced} component. Also accepts:\n* {@link ColorPaletteStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/ColorPaletteSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/ColorPalette\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 11696,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 11664,
                            "name": "allowedColors",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The list of {@link Color|colors} to display in the color palette."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 77,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedColorPaletteProps.allowedColors",
                                "id": 11442
                            }
                        },
                        {
                            "id": 11670,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the color palette, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 83,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedColorPaletteProps.className",
                                "id": 11448
                            }
                        },
                        {
                            "id": 11672,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the color palette will not allow color selection."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 87,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedColorPaletteProps.disabled",
                                "id": 11450
                            }
                        },
                        {
                            "id": 11663,
                            "name": "globalConfigKey",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "A string key or array key path in {@link GlobalConfig}. The selected color will always reflect the value stored in {@link GlobalConfig} for this key. Selecting a new color will update {@link GlobalConfig}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette_synced.tsx",
                                    "line": 22,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "GlobalConfigKey",
                                "id": 14893
                            }
                        },
                        {
                            "id": 11665,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected color changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 79,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 11666,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 11667,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 11668,
                                                            "name": "arg1",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "string"
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedColorPaletteProps.onChange",
                                "id": 11443
                            }
                        },
                        {
                            "id": 11669,
                            "name": "squareMargin",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The margin between color squares in the color palette."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 81,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedColorPaletteProps.squareMargin",
                                "id": 11447
                            }
                        },
                        {
                            "id": 11671,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the color palette."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 85,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedColorPaletteProps.style",
                                "id": 11449
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [11664, 11670, 11672, 11663, 11665, 11669, 11671]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/color_palette_synced.tsx",
                            "line": 20,
                            "character": 33
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedColorPaletteProps",
                            "id": 11441
                        }
                    ]
                },
                {
                    "id": 11441,
                    "name": "SharedColorPaletteProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props shared between the {@link ColorPalette} and {@link ColorPaletteSynced} components."
                    },
                    "typeParameter": [
                        {
                            "id": 11474,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 11442,
                            "name": "allowedColors",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The list of {@link Color|colors} to display in the color palette."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 77,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11448,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the color palette, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 83,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11450,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the color palette will not allow color selection."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 87,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11443,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected color changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 79,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 11444,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 11445,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 11446,
                                                            "name": "arg1",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "string"
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11447,
                            "name": "squareMargin",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The margin between color squares in the color palette."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 81,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11449,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the color palette."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/color_palette.tsx",
                                    "line": 85,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [11442, 11448, 11450, 11443, 11447, 11449]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/color_palette.tsx",
                            "line": 75,
                            "character": 40
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "ColorPaletteStyleProps",
                            "id": 11417
                        },
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps"
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "ColorPaletteProps",
                            "id": 11488
                        },
                        {
                            "type": "reference",
                            "name": "ColorPaletteSyncedProps",
                            "id": 11662
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [11538, 11710]
                },
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [11488, 11417, 11662, 11441]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/color_palette.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 12953,
            "name": "@airtable/blocks/ui: Dialog",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/dialog_close_button.tsx",
            "comment": {},
            "children": [
                {
                    "id": 13329,
                    "name": "ConfirmationDialog",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A styled modal dialog component that prompts the user to confirm or cancel an action.\nBy default, this component will focus the \"Confirm\" button on mount, so that pressing\nthe Enter key will confirm the action.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {Button, Dialog, ConfirmationDialog} from '@airtable/blocks/ui';\nimport React, {Fragment, useState} from 'react';\n\nfunction Block() {\n    const [isDialogOpen, setIsDialogOpen] = useState(false);\n    return (\n        <Fragment>\n            <Button\n                variant=\"primary\"\n                onClick={() => setIsDialogOpen(true)}\n            >\n                Open dialog\n            </Button>\n            {isDialogOpen && (\n                <ConfirmationDialog\n                    title=\"Are you sure?\"\n                    body=\"This action can't be undone.\"\n                    onConfirm={() => {\n                        alert('Confirmed.');\n                        setIsDialogOpen(false);\n                    }}\n                    onCancel={() => setIsDialogOpen(false)}\n                />\n            )}\n        </Fragment>\n    );\n}\n```\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 13358,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 13359,
                            "name": "SS",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 13402,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/confirmation_dialog.tsx",
                            "line": 77,
                            "character": 24
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Component",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "ConfirmationDialogProps",
                                    "id": 13286
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 13178,
                    "name": "Dialog",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A styled modal dialog component.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {Button, Dialog} from '@airtable/blocks/ui';\nimport React, {Fragment, useState} from 'react';\n\nfunction Block() {\n    const [isDialogOpen, setIsDialogOpen] = useState(false);\n    return (\n        <Fragment>\n            <Button\n                variant=\"primary\"\n                onClick={() => setIsDialogOpen(true)}\n            >\n                Open dialog\n            </Button>\n            {isDialogOpen && (\n                <Dialog onClose={() => setIsDialogOpen(false)}>\n                    <Fragment>\n                        <Dialog.CloseButton />\n                        <h1\n                            style={{\n                                marginBottom: 8,\n                                fontSize: 20,\n                                fontWeight: 500,\n                            }}\n                        >\n                            Dialog\n                        </h1>\n                        <p>This is the dialog content.</p>\n                    </Fragment>\n                </Dialog>\n            )}\n        </Fragment>\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/Dialog"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 13213,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 13214,
                            "name": "SS",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 13255,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/dialog.tsx",
                            "line": 109,
                            "character": 12
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Component",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "DialogProps",
                                    "id": 13142
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 13014,
                    "name": "DialogCloseButton",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A button that closes {@link Dialog}. Accessed via `Dialog.CloseButton`."
                    },
                    "typeParameter": [
                        {
                            "id": 13036,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 13037,
                            "name": "SS",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 13082,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/dialog_close_button.tsx",
                            "line": 97,
                            "character": 30
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Component",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "DialogCloseButtonProps",
                                    "id": 12954
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 13286,
                    "name": "ConfirmationDialogProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link ConfirmationDialog} component. Also accepts:\n* {@link DialogStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/ConfirmationDialog\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 13294,
                            "name": "backgroundClassName",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra `className`s to apply to the background element, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/confirmation_dialog.tsx",
                                    "line": 32,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13295,
                            "name": "backgroundStyle",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra styles to apply to the background element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/confirmation_dialog.tsx",
                                    "line": 34,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 13293,
                            "name": "body",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The body of the dialog."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/confirmation_dialog.tsx",
                                    "line": 30,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.ReactNode"
                            }
                        },
                        {
                            "id": 13289,
                            "name": "cancelButtonText",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The label for the cancel button. Defaults to 'Cancel'."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/confirmation_dialog.tsx",
                                    "line": 22,
                                    "character": 20
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13292,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra `className`s to apply to the dialog element, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/confirmation_dialog.tsx",
                                    "line": 28,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13290,
                            "name": "confirmButtonText",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The label for the confirm button. Defaults to 'Confirm'."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/confirmation_dialog.tsx",
                                    "line": 24,
                                    "character": 21
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13291,
                            "name": "isConfirmActionDangerous",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "Whether the action is dangerous (potentially destructive or not easily reversible). Defaults to `false`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/confirmation_dialog.tsx",
                                    "line": 26,
                                    "character": 28
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "boolean"
                            }
                        },
                        {
                            "id": 13296,
                            "name": "onCancel",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "Cancel button event handler. Handles click events and Space/Enter keypress events."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/confirmation_dialog.tsx",
                                    "line": 36,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reflection",
                                "declaration": {
                                    "id": 13297,
                                    "name": "__type",
                                    "kind": 65536,
                                    "kindString": "Type literal",
                                    "flags": {},
                                    "signatures": [
                                        {
                                            "id": 13298,
                                            "name": "__call",
                                            "kind": 4096,
                                            "kindString": "Call signature",
                                            "flags": {},
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "unknown"
                                            }
                                        }
                                    ],
                                    "sources": [
                                        {
                                            "fileName": "src/ui/confirmation_dialog.tsx",
                                            "line": 36,
                                            "character": 13
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "id": 13299,
                            "name": "onConfirm",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "Confirm button event handler. Handles click events and Space/Enter keypress events."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/confirmation_dialog.tsx",
                                    "line": 38,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reflection",
                                "declaration": {
                                    "id": 13300,
                                    "name": "__type",
                                    "kind": 65536,
                                    "kindString": "Type literal",
                                    "flags": {},
                                    "signatures": [
                                        {
                                            "id": 13301,
                                            "name": "__call",
                                            "kind": 4096,
                                            "kindString": "Call signature",
                                            "flags": {},
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "unknown"
                                            }
                                        }
                                    ],
                                    "sources": [
                                        {
                                            "fileName": "src/ui/confirmation_dialog.tsx",
                                            "line": 38,
                                            "character": 14
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "id": 13287,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra styles to apply to the dialog element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/confirmation_dialog.tsx",
                                    "line": 18,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 13288,
                            "name": "title",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The title of the dialog."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/confirmation_dialog.tsx",
                                    "line": 20,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                13294,
                                13295,
                                13293,
                                13289,
                                13292,
                                13290,
                                13291,
                                13296,
                                13299,
                                13287,
                                13288
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/confirmation_dialog.tsx",
                            "line": 16,
                            "character": 33
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "DialogStyleProps",
                            "id": 13114
                        }
                    ]
                },
                {
                    "id": 12954,
                    "name": "DialogCloseButtonProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props for the {@link DialogCloseButton} component. Also accepts:\n* {@link DialogCloseButtonStyleProps}"
                    },
                    "children": [
                        {
                            "id": 12958,
                            "name": "children",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The contents of the close button."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/dialog_close_button.tsx",
                                    "line": 48,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "React.ReactNode"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12955,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "`className`s to apply to the close button, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/dialog_close_button.tsx",
                                    "line": 42,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12956,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Styles to apply to the close button."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/dialog_close_button.tsx",
                                    "line": 44,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 12957,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Indicates if the button can be focused and if/where it participates in sequential keyboard navigation."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/dialog_close_button.tsx",
                                    "line": 46,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [12958, 12955, 12956, 12957]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/dialog_close_button.tsx",
                            "line": 40,
                            "character": 39
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "HTMLDivElement"
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 12972,
                    "name": "DialogCloseButtonStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props for the {@link DialogCloseButton} component. Accepts:\n* {@link BorderRadiusProps}\n* {@link DimensionsSetProps}\n* {@link DisplayProps}\n* {@link FlexContainerSetProps}\n* {@link FlexItemSetProps}\n* {@link PositionSetProps}\n* {@link SpacingSetProps}"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/dialog_close_button.tsx",
                            "line": 63,
                            "character": 44
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "BorderRadiusProps",
                            "id": 7621
                        },
                        {
                            "type": "reference",
                            "name": "DimensionsSetProps",
                            "id": 7730
                        },
                        {
                            "type": "reference",
                            "name": "DisplayProps",
                            "id": 8157
                        },
                        {
                            "type": "reference",
                            "name": "FlexContainerSetProps",
                            "id": 7789
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7856
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7940
                        },
                        {
                            "type": "reference",
                            "name": "SpacingSetProps",
                            "id": 8033
                        }
                    ]
                },
                {
                    "id": 13142,
                    "name": "DialogProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link Dialog} component. Also accepts:\n* {@link DialogStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Dialog\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 13148,
                            "name": "backgroundClassName",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra `className`s to apply to the background element, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/dialog.tsx",
                                    "line": 59,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13149,
                            "name": "backgroundStyle",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra styles to apply to the background element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/dialog.tsx",
                                    "line": 61,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 13150,
                            "name": "children",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The contents of the dialog element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/dialog.tsx",
                                    "line": 63,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.ReactNode"
                            }
                        },
                        {
                            "id": 13146,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra `className`s to apply to the dialog element, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/dialog.tsx",
                                    "line": 55,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13143,
                            "name": "onClose",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "Callback function to fire when the dialog is closed."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/dialog.tsx",
                                    "line": 53,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reflection",
                                "declaration": {
                                    "id": 13144,
                                    "name": "__type",
                                    "kind": 65536,
                                    "kindString": "Type literal",
                                    "flags": {},
                                    "signatures": [
                                        {
                                            "id": 13145,
                                            "name": "__call",
                                            "kind": 4096,
                                            "kindString": "Call signature",
                                            "flags": {},
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "unknown"
                                            }
                                        }
                                    ],
                                    "sources": [
                                        {
                                            "fileName": "src/ui/dialog.tsx",
                                            "line": 53,
                                            "character": 12
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "id": 13147,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra styles to apply to the dialog element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/dialog.tsx",
                                    "line": 57,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [13148, 13149, 13150, 13146, 13143, 13147]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/dialog.tsx",
                            "line": 51,
                            "character": 21
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "DialogStyleProps",
                            "id": 13114
                        }
                    ]
                },
                {
                    "id": 13114,
                    "name": "DialogStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props shared between the {@link Dialog} and {@link ConfirmationDialog} components. Also accepts:\n* {@link DimensionsSetProps}\n* {@link FlexContainerSetProps}\n* {@link SpacingSetProps}"
                    },
                    "children": [
                        {
                            "id": 13115,
                            "name": "display",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/dialog.tsx",
                                    "line": 33,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "stringLiteral",
                                                "value": "block"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "flex"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [13115]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/dialog.tsx",
                            "line": 28,
                            "character": 33
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "DimensionsSetProps",
                            "id": 7730
                        },
                        {
                            "type": "reference",
                            "name": "FlexContainerSetProps",
                            "id": 7789
                        },
                        {
                            "type": "reference",
                            "name": "SpacingSetProps",
                            "id": 8033
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "DialogProps",
                            "id": 13142
                        },
                        {
                            "type": "reference",
                            "name": "ConfirmationDialogProps",
                            "id": 13286
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [13329, 13178, 13014]
                },
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [13286, 12954, 12972, 13142, 13114]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/dialog_close_button.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 10642,
            "name": "@airtable/blocks/ui: FieldIcon",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/field_icon.tsx",
            "comment": {},
            "children": [
                {
                    "id": 10643,
                    "name": "FieldIconProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link FieldIcon} component. Also accepts:\n* {@link IconStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/FieldIcon\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 10647,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the icon."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 55,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedIconProps.className",
                                "id": 10550
                            }
                        },
                        {
                            "id": 10644,
                            "name": "field",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The field model to display an icon for."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_icon.tsx",
                                    "line": 18,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Field",
                                "id": 1927
                            }
                        },
                        {
                            "id": 10646,
                            "name": "fillColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The color of the icon."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 53,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedIconProps.fillColor",
                                "id": 10549
                            }
                        },
                        {
                            "id": 10649,
                            "name": "pathClassName",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the icon path."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 59,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedIconProps.pathClassName",
                                "id": 10552
                            }
                        },
                        {
                            "id": 10650,
                            "name": "pathStyle",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the icon path."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 61,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedIconProps.pathStyle",
                                "id": 10553
                            }
                        },
                        {
                            "id": 10645,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The width/height of the icon. Defaults to 16."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 51,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedIconProps.size",
                                "id": 10548
                            }
                        },
                        {
                            "id": 10648,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the icon."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 57,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedIconProps.style",
                                "id": 10551
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [10647, 10644, 10646, 10649, 10650, 10645, 10648]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/field_icon.tsx",
                            "line": 16,
                            "character": 24
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedIconProps",
                            "id": 10547
                        }
                    ]
                },
                {
                    "id": 10684,
                    "name": "FieldIcon",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true,
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A vector icon for a field's type.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {FieldIcon, useBase} from '@airtable/blocks/ui';\n\nconst base = useBase();\nconst table = base.tables[0];\nconst {primaryField} = table;\n\nconst FieldToken = (\n    <div style={{\n        display: 'inline-flex',\n        alignItems: 'center',\n        padding: 8,\n        fontWeight: 500,\n        backgroundColor: '#eee',\n        borderRadius: 3,\n    }}>\n        <FieldIcon\n            field={primaryField}\n            marginRight={2}\n        />\n        {primaryField.name}\n    </div>\n);\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/FieldIcon"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 10685,
                            "name": "FieldIcon",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A vector icon for a field's type."
                            },
                            "parameters": [
                                {
                                    "id": 10686,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "FieldIconProps",
                                        "id": 10643
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/field_icon.tsx",
                            "line": 52,
                            "character": 15
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [10643]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [10684]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/field_icon.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 9637,
            "name": "@airtable/blocks/ui: FieldPicker",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/field_picker.tsx",
            "comment": {},
            "children": [
                {
                    "id": 9695,
                    "name": "FieldPickerProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link FieldPicker} component. Also accepts:\n* {@link SelectStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/FieldPicker\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 9698,
                            "name": "allowedTypes",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "An array indicating which field types can be selected."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 20,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FieldType",
                                        "id": 637
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedFieldPickerProps.allowedTypes",
                                "id": 9640
                            }
                        },
                        {
                            "id": 9715,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-describedby']",
                                "id": 9185
                            }
                        },
                        {
                            "id": 9713,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-label']",
                                "id": 9183
                            }
                        },
                        {
                            "id": 9714,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-labelledby']",
                                "id": 9184
                            }
                        },
                        {
                            "id": 9707,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.autoFocus",
                                "id": 9177
                            }
                        },
                        {
                            "id": 9706,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.className",
                                "id": 9176
                            }
                        },
                        {
                            "id": 9711,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.disabled",
                                "id": 9181
                            }
                        },
                        {
                            "id": 9696,
                            "name": "field",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The selected field model."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 47,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Field",
                                        "id": 1927
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9708,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.id",
                                "id": 9178
                            }
                        },
                        {
                            "id": 9709,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.name",
                                "id": 9179
                            }
                        },
                        {
                            "id": 9701,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected field changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 26,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 9702,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 9703,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 9704,
                                                            "name": "fieldModel",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "Field",
                                                                        "id": 1927
                                                                    },
                                                                    {
                                                                        "type": "intrinsic",
                                                                        "name": "null"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedFieldPickerProps.onChange",
                                "id": 9643
                            }
                        },
                        {
                            "id": 9700,
                            "name": "placeholder",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The placeholder text when no field is selected."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 24,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedFieldPickerProps.placeholder",
                                "id": 9642
                            }
                        },
                        {
                            "id": 9699,
                            "name": "shouldAllowPickingNone",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user can unset the selected field."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 22,
                                    "character": 26
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedFieldPickerProps.shouldAllowPickingNone",
                                "id": 9641
                            }
                        },
                        {
                            "id": 9705,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9130
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.size",
                                "id": 9175
                            }
                        },
                        {
                            "id": 9712,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.style",
                                "id": 9182
                            }
                        },
                        {
                            "id": 9710,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.tabIndex",
                                "id": 9180
                            }
                        },
                        {
                            "id": 9697,
                            "name": "table",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The parent table model to select fields from. If `null` or `undefined`, the picker won't render."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 18,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Table",
                                        "id": 2370
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedFieldPickerProps.table",
                                "id": 9639
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                9698,
                                9715,
                                9713,
                                9714,
                                9707,
                                9706,
                                9711,
                                9696,
                                9708,
                                9709,
                                9701,
                                9700,
                                9699,
                                9705,
                                9712,
                                9710,
                                9697
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/field_picker.tsx",
                            "line": 45,
                            "character": 26
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedFieldPickerProps",
                            "id": 9638
                        }
                    ]
                },
                {
                    "id": 9768,
                    "name": "FieldPickerSyncedProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link FieldPickerSynced} component. Also accepts:\n* {@link SelectStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/FieldPickerSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/FieldPicker\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 9771,
                            "name": "allowedTypes",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "An array indicating which field types can be selected."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 20,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FieldType",
                                        "id": 637
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedFieldPickerProps.allowedTypes",
                                "id": 9640
                            }
                        },
                        {
                            "id": 9788,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-describedby']",
                                "id": 9185
                            }
                        },
                        {
                            "id": 9786,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-label']",
                                "id": 9183
                            }
                        },
                        {
                            "id": 9787,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-labelledby']",
                                "id": 9184
                            }
                        },
                        {
                            "id": 9780,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.autoFocus",
                                "id": 9177
                            }
                        },
                        {
                            "id": 9779,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.className",
                                "id": 9176
                            }
                        },
                        {
                            "id": 9784,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.disabled",
                                "id": 9181
                            }
                        },
                        {
                            "id": 9769,
                            "name": "globalConfigKey",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "A string key or array key path in {@link GlobalConfig}. The selected field will always reflect the field id stored in {@link GlobalConfig} for this key. Selecting a new field will update {@link GlobalConfig}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker_synced.tsx",
                                    "line": 20,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "GlobalConfigKey",
                                "id": 14893
                            }
                        },
                        {
                            "id": 9781,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.id",
                                "id": 9178
                            }
                        },
                        {
                            "id": 9782,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.name",
                                "id": 9179
                            }
                        },
                        {
                            "id": 9774,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected field changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 26,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 9775,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 9776,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 9777,
                                                            "name": "fieldModel",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "Field",
                                                                        "id": 1927
                                                                    },
                                                                    {
                                                                        "type": "intrinsic",
                                                                        "name": "null"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedFieldPickerProps.onChange",
                                "id": 9643
                            }
                        },
                        {
                            "id": 9773,
                            "name": "placeholder",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The placeholder text when no field is selected."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 24,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedFieldPickerProps.placeholder",
                                "id": 9642
                            }
                        },
                        {
                            "id": 9772,
                            "name": "shouldAllowPickingNone",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user can unset the selected field."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 22,
                                    "character": 26
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedFieldPickerProps.shouldAllowPickingNone",
                                "id": 9641
                            }
                        },
                        {
                            "id": 9778,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9130
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.size",
                                "id": 9175
                            }
                        },
                        {
                            "id": 9785,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.style",
                                "id": 9182
                            }
                        },
                        {
                            "id": 9783,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.tabIndex",
                                "id": 9180
                            }
                        },
                        {
                            "id": 9770,
                            "name": "table",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The parent table model to select fields from. If `null` or `undefined`, the picker won't render."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 18,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Table",
                                        "id": 2370
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedFieldPickerProps.table",
                                "id": 9639
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                9771,
                                9788,
                                9786,
                                9787,
                                9780,
                                9779,
                                9784,
                                9769,
                                9781,
                                9782,
                                9774,
                                9773,
                                9772,
                                9778,
                                9785,
                                9783,
                                9770
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/field_picker_synced.tsx",
                            "line": 18,
                            "character": 32
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedFieldPickerProps",
                            "id": 9638
                        }
                    ]
                },
                {
                    "id": 9638,
                    "name": "SharedFieldPickerProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props shared between the {@link FieldPicker} and {@link FieldPickerSynced} components."
                    },
                    "children": [
                        {
                            "id": 9640,
                            "name": "allowedTypes",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "An array indicating which field types can be selected."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 20,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FieldType",
                                        "id": 637
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9657,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-describedby']",
                                "id": 9185
                            }
                        },
                        {
                            "id": 9655,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-label']",
                                "id": 9183
                            }
                        },
                        {
                            "id": 9656,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-labelledby']",
                                "id": 9184
                            }
                        },
                        {
                            "id": 9649,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.autoFocus",
                                "id": 9177
                            }
                        },
                        {
                            "id": 9648,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.className",
                                "id": 9176
                            }
                        },
                        {
                            "id": 9653,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.disabled",
                                "id": 9181
                            }
                        },
                        {
                            "id": 9650,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.id",
                                "id": 9178
                            }
                        },
                        {
                            "id": 9651,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.name",
                                "id": 9179
                            }
                        },
                        {
                            "id": 9643,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected field changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 26,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 9644,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 9645,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 9646,
                                                            "name": "fieldModel",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "Field",
                                                                        "id": 1927
                                                                    },
                                                                    {
                                                                        "type": "intrinsic",
                                                                        "name": "null"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9642,
                            "name": "placeholder",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The placeholder text when no field is selected."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 24,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9641,
                            "name": "shouldAllowPickingNone",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user can unset the selected field."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 22,
                                    "character": 26
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9647,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9130
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.size",
                                "id": 9175
                            }
                        },
                        {
                            "id": 9654,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.style",
                                "id": 9182
                            }
                        },
                        {
                            "id": 9652,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.tabIndex",
                                "id": 9180
                            }
                        },
                        {
                            "id": 9639,
                            "name": "table",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The parent table model to select fields from. If `null` or `undefined`, the picker won't render."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/field_picker.tsx",
                                    "line": 18,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Table",
                                        "id": 2370
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                9640,
                                9657,
                                9655,
                                9656,
                                9649,
                                9648,
                                9653,
                                9650,
                                9651,
                                9643,
                                9642,
                                9641,
                                9647,
                                9654,
                                9652,
                                9639
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/field_picker.tsx",
                            "line": 16,
                            "character": 39
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedSelectBaseProps",
                            "id": 9174
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FieldPickerProps",
                            "id": 9695
                        },
                        {
                            "type": "reference",
                            "name": "FieldPickerSyncedProps",
                            "id": 9768
                        }
                    ]
                },
                {
                    "id": 9762,
                    "name": "FieldPicker",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "Dropdown menu component for selecting fields.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {TablePicker, FieldPicker, useBase} from '@airtable/blocks/ui';\nimport {fieldTypes} from '@airtable/blocks/models';\nimport React, {Fragment, useState} from 'react';\n\nfunction Block() {\n    useBase();\n    const [table, setTable] = useState(null);\n    const [field, setField] = useState(null);\n\n    const summaryText = field ? `The field type for ${field.name} is ${field.type}.` : 'No field selected.';\n    return (\n        <Fragment>\n            <p style={{marginBottom: 16}}>{summaryText}</p>\n            <label style={{display: 'block', marginBottom: 16}}>\n                <div style={{marginBottom: 8, fontWeight: 500}}>Table</div>\n                <TablePicker\n                    table={table}\n                    onChange={newTable => {\n                        setTable(newTable);\n                        setField(null);\n                    }}\n                    shouldAllowPickingNone={true}\n                />\n            </label>\n            {table && (\n                <label>\n                    <div style={{marginBottom: 8, fontWeight: 500}}>Field</div>\n                    <FieldPicker\n                        table={table}\n                        field={field}\n                        onChange={newField => setField(newField)}\n                        allowedTypes={[\n                            fieldTypes.SINGLE_LINE_TEXT,\n                            fieldTypes.MULTILINE_TEXT,\n                            fieldTypes.EMAIL,\n                            fieldTypes.URL,\n                            fieldTypes.PHONE_NUMBER,\n                        ]}\n                        shouldAllowPickingNone={true}\n                    />\n                </label>\n            )}\n        </Fragment>\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/FieldPicker"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 9763,
                            "name": "FieldPicker",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Dropdown menu component for selecting fields."
                            },
                            "parameters": [
                                {
                                    "id": 9764,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "FieldPickerProps",
                                        "id": 9695
                                    }
                                },
                                {
                                    "id": 9765,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLSelectElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    },
                                    {
                                        "type": "reference",
                                        "name": "Element"
                                    }
                                ]
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/field_picker.tsx",
                            "line": 104,
                            "character": 17
                        }
                    ]
                },
                {
                    "id": 9826,
                    "name": "FieldPickerSynced",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A wrapper around the {@link FieldPicker} component that syncs with {@link GlobalConfig}.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {TablePickerSynced, FieldPickerSynced, useBase, useWatchable} from '@airtable/blocks/ui';\nimport {fieldTypes} from '@airtable/blocks/models';\nimport {globalConfig} from '@airtable/blocks';\nimport React, {Fragment} from 'react';\n\nfunction Block() {\n    const base = useBase();\n    const tableId = globalConfig.get('tableId');\n    const table = base.getTableByIdIfExists(tableId);\n    const fieldId = globalConfig.get('fieldId');\n    const field = table.getFieldByIdIfExists(fieldId);\n    useWatchable(globalConfig, ['tableId', 'fieldId']);\n\n    const summaryText = field ? `The field type for ${field.name} is ${field.type}.` : 'No field selected.';\n    return (\n        <Fragment>\n            <p style={{marginBottom: 16}}>{summaryText}</p>\n            <label style={{display: 'block', marginBottom: 16}}>\n                <div style={{marginBottom: 8, fontWeight: 500}}>Table</div>\n                <TablePickerSynced\n                    globalConfigKey='tableId'\n                    shouldAllowPickingNone={true}\n                />\n            </label>\n            {table && (\n                <label>\n                    <div style={{marginBottom: 8, fontWeight: 500}}>Field</div>\n                    <FieldPickerSynced\n                        table={table}\n                        globalConfigKey='fieldId'\n                        allowedTypes={[\n                            fieldTypes.SINGLE_LINE_TEXT,\n                            fieldTypes.MULTILINE_TEXT,\n                            fieldTypes.EMAIL,\n                            fieldTypes.URL,\n                            fieldTypes.PHONE_NUMBER,\n                        ]}\n                        shouldAllowPickingNone={true}\n                    />\n                </label>\n            )}\n        </Fragment>\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/FieldPickerSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/FieldPicker"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 9827,
                            "name": "FieldPickerSynced",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A wrapper around the {@link FieldPicker} component that syncs with {@link GlobalConfig}."
                            },
                            "parameters": [
                                {
                                    "id": 9828,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "FieldPickerSyncedProps",
                                        "id": 9768
                                    }
                                },
                                {
                                    "id": 9829,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLSelectElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/field_picker_synced.tsx",
                            "line": 77,
                            "character": 23
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [9695, 9768, 9638]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [9762, 9826]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/field_picker.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 14233,
            "name": "@airtable/blocks/ui: FormField",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/form_field.tsx",
            "comment": {},
            "children": [
                {
                    "id": 14265,
                    "name": "FormFieldProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link FormField} component. Also accepts:\n* {@link FormFieldStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/FormField\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 14272,
                            "name": "children",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The contents of the form field."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/form_field.tsx",
                                    "line": 84,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.ReactNode"
                            }
                        },
                        {
                            "id": 14267,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the form field."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/form_field.tsx",
                                    "line": 74,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14271,
                            "name": "description",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The description content for the form field. Displayed beneath the label and above the wrapped control field."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/form_field.tsx",
                                    "line": 82,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "React.ReactNode"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14270,
                            "name": "htmlFor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `for` attribute to be applied to the inner label. By default, the form field will automatically generate a random ID and set it on both the label and the wrapped input/select. Only use this property if you want to override the generated ID with your own custom ID."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/form_field.tsx",
                                    "line": 80,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14266,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/form_field.tsx",
                                    "line": 72,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14269,
                            "name": "label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The label content for the form field."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/form_field.tsx",
                                    "line": 78,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.ReactNode"
                            }
                        },
                        {
                            "id": 14268,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the form field."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/form_field.tsx",
                                    "line": 76,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [14272, 14267, 14271, 14270, 14266, 14269, 14268]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/form_field.tsx",
                            "line": 70,
                            "character": 24
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "FormFieldStyleProps",
                            "id": 14234
                        }
                    ]
                },
                {
                    "id": 14234,
                    "name": "FormFieldStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Style props for the {@link FormField} component. Accepts:\n* {@link FlexItemSetProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link SpacingSetProps}\n* {@link WidthProps}"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/form_field.tsx",
                            "line": 44,
                            "character": 29
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "MaxWidthProps",
                            "id": 7690
                        },
                        {
                            "type": "reference",
                            "name": "MinWidthProps",
                            "id": 7710
                        },
                        {
                            "type": "reference",
                            "name": "WidthProps",
                            "id": 7720
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7856
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7940
                        },
                        {
                            "type": "reference",
                            "name": "SpacingSetProps",
                            "id": 8033
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "FormFieldProps",
                            "id": 14265
                        }
                    ]
                },
                {
                    "id": 14305,
                    "name": "FormField",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A form field component that wraps any control field, supplying a provided label and optional\ndescription.",
                        "text": "This will automatically set up the `for` attribute on the outputted label with the `id` attribute\non the wrapped control field for the following UI components: Label, Select, FieldPicker,\nModelPicker, and ViewPicker. If you'd like to manually override this behavior, you can provide an\n`htmlFor` prop to this component and manually set the `id` attribute on your wrapped control to\nthe same value.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {useBase, Box, FormField, ViewPicker, TablePicker} from '@airtable/blocks/ui';\nimport React, {useState} from 'react';\n\nfunction SettingsForm() {\n    const base = useBase();\n    const [name, setName] = useState('');\n    const [table, setTable] = useState(base.tables[0]);\n    const [view, setView] = useState(null);\n    return (\n        <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" width=\"400px\">\n            <FormField label=\"Table\" description=\"Select a table from your base\">\n                <TablePicker table={table} onChange={setTable} />\n            </FormField>\n            <FormField label=\"View\" description=\"Select a view from your table\">\n                 <ViewPicker table={table} view={view} onChange={setView} />\n            </FormField>\n        </Box>\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/FormField"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14306,
                            "name": "FormField",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A form field component that wraps any control field, supplying a provided label and optional\ndescription.",
                                "text": "This will automatically set up the `for` attribute on the outputted label with the `id` attribute\non the wrapped control field for the following UI components: Label, Select, FieldPicker,\nModelPicker, and ViewPicker. If you'd like to manually override this behavior, you can provide an\n`htmlFor` prop to this component and manually set the `id` attribute on your wrapped control to\nthe same value.\n"
                            },
                            "parameters": [
                                {
                                    "id": 14307,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "FormFieldProps",
                                        "id": 14265
                                    }
                                },
                                {
                                    "id": 14308,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLDivElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/form_field.tsx",
                            "line": 122,
                            "character": 15
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [14265, 14234]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [14305]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/form_field.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 14033,
            "name": "@airtable/blocks/ui: Heading",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/heading.tsx",
            "comment": {},
            "children": [
                {
                    "id": 14034,
                    "name": "HeadingProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link Heading} component. Also supports:\n* {@link AllStylesProps}\n* {@link AriaProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Heading"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 14036,
                            "name": "as",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The element that is rendered. Defaults to `h3`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/heading.tsx",
                                    "line": 105,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "stringLiteral",
                                        "value": "h1"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "h2"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "h3"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "h4"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "h5"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "h6"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14038,
                            "name": "children",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The contents of the heading."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/heading.tsx",
                                    "line": 109,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "React.ReactNode"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14042,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/heading.tsx",
                                    "line": 117,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14041,
                            "name": "dataAttributes",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Data attributes that are spread onto the element, e.g. `dataAttributes={{'data-*': '...'}}`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/heading.tsx",
                                    "line": 115,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "DataAttributesProp"
                            }
                        },
                        {
                            "id": 14039,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/heading.tsx",
                                    "line": 111,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14035,
                            "name": "role",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `role` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/heading.tsx",
                                    "line": 103,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14040,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the heading. Defaults to `default`. Can be a responsive prop object."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/heading.tsx",
                                    "line": 113,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "HeadingSizeProp",
                                "id": 14122
                            }
                        },
                        {
                            "id": 14043,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/heading.tsx",
                                    "line": 119,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 14037,
                            "name": "variant",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The variant of the heading. Defaults to `default`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/heading.tsx",
                                    "line": 107,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "HeadingVariant",
                                "id": 14124
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                14036,
                                14038,
                                14042,
                                14041,
                                14039,
                                14035,
                                14040,
                                14043,
                                14037
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/heading.tsx",
                            "line": 101,
                            "character": 22
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8177
                        },
                        {
                            "type": "reference",
                            "name": "AriaProps",
                            "id": 11008
                        }
                    ]
                },
                {
                    "id": 14119,
                    "name": "HeadingSize",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Sizes for the {@link Heading} component."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/heading.tsx",
                            "line": 26,
                            "character": 16
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "small"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "default"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "large"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "xsmall"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "xlarge"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "xxlarge"
                            }
                        ]
                    }
                },
                {
                    "id": 14122,
                    "name": "HeadingSizeProp",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Size prop for the {@link Heading} component."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/heading.tsx",
                            "line": 32,
                            "character": 20
                        }
                    ],
                    "type": {
                        "type": "reference",
                        "name": "ResponsiveProp",
                        "id": 7559,
                        "typeArguments": [
                            {
                                "type": "reference",
                                "name": "HeadingSize",
                                "id": 14119
                            }
                        ]
                    }
                },
                {
                    "id": 14124,
                    "name": "HeadingVariant",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Variant prop for the {@link Heading} component.\n• **default** - Headings typically used for titles.\n• **caps** - All-caps headings typically used for field names and smaller section headings."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/heading.tsx",
                            "line": 40,
                            "character": 19
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "default"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "caps"
                            }
                        ]
                    }
                },
                {
                    "id": 14138,
                    "name": "Heading",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A heading component with sizes and variants.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {Heading} from '@airtable/blocks/ui';\nimport React, {Fragment} from 'react';\n\nfunction HeadingExample() {\n    return (\n        <Fragment>\n            <Heading>Default heading</Heading>\n            <Heading size=\"small\" variant=\"caps\">Small all caps heading</Heading>\n            <Heading\n                 size={{\n                     xsmallViewport: 'xsmall',\n                     smallViewport: 'xsmall',\n                     mediumViewport: 'small',\n                     largeViewport: 'default'\n                 }}\n             >Responsive heading</Heading>\n        </Fragment>\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/Heading"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14139,
                            "name": "Heading",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A heading component with sizes and variants."
                            },
                            "parameters": [
                                {
                                    "id": 14140,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "HeadingProps",
                                        "id": 14034
                                    }
                                },
                                {
                                    "id": 14141,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLHeadingElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/heading.tsx",
                            "line": 150,
                            "character": 13
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [14034]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [14119, 14122, 14124]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [14138]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/heading.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 10525,
            "name": "@airtable/blocks/ui: Icon",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/icon.tsx",
            "comment": {},
            "children": [
                {
                    "id": 10587,
                    "name": "IconProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link Icon} component. Also accepts:\n* {@link IconStyleProps}"
                    },
                    "children": [
                        {
                            "id": 10591,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the icon."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 55,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedIconProps.className",
                                "id": 10550
                            }
                        },
                        {
                            "id": 10590,
                            "name": "fillColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The color of the icon."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 53,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedIconProps.fillColor",
                                "id": 10549
                            }
                        },
                        {
                            "id": 10588,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The name of the icon. For more details, see the [list of supported icons](/packages/sdk/docs/icons.md)."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 81,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "IconName"
                            }
                        },
                        {
                            "id": 10593,
                            "name": "pathClassName",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the icon path."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 59,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedIconProps.pathClassName",
                                "id": 10552
                            }
                        },
                        {
                            "id": 10594,
                            "name": "pathStyle",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the icon path."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 61,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedIconProps.pathStyle",
                                "id": 10553
                            }
                        },
                        {
                            "id": 10589,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The width/height of the icon. Defaults to 16."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 51,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedIconProps.size",
                                "id": 10548
                            }
                        },
                        {
                            "id": 10592,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the icon."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 57,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedIconProps.style",
                                "id": 10551
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [10591, 10590, 10588, 10593, 10594, 10589, 10592]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/icon.tsx",
                            "line": 79,
                            "character": 19
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedIconProps",
                            "id": 10547
                        }
                    ]
                },
                {
                    "id": 10526,
                    "name": "IconStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props shared between the {@link Icon} and {@link FieldIcon} components. Accepts:\n* {@link FlexItemSetProps}\n* {@link PositionSetProps}\n* {@link MarginProps}"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/icon.tsx",
                            "line": 33,
                            "character": 31
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7856
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7940
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7951
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "SharedIconProps",
                            "id": 10547
                        }
                    ]
                },
                {
                    "id": 10547,
                    "name": "SharedIconProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props shared between the {@link Icon} and {@link FieldIcon} components."
                    },
                    "children": [
                        {
                            "id": 10550,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the icon."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 55,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10549,
                            "name": "fillColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The color of the icon."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 53,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10552,
                            "name": "pathClassName",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the icon path."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 59,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10553,
                            "name": "pathStyle",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the icon path."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 61,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 10548,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The width/height of the icon. Defaults to 16."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 51,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10551,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the icon."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/icon.tsx",
                                    "line": 57,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [10550, 10549, 10552, 10553, 10548, 10551]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/icon.tsx",
                            "line": 49,
                            "character": 32
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "IconStyleProps",
                            "id": 10526
                        },
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "SVGSVGElement"
                                }
                            ]
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "IconProps",
                            "id": 10587
                        },
                        {
                            "type": "reference",
                            "name": "FieldIconProps",
                            "id": 10643
                        }
                    ]
                },
                {
                    "id": 10637,
                    "name": "Icon",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A vector icon from the Airtable icon set.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {Icon} from '@airtable/blocks/ui';\n\nconst MyIcon = (\n    <Icon\n        name=\"heart\"\n    />\n);\n```"
                            },
                            {
                                "tag": "component",
                                "text": ""
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/Icon\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 10638,
                            "name": "Icon",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A vector icon from the Airtable icon set."
                            },
                            "parameters": [
                                {
                                    "id": 10639,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "IconProps",
                                        "id": 10587
                                    }
                                },
                                {
                                    "id": 10640,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "SVGSVGElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    },
                                    {
                                        "type": "reference",
                                        "name": "Element"
                                    }
                                ]
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/icon.tsx",
                            "line": 100,
                            "character": 10
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [10587, 10526, 10547]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [10637]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/icon.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 10025,
            "name": "@airtable/blocks/ui: Input",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/input.tsx",
            "comment": {},
            "children": [
                {
                    "id": 10112,
                    "name": "InputProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link Input} component. Also accepts:\n* {@link InputStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Input\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 10137,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 139,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.['aria-describedby']",
                                "id": 10074
                            }
                        },
                        {
                            "id": 10136,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 137,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.['aria-labelledby']",
                                "id": 10073
                            }
                        },
                        {
                            "id": 10130,
                            "name": "autoComplete",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoComplete` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 129,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.autoComplete",
                                "id": 10067
                            }
                        },
                        {
                            "id": 10122,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 113,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.autoFocus",
                                "id": 10059
                            }
                        },
                        {
                            "id": 10132,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the input, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 133,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.className",
                                "id": 10069
                            }
                        },
                        {
                            "id": 10116,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `disabled` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 101,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.disabled",
                                "id": 10053
                            }
                        },
                        {
                            "id": 10121,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 111,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.id",
                                "id": 10058
                            }
                        },
                        {
                            "id": 10123,
                            "name": "max",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `max` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 115,
                                    "character": 7
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.max",
                                "id": 10060
                            }
                        },
                        {
                            "id": 10124,
                            "name": "maxLength",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `maxLength` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 117,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.maxLength",
                                "id": 10061
                            }
                        },
                        {
                            "id": 10138,
                            "name": "min",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `min` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 141,
                                    "character": 7
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.min",
                                "id": 10075
                            }
                        },
                        {
                            "id": 10126,
                            "name": "minLength",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `minLength` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 121,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.minLength",
                                "id": 10063
                            }
                        },
                        {
                            "id": 10120,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 109,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.name",
                                "id": 10057
                            }
                        },
                        {
                            "id": 10128,
                            "name": "pattern",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `pattern` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 125,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.pattern",
                                "id": 10065
                            }
                        },
                        {
                            "id": 10125,
                            "name": "placeholder",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The placeholder for the input."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 119,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.placeholder",
                                "id": 10062
                            }
                        },
                        {
                            "id": 10129,
                            "name": "readOnly",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `readOnly` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 127,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.readOnly",
                                "id": 10066
                            }
                        },
                        {
                            "id": 10117,
                            "name": "required",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `required` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 103,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.required",
                                "id": 10054
                            }
                        },
                        {
                            "id": 10114,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the input. Defaults to `default`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 97,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9130
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.size",
                                "id": 10051
                            }
                        },
                        {
                            "id": 10118,
                            "name": "spellCheck",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `spellcheck` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 105,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.spellCheck",
                                "id": 10055
                            }
                        },
                        {
                            "id": 10127,
                            "name": "step",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `step` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 123,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.step",
                                "id": 10064
                            }
                        },
                        {
                            "id": 10131,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the input."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 131,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.style",
                                "id": 10068
                            }
                        },
                        {
                            "id": 10119,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 107,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.tabIndex",
                                "id": 10056
                            }
                        },
                        {
                            "id": 10115,
                            "name": "type",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `type` for the input. Defaults to `text`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 99,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "number"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "time"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "text"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "date"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "datetime-local"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "email"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "month"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "password"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "search"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "tel"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "url"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "week"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.type",
                                "id": 10052
                            }
                        },
                        {
                            "id": 10113,
                            "name": "value",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The input's current value."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 198,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        },
                        {
                            "id": 10133,
                            "name": "onChange",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the input changes."
                            },
                            "signatures": [
                                {
                                    "id": 10134,
                                    "name": "onChange",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "A function to be called when the input changes."
                                    },
                                    "parameters": [
                                        {
                                            "id": 10135,
                                            "name": "e",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "ChangeEvent",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "HTMLInputElement"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "unknown"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "SharedInputProps.onChange",
                                        "id": 10070
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 135,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.onChange",
                                "id": 10070
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                10137,
                                10136,
                                10130,
                                10122,
                                10132,
                                10116,
                                10121,
                                10123,
                                10124,
                                10138,
                                10126,
                                10120,
                                10128,
                                10125,
                                10129,
                                10117,
                                10114,
                                10118,
                                10127,
                                10131,
                                10119,
                                10115,
                                10113
                            ]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [10133]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/input.tsx",
                            "line": 196,
                            "character": 20
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedInputProps",
                            "id": 10050
                        }
                    ]
                },
                {
                    "id": 10026,
                    "name": "InputStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props shared between the {@link Input} and {@link InputSynced} components. Accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link WidthProps}"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/input.tsx",
                            "line": 71,
                            "character": 32
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "MaxWidthProps",
                            "id": 7690
                        },
                        {
                            "type": "reference",
                            "name": "MinWidthProps",
                            "id": 7710
                        },
                        {
                            "type": "reference",
                            "name": "WidthProps",
                            "id": 7720
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7856
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7940
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7951
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "SharedInputProps",
                            "id": 10050
                        }
                    ]
                },
                {
                    "id": 10221,
                    "name": "InputSyncedProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link InputSynced} component. Also accepts:\n* {@link InputStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/InputSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/Input\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 10246,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 139,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.['aria-describedby']",
                                "id": 10074
                            }
                        },
                        {
                            "id": 10245,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 137,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.['aria-labelledby']",
                                "id": 10073
                            }
                        },
                        {
                            "id": 10239,
                            "name": "autoComplete",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoComplete` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 129,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.autoComplete",
                                "id": 10067
                            }
                        },
                        {
                            "id": 10231,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 113,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.autoFocus",
                                "id": 10059
                            }
                        },
                        {
                            "id": 10241,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the input, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 133,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.className",
                                "id": 10069
                            }
                        },
                        {
                            "id": 10225,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `disabled` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 101,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.disabled",
                                "id": 10053
                            }
                        },
                        {
                            "id": 10222,
                            "name": "globalConfigKey",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "A string key or array key path in {@link GlobalConfig}. The input value will always reflect the value stored in {@link GlobalConfig} for this key. Changing the input value will update {@link GlobalConfig}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input_synced.tsx",
                                    "line": 18,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "GlobalConfigKey",
                                "id": 14893
                            }
                        },
                        {
                            "id": 10230,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 111,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.id",
                                "id": 10058
                            }
                        },
                        {
                            "id": 10232,
                            "name": "max",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `max` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 115,
                                    "character": 7
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.max",
                                "id": 10060
                            }
                        },
                        {
                            "id": 10233,
                            "name": "maxLength",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `maxLength` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 117,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.maxLength",
                                "id": 10061
                            }
                        },
                        {
                            "id": 10247,
                            "name": "min",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `min` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 141,
                                    "character": 7
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.min",
                                "id": 10075
                            }
                        },
                        {
                            "id": 10235,
                            "name": "minLength",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `minLength` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 121,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.minLength",
                                "id": 10063
                            }
                        },
                        {
                            "id": 10229,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 109,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.name",
                                "id": 10057
                            }
                        },
                        {
                            "id": 10237,
                            "name": "pattern",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `pattern` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 125,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.pattern",
                                "id": 10065
                            }
                        },
                        {
                            "id": 10234,
                            "name": "placeholder",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The placeholder for the input."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 119,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.placeholder",
                                "id": 10062
                            }
                        },
                        {
                            "id": 10238,
                            "name": "readOnly",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `readOnly` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 127,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.readOnly",
                                "id": 10066
                            }
                        },
                        {
                            "id": 10226,
                            "name": "required",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `required` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 103,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.required",
                                "id": 10054
                            }
                        },
                        {
                            "id": 10223,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the input. Defaults to `default`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 97,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9130
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.size",
                                "id": 10051
                            }
                        },
                        {
                            "id": 10227,
                            "name": "spellCheck",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `spellcheck` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 105,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.spellCheck",
                                "id": 10055
                            }
                        },
                        {
                            "id": 10236,
                            "name": "step",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `step` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 123,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.step",
                                "id": 10064
                            }
                        },
                        {
                            "id": 10240,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the input."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 131,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.style",
                                "id": 10068
                            }
                        },
                        {
                            "id": 10228,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 107,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.tabIndex",
                                "id": 10056
                            }
                        },
                        {
                            "id": 10224,
                            "name": "type",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `type` for the input. Defaults to `text`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 99,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "number"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "time"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "text"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "date"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "datetime-local"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "email"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "month"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "password"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "search"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "tel"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "url"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "week"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.type",
                                "id": 10052
                            }
                        },
                        {
                            "id": 10242,
                            "name": "onChange",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the input changes."
                            },
                            "signatures": [
                                {
                                    "id": 10243,
                                    "name": "onChange",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "A function to be called when the input changes."
                                    },
                                    "parameters": [
                                        {
                                            "id": 10244,
                                            "name": "e",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "ChangeEvent",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "HTMLInputElement"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "unknown"
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "SharedInputProps.onChange",
                                        "id": 10070
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 135,
                                    "character": 12
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedInputProps.onChange",
                                "id": 10070
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                10246,
                                10245,
                                10239,
                                10231,
                                10241,
                                10225,
                                10222,
                                10230,
                                10232,
                                10233,
                                10247,
                                10235,
                                10229,
                                10237,
                                10234,
                                10238,
                                10226,
                                10223,
                                10227,
                                10236,
                                10240,
                                10228,
                                10224
                            ]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [10242]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/input_synced.tsx",
                            "line": 16,
                            "character": 26
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedInputProps",
                            "id": 10050
                        }
                    ]
                },
                {
                    "id": 10050,
                    "name": "SharedInputProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props shared between the {@link Input} and {@link InputSynced} components."
                    },
                    "children": [
                        {
                            "id": 10074,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 139,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10073,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 137,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10067,
                            "name": "autoComplete",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoComplete` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 129,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10059,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 113,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10069,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the input, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 133,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10053,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `disabled` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 101,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10058,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 111,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10060,
                            "name": "max",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `max` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 115,
                                    "character": 7
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10061,
                            "name": "maxLength",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `maxLength` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 117,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10075,
                            "name": "min",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `min` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 141,
                                    "character": 7
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10063,
                            "name": "minLength",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `minLength` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 121,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10057,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 109,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10065,
                            "name": "pattern",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `pattern` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 125,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10062,
                            "name": "placeholder",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The placeholder for the input."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 119,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10066,
                            "name": "readOnly",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `readOnly` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 127,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10054,
                            "name": "required",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `required` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 103,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10051,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the input. Defaults to `default`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 97,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9130
                            }
                        },
                        {
                            "id": 10055,
                            "name": "spellCheck",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `spellcheck` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 105,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10064,
                            "name": "step",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `step` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 123,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10068,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the input."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 131,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 10056,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 107,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10052,
                            "name": "type",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `type` for the input. Defaults to `text`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 99,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "number"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "time"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "text"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "date"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "datetime-local"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "email"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "month"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "password"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "search"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "tel"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "url"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "week"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10070,
                            "name": "onChange",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the input changes."
                            },
                            "signatures": [
                                {
                                    "id": 10071,
                                    "name": "onChange",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "A function to be called when the input changes."
                                    },
                                    "parameters": [
                                        {
                                            "id": 10072,
                                            "name": "e",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "ChangeEvent",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "HTMLInputElement"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "unknown"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/ui/input.tsx",
                                    "line": 135,
                                    "character": 12
                                }
                            ]
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                10074,
                                10073,
                                10067,
                                10059,
                                10069,
                                10053,
                                10058,
                                10060,
                                10061,
                                10075,
                                10063,
                                10057,
                                10065,
                                10062,
                                10066,
                                10054,
                                10051,
                                10055,
                                10064,
                                10068,
                                10056,
                                10052
                            ]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [10070]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/input.tsx",
                            "line": 95,
                            "character": 33
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "InputStyleProps",
                            "id": 10026
                        },
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "HTMLInputElement"
                                }
                            ]
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "InputProps",
                            "id": 10112
                        },
                        {
                            "type": "reference",
                            "name": "InputSyncedProps",
                            "id": 10221
                        }
                    ]
                },
                {
                    "id": 10189,
                    "name": "SupportedInputType",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Supported types for the {@link Input} component. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#%3Cinput%3E_types|MDN} for more information."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/input.tsx",
                            "line": 161,
                            "character": 23
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "number"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "time"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "text"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "date"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "datetime-local"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "email"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "month"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "password"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "search"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "tel"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "url"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "week"
                            }
                        ]
                    }
                },
                {
                    "id": 10184,
                    "name": "ValidInputType",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/ui/input.tsx",
                            "line": 58,
                            "character": 19
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "number"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "time"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "text"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "date"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "datetime-local"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "email"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "month"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "password"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "search"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "tel"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "url"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "week"
                            }
                        ]
                    }
                },
                {
                    "id": 10215,
                    "name": "Input",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "An input component. A wrapper around `<input>` that fits in with Airtable's user interface.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {Input} from '@airtable/blocks/ui';\nimport React, {Fragment, useState} from 'react';\n\nfunction HelloSomeone() {\n    const [value, setValue] = useState('world');\n\n    return (\n        <Fragment>\n            <div>Hello, {value}!</div>\n\n            <Input\n                value={value}\n                onChange={(event) => setValue(event.target.value)}\n                placeholder=\"world\"\n            />\n        </Fragment>\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/Input"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 10216,
                            "name": "Input",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "An input component. A wrapper around `<input>` that fits in with Airtable's user interface."
                            },
                            "parameters": [
                                {
                                    "id": 10217,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "InputProps",
                                        "id": 10112
                                    }
                                },
                                {
                                    "id": 10218,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLInputElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/input.tsx",
                            "line": 228,
                            "character": 11
                        }
                    ]
                },
                {
                    "id": 10284,
                    "name": "InputSynced",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A wrapper around the {@link Input} component that syncs with {@link GlobalConfig}.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {InputSynced} from '@airtable/blocks/ui';\nimport React from 'react';\n\nfunction ApiKeyInput() {\n    return (\n        <InputSynced\n            globalConfigKey=\"apiKey\"\n            disabled={!canEditApiKey}\n        />\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/InputSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/Input"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 10285,
                            "name": "InputSynced",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A wrapper around the {@link Input} component that syncs with {@link GlobalConfig}."
                            },
                            "parameters": [
                                {
                                    "id": 10286,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "InputSyncedProps",
                                        "id": 10221
                                    }
                                },
                                {
                                    "id": 10287,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLInputElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/input_synced.tsx",
                            "line": 42,
                            "character": 17
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [10112, 10026, 10221, 10050]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [10189, 10184]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [10215, 10284]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/input.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 14143,
            "name": "@airtable/blocks/ui: Label",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/label.tsx",
            "comment": {},
            "children": [
                {
                    "id": 14144,
                    "name": "LabelProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link Label} component. Also accepts:\n* {@link AllStylesProps}\n* {@link AriaProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Label\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 14148,
                            "name": "children",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The contents of the label."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/label.tsx",
                                    "line": 27,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "React.ReactNode"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14149,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/label.tsx",
                                    "line": 29,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14151,
                            "name": "dataAttributes",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Data attributes that are spread onto the element, e.g. `dataAttributes={{'data-*': '...'}}`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/label.tsx",
                                    "line": 33,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "DataAttributesProp"
                            }
                        },
                        {
                            "id": 14146,
                            "name": "htmlFor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `for` attribute. Should contain the `id` of the input."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/label.tsx",
                                    "line": 23,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14147,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/label.tsx",
                                    "line": 25,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14152,
                            "name": "role",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `role` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/label.tsx",
                                    "line": 35,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14145,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the label. Defaults to `default`. Can be a responsive prop object."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/label.tsx",
                                    "line": 21,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "TextSizeProp",
                                "id": 13903
                            }
                        },
                        {
                            "id": 14150,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/label.tsx",
                                    "line": 31,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [14148, 14149, 14151, 14146, 14147, 14152, 14145, 14150]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/label.tsx",
                            "line": 19,
                            "character": 20
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8177
                        },
                        {
                            "type": "reference",
                            "name": "AriaProps",
                            "id": 11008
                        }
                    ]
                },
                {
                    "id": 14228,
                    "name": "Label",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A label component.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {Label, Input} from '@airtable/blocks/ui';\nimport React, {Fragment} from 'react';\n\nfunction LabelExample() {\n    return (\n      <Fragment>\n          <Label htmlFor=\"my-input\">Label</Label>\n          <Input id=\"my-input\" onChange={() => {}} value=\"\" />\n      </Fragment>\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/Label"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14229,
                            "name": "Label",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A label component."
                            },
                            "parameters": [
                                {
                                    "id": 14230,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "LabelProps",
                                        "id": 14144
                                    }
                                },
                                {
                                    "id": 14231,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLLabelElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/label.tsx",
                            "line": 58,
                            "character": 11
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [14144]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [14228]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/label.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 13914,
            "name": "@airtable/blocks/ui: Link",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/link.tsx",
            "comment": {},
            "children": [
                {
                    "id": 13948,
                    "name": "LinkProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link Link} component. Also supports:\n* {@link AriaProps}\n* {@link LinkStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Link"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 13960,
                            "name": "children",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The contents of the link."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 145,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "React.ReactNode"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13957,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the link."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 139,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13959,
                            "name": "dataAttributes",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Data attributes that are spread onto the element, e.g. `dataAttributes={{'data-*': '...'}}`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 143,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "DataAttributesProp"
                            }
                        },
                        {
                            "id": 13953,
                            "name": "href",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The target URL or URL fragment for the link."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 131,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        },
                        {
                            "id": 13951,
                            "name": "icon",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The name of the icon or a react node. For more details, see the [list of supported icons](/packages/sdk/docs/icons.md)."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 127,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "IconName"
                                    },
                                    {
                                        "type": "reference",
                                        "name": "ReactElement"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13955,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 135,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13949,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the link. Defaults to `default`. Can be a responsive prop object."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 123,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "TextSizeProp",
                                "id": 13903
                            }
                        },
                        {
                            "id": 13958,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the link."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 141,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 13956,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Indicates if the link can be focused and if/where it participates in sequential keyboard navigation."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 137,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13954,
                            "name": "target",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies where to display the linked URL."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 133,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13952,
                            "name": "underline",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Adds an underline to the link when true."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 129,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13950,
                            "name": "variant",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The variant of the link, which defines the color. Defaults to `default`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 125,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "LinkVariant",
                                "id": 14017
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                13960,
                                13957,
                                13959,
                                13953,
                                13951,
                                13955,
                                13949,
                                13958,
                                13956,
                                13954,
                                13952,
                                13950
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/link.tsx",
                            "line": 121,
                            "character": 19
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AriaProps",
                            "id": 11008
                        },
                        {
                            "type": "reference",
                            "name": "LinkStyleProps",
                            "id": 13915
                        },
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "HTMLAnchorElement"
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 13915,
                    "name": "LinkStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props for the {@link Link} component. Also accepts:\n* {@link FlexItemSetProps}\n* {@link FontWeightProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link SpacingSetProps}\n* {@link WidthProps}"
                    },
                    "children": [
                        {
                            "id": 13916,
                            "name": "display",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/link.tsx",
                                    "line": 63,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "stringLiteral",
                                                "value": "inline-flex"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "flex"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "none"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [13916]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/link.tsx",
                            "line": 54,
                            "character": 31
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "MaxWidthProps",
                            "id": 7690
                        },
                        {
                            "type": "reference",
                            "name": "MinWidthProps",
                            "id": 7710
                        },
                        {
                            "type": "reference",
                            "name": "WidthProps",
                            "id": 7720
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7856
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7940
                        },
                        {
                            "type": "reference",
                            "name": "FontWeightProps",
                            "id": 8080
                        },
                        {
                            "type": "reference",
                            "name": "SpacingSetProps",
                            "id": 8033
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "LinkProps",
                            "id": 13948
                        }
                    ]
                },
                {
                    "id": 14017,
                    "name": "LinkVariant",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Variants for the {@link Link} component:",
                        "text": "• **default**\n\nBlue text.\n\n• **dark**\n\nDark gray text.\n\n• **light**\n\nLight gray text.\n"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/link.tsx",
                            "line": 103,
                            "character": 16
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "default"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "dark"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "light"
                            }
                        ]
                    }
                },
                {
                    "id": 14028,
                    "name": "Link",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A wrapper around the `<a>` tag that offers a few security benefits:",
                        "text": "- Limited XSS protection. If the `href` starts with `javascript:` or `data:`, `http://` will be prepended.\n- There is [reverse tabnabbing prevention](https://www.owasp.org/index.php/Reverse_Tabnabbing). If `target` is set, the `rel` attribute will be set to `noopener noreferrer`.\n\nDevelopers should use `Link` instead of `a` when possible.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {Link} from '@airtable/blocks/ui';\n\nfunction MyLinkComponent() {\n    return (\n        <Link href=\"https://example.com\">\n            Check out my homepage!\n        </Link>\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/Link"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14029,
                            "name": "Link",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A wrapper around the `<a>` tag that offers a few security benefits:",
                                "text": "- Limited XSS protection. If the `href` starts with `javascript:` or `data:`, `http://` will be prepended.\n- There is [reverse tabnabbing prevention](https://www.owasp.org/index.php/Reverse_Tabnabbing). If `target` is set, the `rel` attribute will be set to `noopener noreferrer`.\n\nDevelopers should use `Link` instead of `a` when possible.\n"
                            },
                            "parameters": [
                                {
                                    "id": 14030,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "LinkProps",
                                        "id": 13948
                                    }
                                },
                                {
                                    "id": 14031,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLAnchorElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/link.tsx",
                            "line": 203,
                            "character": 10
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [13948, 13915]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [14017]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [14028]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/link.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 10687,
            "name": "@airtable/blocks/ui: Loader",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/loader.tsx",
            "comment": {},
            "children": [
                {
                    "id": 10709,
                    "name": "LoaderProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link Loader} component. Also accepts:\n* {@link LoaderStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Loader"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 10712,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the loading spinner."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/loader.tsx",
                                    "line": 51,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10710,
                            "name": "fillColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The color of the loading spinner. Defaults to `'#888'`"
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/loader.tsx",
                                    "line": 47,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        },
                        {
                            "id": 10711,
                            "name": "scale",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "A scalar for the loading spinner. Increasing the scale increases the size of the loading spinner. Defaults to `0.3`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/loader.tsx",
                                    "line": 49,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "number"
                            }
                        },
                        {
                            "id": 10713,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the loading spinner."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/loader.tsx",
                                    "line": 53,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [10712, 10710, 10711, 10713]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/loader.tsx",
                            "line": 45,
                            "character": 21
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "LoaderStyleProps",
                            "id": 10688
                        }
                    ]
                },
                {
                    "id": 10688,
                    "name": "LoaderStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Style props for the {@link Loader} component. Accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link PositionSetProps}"
                    },
                    "children": [
                        {
                            "id": 10693,
                            "name": "alignSelf",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Aligns flex items of the current flex line, overriding the `alignItems` value."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/align_self.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "AlignSelfProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "AlignSelfProps.alignSelf",
                                "id": 7833
                            }
                        },
                        {
                            "id": 10699,
                            "name": "bottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the vertical position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/bottom.ts",
                                    "line": 11,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "BottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "BottomProps.bottom",
                                "id": 7909
                            }
                        },
                        {
                            "id": 10689,
                            "name": "flex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flexGrow`, `flexShrink`, and `flexBasis`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex.ts",
                                    "line": 10,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexProps.flex",
                                "id": 7801
                            }
                        },
                        {
                            "id": 10692,
                            "name": "flexBasis",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the initial main size of a flex item."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex_basis.ts",
                                    "line": 10,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "FlexBasisProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexBasisProps.flexBasis",
                                "id": 7825
                            }
                        },
                        {
                            "id": 10690,
                            "name": "flexGrow",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the flex grow factor of a flex item. If the size of flex items is smaller than the flex container, items grow to fit according to `flexGrow`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex_grow.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalsNumber"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexGrowProps.flexGrow",
                                "id": 7809
                            }
                        },
                        {
                            "id": 10691,
                            "name": "flexShrink",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the flex shrink factor of a flex item. If the size of flex items is larger than the flex container, items shrink to fit according to `flexShrink`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/flex_shrink.ts",
                                    "line": 10,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalsNumber"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "FlexShrinkProps.flexShrink",
                                "id": 7817
                            }
                        },
                        {
                            "id": 10700,
                            "name": "left",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/left.ts",
                                    "line": 11,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "LeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "LeftProps.left",
                                "id": 7920
                            }
                        },
                        {
                            "id": 10702,
                            "name": "margin",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on all four sides of an element. It is a shorthand for `marginTop`, `marginRight`, `marginBottom`, and `marginLeft`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 17,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.margin",
                                "id": 7952
                            }
                        },
                        {
                            "id": 10705,
                            "name": "marginBottom",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 23,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginBottomProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginBottom",
                                "id": 7955
                            }
                        },
                        {
                            "id": 10706,
                            "name": "marginLeft",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the left of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 25,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginLeftProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginLeft",
                                "id": 7956
                            }
                        },
                        {
                            "id": 10704,
                            "name": "marginRight",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the right of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 21,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginRightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginRight",
                                "id": 7954
                            }
                        },
                        {
                            "id": 10703,
                            "name": "marginTop",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 19,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginTopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginTop",
                                "id": 7953
                            }
                        },
                        {
                            "id": 10707,
                            "name": "marginX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the left and right of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 27,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginX",
                                "id": 7957
                            }
                        },
                        {
                            "id": 10708,
                            "name": "marginY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the margin area on the top and bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/spacing/margin.ts",
                                    "line": 29,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "MarginProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "MarginProps.marginY",
                                "id": 7958
                            }
                        },
                        {
                            "id": 10695,
                            "name": "order",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the order to lay out an item in a flex container. Items are sorted by ascending `order` value and then by their source code order."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/flex_item/order.ts",
                                    "line": 10,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalsNumber"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "OrderProps.order",
                                "id": 7849
                            }
                        },
                        {
                            "id": 10696,
                            "name": "position",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/position.ts",
                                    "line": 10,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "PositionProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "PositionProps.position",
                                "id": 7869
                            }
                        },
                        {
                            "id": 10698,
                            "name": "right",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/right.ts",
                                    "line": 11,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "RightProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "RightProps.right",
                                "id": 7898
                            }
                        },
                        {
                            "id": 10697,
                            "name": "top",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Specifies the vertical position of a positioned element. It has no effect on non-positioned elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/top.ts",
                                    "line": 11,
                                    "character": 7
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TopProperty",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Length"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "TopProps.top",
                                "id": 7887
                            }
                        },
                        {
                            "id": 10701,
                            "name": "zIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with larger z-indexes cover those with smaller ones."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/system/position/z_index.ts",
                                    "line": 10,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "ZIndexProperty"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "ZIndexProps.zIndex",
                                "id": 7931
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                10693,
                                10699,
                                10689,
                                10692,
                                10690,
                                10691,
                                10700,
                                10702,
                                10705,
                                10706,
                                10704,
                                10703,
                                10707,
                                10708,
                                10695,
                                10696,
                                10698,
                                10697,
                                10701
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/loader.tsx",
                            "line": 28,
                            "character": 26
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7856
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7940
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7951
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "LoaderProps",
                            "id": 10709
                        }
                    ]
                },
                {
                    "id": 10737,
                    "name": "Loader",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true,
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A loading spinner component.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {Loader} from '@airtable/blocks/ui';\n\nfunction MyDataComponent() {\n    if (myDataHasLoaded) {\n        return <div>Here's your data!</div>;\n    } else {\n        return <Loader />\n    }\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/Loader"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 10738,
                            "name": "Loader",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A loading spinner component."
                            },
                            "parameters": [
                                {
                                    "id": 10739,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "LoaderProps",
                                        "id": 10709
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/loader.tsx",
                            "line": 75,
                            "character": 12
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [10709, 10688]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [10737]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/loader.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 14310,
            "name": "@airtable/blocks/ui: Loading external resources",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/remote_utils.ts",
            "comment": {},
            "children": [
                {
                    "id": 14311,
                    "name": "loadCSSFromString",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Injects CSS from a string into the page.",
                        "returns": "The style tag inserted into the page.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {loadCSSFromString} from '@airtable/blocks/ui';\nloadCSSFromString('body { background: red; }');\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/utils/loadCSSFromString\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14312,
                            "name": "loadCSSFromString",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Injects CSS from a string into the page.",
                                "returns": "The style tag inserted into the page.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {loadCSSFromString} from '@airtable/blocks/ui';\nloadCSSFromString('body { background: red; }');\n```"
                                    },
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/loadCSSFromString\n"
                                    }
                                ]
                            },
                            "parameters": [
                                {
                                    "id": 14313,
                                    "name": "css",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The CSS string."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "HTMLStyleElement"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/remote_utils.ts",
                            "line": 17,
                            "character": 33
                        }
                    ]
                },
                {
                    "id": 14314,
                    "name": "loadCSSFromURLAsync",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Injects CSS from a remote URL.",
                        "returns": "A Promise that resolves to the style tag inserted into the page.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {loadCSSFromURLAsync} from '@airtable/blocks/ui';\nloadCSSFromURLAsync('https://example.com/style.css');\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/utils/loadCSSFromURLAsync\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14315,
                            "name": "loadCSSFromURLAsync",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Injects CSS from a remote URL.",
                                "returns": "A Promise that resolves to the style tag inserted into the page.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {loadCSSFromURLAsync} from '@airtable/blocks/ui';\nloadCSSFromURLAsync('https://example.com/style.css');\n```"
                                    },
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/loadCSSFromURLAsync\n"
                                    }
                                ]
                            },
                            "parameters": [
                                {
                                    "id": 14316,
                                    "name": "url",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The URL of the stylesheet."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Promise",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "HTMLLinkElement"
                                    }
                                ]
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/remote_utils.ts",
                            "line": 40,
                            "character": 35
                        }
                    ]
                },
                {
                    "id": 14317,
                    "name": "loadScriptFromURLAsync",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Injects Javascript from a remote URL.",
                        "returns": "A Promise that resolves to the script tag inserted into the page.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {loadScriptFromURLAsync} from '@airtable/blocks/ui';\nloadScriptFromURLAsync('https://example.com/script.js');\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/utils/loadScriptFromURLAsync\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14318,
                            "name": "loadScriptFromURLAsync",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Injects Javascript from a remote URL.",
                                "returns": "A Promise that resolves to the script tag inserted into the page.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {loadScriptFromURLAsync} from '@airtable/blocks/ui';\nloadScriptFromURLAsync('https://example.com/script.js');\n```"
                                    },
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/loadScriptFromURLAsync\n"
                                    }
                                ]
                            },
                            "parameters": [
                                {
                                    "id": 14319,
                                    "name": "url",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The URL of the script."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Promise",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "HTMLScriptElement"
                                    }
                                ]
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/remote_utils.ts",
                            "line": 73,
                            "character": 38
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [14311, 14314, 14317]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/remote_utils.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 10798,
            "name": "@airtable/blocks/ui: Popover",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/popover.tsx",
            "comment": {},
            "children": [
                {
                    "id": 10805,
                    "name": "FitInWindowModes",
                    "kind": 4,
                    "kindString": "Enumeration",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Dictates how a {@link Popover} or {@link Tooltip} component should be kept within the viewport. Accessed via `Popover.fitInWindowModes` or `Tooltip.fitInWindowModes`."
                    },
                    "children": [
                        {
                            "id": 10807,
                            "name": "FLIP",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "If the popover would be placed offscreen, flip the placement to the other side."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 56,
                                    "character": 8
                                }
                            ],
                            "defaultValue": "\"flip\""
                        },
                        {
                            "id": 10806,
                            "name": "NONE",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Allow the popover to be placed offscreen."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 54,
                                    "character": 8
                                }
                            ],
                            "defaultValue": "\"none\""
                        },
                        {
                            "id": 10808,
                            "name": "NUDGE",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "If the popover would be placed offscreen, nudge the popover just enough so that it stays in the viewport."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 58,
                                    "character": 9
                                }
                            ],
                            "defaultValue": "\"nudge\""
                        }
                    ],
                    "groups": [
                        {
                            "title": "Enumeration members",
                            "kind": 16,
                            "children": [10807, 10806, 10808]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/popover.tsx",
                            "line": 52,
                            "character": 28
                        }
                    ]
                },
                {
                    "id": 10799,
                    "name": "PopoverPlacements",
                    "kind": 4,
                    "kindString": "Enumeration",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Dictates how a {@link Popover} or {@link Tooltip} component should be positioned relative\nto the anchor element. Accessed via `Popover.placements` or `Tooltip.placements`."
                    },
                    "children": [
                        {
                            "id": 10801,
                            "name": "BOTTOM",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Positions the popover below the anchor element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 25,
                                    "character": 10
                                }
                            ],
                            "defaultValue": "\"bottom\""
                        },
                        {
                            "id": 10802,
                            "name": "CENTER",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Positions the popover so it's center aligned with the anchor element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 27,
                                    "character": 10
                                }
                            ],
                            "defaultValue": "\"center\""
                        },
                        {
                            "id": 10803,
                            "name": "LEFT",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Positions the popover left of the anchor element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 29,
                                    "character": 8
                                }
                            ],
                            "defaultValue": "\"left\""
                        },
                        {
                            "id": 10804,
                            "name": "RIGHT",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Positions the popover right of the anchor element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 31,
                                    "character": 9
                                }
                            ],
                            "defaultValue": "\"right\""
                        },
                        {
                            "id": 10800,
                            "name": "TOP",
                            "kind": 16,
                            "kindString": "Enumeration member",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Positions the popover above the anchor element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 23,
                                    "character": 7
                                }
                            ],
                            "defaultValue": "\"top\""
                        }
                    ],
                    "groups": [
                        {
                            "title": "Enumeration members",
                            "kind": 16,
                            "children": [10801, 10802, 10803, 10804, 10800]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/popover.tsx",
                            "line": 21,
                            "character": 29
                        }
                    ]
                },
                {
                    "id": 10825,
                    "name": "Popover",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A popover component, which is used to \"float\" some content above some other content.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Popover"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 10942,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 10943,
                            "name": "SS",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 10975,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/popover.tsx",
                            "line": 102,
                            "character": 13
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Component",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "PopoverProps",
                                    "id": 10809
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 10809,
                    "name": "PopoverProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link Popover} component.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Popover\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 10823,
                            "name": "backgroundClassName",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra class names for the background of the popover, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 91,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10824,
                            "name": "backgroundStyle",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra styles for the background of the popover."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 93,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "FlowAnyObject"
                            }
                        },
                        {
                            "id": 10810,
                            "name": "children",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "Child elements to render."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 73,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ReactElement"
                            }
                        },
                        {
                            "id": 10818,
                            "name": "fitInWindowMode",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "Dictates the behavior when the \"normal\" placement of the popover would be outside of the viewport. Defaults to {@link FitInWindowModes.FLIP}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 85,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "FitInWindowMode",
                                "id": 11006
                            }
                        },
                        {
                            "id": 10822,
                            "name": "isOpen",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "A boolean that dictates whether the popover is open."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 89,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "boolean"
                            }
                        },
                        {
                            "id": 10819,
                            "name": "onClose",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function that will be called when the popover closes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 87,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 10820,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 10821,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10813,
                            "name": "placementOffsetX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The horizontal offset, in pixels, of the popover. If `placementX` is set to {@link PopoverPlacements.LEFT}, a higher number will move the popover to the left. If `placementX` is set to {@link PopoverPlacements.RIGHT}, a higher number moves the popover to the right. If `placementX` is set to {@link PopoverPlacements.CENTER}, this value has no effect. Defaults to 0."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 79,
                                    "character": 20
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "number"
                            }
                        },
                        {
                            "id": 10814,
                            "name": "placementOffsetY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The vertical offset, in pixels, of the popover. If `placementY` is set to {@link PopoverPlacements.TOP}, a higher number will move the popover upward. If `placementY` is set to {@link PopoverPlacements.BOTTOM}, a higher number moves the popover downard. If `placementY` is set to {@link PopoverPlacements.CENTER}, this value has no effect. Defaults to 0."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 81,
                                    "character": 20
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "number"
                            }
                        },
                        {
                            "id": 10811,
                            "name": "placementX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The horizontal placement of the popover. Defaults to {@link PopoverPlacements.RIGHT}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 75,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "PopoverPlacementX",
                                "id": 11004
                            }
                        },
                        {
                            "id": 10812,
                            "name": "placementY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The vertical placement of the popover. Defaults to {@link PopoverPlacements.CENTER}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 77,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "PopoverPlacementY",
                                "id": 11005
                            }
                        },
                        {
                            "id": 10815,
                            "name": "renderContent",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "A function that returns the contents of the popover as React elements."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/popover.tsx",
                                    "line": 83,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reflection",
                                "declaration": {
                                    "id": 10816,
                                    "name": "__type",
                                    "kind": 65536,
                                    "kindString": "Type literal",
                                    "flags": {},
                                    "signatures": [
                                        {
                                            "id": 10817,
                                            "name": "__call",
                                            "kind": 4096,
                                            "kindString": "Call signature",
                                            "flags": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "ReactElement"
                                            }
                                        }
                                    ],
                                    "sources": [
                                        {
                                            "fileName": "src/ui/popover.tsx",
                                            "line": 83,
                                            "character": 18
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                10823,
                                10824,
                                10810,
                                10818,
                                10822,
                                10819,
                                10813,
                                10814,
                                10811,
                                10812,
                                10815
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/popover.tsx",
                            "line": 71,
                            "character": 22
                        }
                    ]
                },
                {
                    "id": 11006,
                    "name": "FitInWindowMode",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Any of the supported {@link FitInWindowModes}."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/popover.tsx",
                            "line": 64,
                            "character": 27
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "reference",
                                "name": "NONE",
                                "id": 10806
                            },
                            {
                                "type": "reference",
                                "name": "FLIP",
                                "id": 10807
                            },
                            {
                                "type": "reference",
                                "name": "NUDGE",
                                "id": 10808
                            }
                        ]
                    }
                },
                {
                    "id": 11004,
                    "name": "PopoverPlacementX",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Any of the supported {@link PopoverPlacements} for horizontal positioning."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/popover.tsx",
                            "line": 36,
                            "character": 29
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "reference",
                                "name": "LEFT",
                                "id": 10803
                            },
                            {
                                "type": "reference",
                                "name": "CENTER",
                                "id": 10802
                            },
                            {
                                "type": "reference",
                                "name": "RIGHT",
                                "id": 10804
                            }
                        ]
                    }
                },
                {
                    "id": 11005,
                    "name": "PopoverPlacementY",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Any of the supported {@link PopoverPlacements} for vertical positioning."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/popover.tsx",
                            "line": 43,
                            "character": 29
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "reference",
                                "name": "TOP",
                                "id": 10800
                            },
                            {
                                "type": "reference",
                                "name": "CENTER",
                                "id": 10802
                            },
                            {
                                "type": "reference",
                                "name": "BOTTOM",
                                "id": 10801
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Enumerations",
                    "kind": 4,
                    "children": [10805, 10799]
                },
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [10825]
                },
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [10809]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [11006, 11004, 11005]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/popover.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 11796,
            "name": "@airtable/blocks/ui: ProgressBar",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/progress_bar.tsx",
            "comment": {},
            "children": [
                {
                    "id": 11824,
                    "name": "ProgressBarProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link ProgressBar} component. Also accepts:\n* {@link ProgressBarStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/ProgressBar"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 11855,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 11825,
                            "name": "barColor",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A CSS color, such as `#ff9900`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/progress_bar.tsx",
                                    "line": 102,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11827,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra `className`s to apply to the element, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/progress_bar.tsx",
                                    "line": 106,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11826,
                            "name": "progress",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "A number between 0 and 1. 0 is 0% complete, 0.5 is 50% complete, 1 is 100% complete. If you include a number outside of the range, the value will be clamped to be inside of the range."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/progress_bar.tsx",
                                    "line": 104,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "number"
                            }
                        },
                        {
                            "id": 11828,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Extra styles to apply to the progress bar."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/progress_bar.tsx",
                                    "line": 108,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [11825, 11827, 11826, 11828]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/progress_bar.tsx",
                            "line": 100,
                            "character": 26
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "ProgressBarStyleProps",
                            "id": 11797
                        },
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps"
                        }
                    ]
                },
                {
                    "id": 11797,
                    "name": "ProgressBarStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Style props for the {@link ProgressBar} component. Also accepts:\n* {@link BackgroundColorProps}\n* {@link FlexItemSetProps}\n* {@link HeightProps}\n* {@link MarginProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link WidthProps}"
                    },
                    "children": [
                        {
                            "id": 11798,
                            "name": "display",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/progress_bar.tsx",
                                    "line": 65,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "stringLiteral",
                                                "value": "block"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "inline"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "inline-block"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [11798]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/progress_bar.tsx",
                            "line": 55,
                            "character": 31
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "BackgroundColorProps",
                            "id": 7565
                        },
                        {
                            "type": "reference",
                            "name": "MaxWidthProps",
                            "id": 7690
                        },
                        {
                            "type": "reference",
                            "name": "MinWidthProps",
                            "id": 7710
                        },
                        {
                            "type": "reference",
                            "name": "WidthProps",
                            "id": 7720
                        },
                        {
                            "type": "reference",
                            "name": "HeightProps",
                            "id": 7670
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7856
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7940
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7951
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "ProgressBarProps",
                            "id": 11824
                        }
                    ]
                },
                {
                    "id": 11871,
                    "name": "ProgressBar",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true,
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A progress bar.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {UI} from '@airtable/blocks/ui';\n\nfunction MyComponent() {\n    return (\n        <ProgressBar\n            progress={0.6}\n            barColor='#ff9900'\n        />\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/ProgressBar"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 11872,
                            "name": "ProgressBar",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A progress bar."
                            },
                            "parameters": [
                                {
                                    "id": 11873,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "ProgressBarProps",
                                        "id": 11824
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/progress_bar.tsx",
                            "line": 130,
                            "character": 17
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [11824, 11797]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [11871]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/progress_bar.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 12041,
            "name": "@airtable/blocks/ui: RecordCard",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/record_card.tsx",
            "comment": {},
            "children": [
                {
                    "id": 12112,
                    "name": "RecordCard",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A card component that displays an Airtable record.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {RecordCard} from '@airtable/blocks/ui';\nimport React from 'react';\n\nfunction Block() {\n    const base = useBase();\n    const table = base.getTableByName('Table 1');\n    const fields = table ? table.fields : null;\n    const queryResult = table ? table.selectRecords() : null;\n    const records = useRecords(queryResult);\n\n    return (\n        <RecordCard\n            record={records[0]}\n            fields={fields}\n            expandRecordOptions={{records}}\n        />\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/RecordCard"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 12188,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 12189,
                            "name": "SS",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 12230,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/record_card.tsx",
                            "line": 250,
                            "character": 23
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Component",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "RecordCardProps",
                                    "id": 12068
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 12068,
                    "name": "RecordCardProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link RecordCard} component. Also accepts:\n* {@link RecordCardStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/RecordCard\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 12071,
                            "name": "attachmentCoverField",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Attachment field to display as an image in the square preview for the card. If omitted or not an attachment field, it uses for the first attachment field in `fields`. If `fields` is not defined, it uses the first attachment field in the view."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card.tsx",
                                    "line": 136,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Field",
                                "id": 1927
                            }
                        },
                        {
                            "id": 12089,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the record card."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card.tsx",
                                    "line": 156,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12074,
                            "name": "expandRecordOptions",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Options object for expanding a record."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card.tsx",
                                    "line": 142,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "ExpandRecordOpts",
                                        "id": 10489
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12075,
                            "name": "fields",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Fields to display in the card. The primary field is always displayed."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card.tsx",
                                    "line": 144,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "Field",
                                        "id": 1927
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12073,
                            "name": "height",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Height of the record card."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card.tsx",
                                    "line": 140,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12084,
                            "name": "onClick",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Click event handler for the record card. If undefined, uses default behavior to expand record. If null, no operation is performed."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card.tsx",
                                    "line": 152,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 12085,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 12086,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 12087,
                                                            "name": "e",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "reference",
                                                                "name": "MouseEvent",
                                                                "typeArguments": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "HTMLAnchorElement"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ],
                                            "sources": [
                                                {
                                                    "fileName": "src/ui/record_card.tsx",
                                                    "line": 152,
                                                    "character": 13
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12076,
                            "name": "onMouseEnter",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Mouse enter event handler for the record card."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card.tsx",
                                    "line": 147,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 12077,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 12078,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 12079,
                                                            "name": "e",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "reference",
                                                                "name": "MouseEvent",
                                                                "typeArguments": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "HTMLAnchorElement"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ],
                                            "sources": [
                                                {
                                                    "fileName": "src/ui/record_card.tsx",
                                                    "line": 147,
                                                    "character": 18
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12080,
                            "name": "onMouseLeave",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Mouse leave event handler for the record card."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card.tsx",
                                    "line": 149,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 12081,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 12082,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 12083,
                                                            "name": "e",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "reference",
                                                                "name": "MouseEvent",
                                                                "typeArguments": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "HTMLAnchorElement"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ],
                                            "sources": [
                                                {
                                                    "fileName": "src/ui/record_card.tsx",
                                                    "line": 149,
                                                    "character": 18
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12069,
                            "name": "record",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "Record to display in the card."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card.tsx",
                                    "line": 132,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Record",
                                        "id": 1779
                                    },
                                    {
                                        "type": "reference",
                                        "name": "RecordDef",
                                        "id": 646
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12090,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the record card."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card.tsx",
                                    "line": 158,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 12070,
                            "name": "view",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The view model to use for field order and record coloring."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card.tsx",
                                    "line": 134,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "View",
                                "id": 2280
                            }
                        },
                        {
                            "id": 12072,
                            "name": "width",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Width of the record card."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card.tsx",
                                    "line": 138,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                12071,
                                12089,
                                12074,
                                12075,
                                12073,
                                12084,
                                12076,
                                12080,
                                12069,
                                12090,
                                12070,
                                12072
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/record_card.tsx",
                            "line": 130,
                            "character": 25
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "RecordCardStyleProps",
                            "id": 12042
                        }
                    ]
                },
                {
                    "id": 12042,
                    "name": "RecordCardStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Style props for the {@link RecordCard} component. Accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link PositionSetProps}"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/record_card.tsx",
                            "line": 59,
                            "character": 30
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7856
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7940
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7951
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "RecordCardProps",
                            "id": 12068
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [12112]
                },
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [12068, 12042]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/record_card.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 12288,
            "name": "@airtable/blocks/ui: RecordCardList",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/record_card_list.tsx",
            "comment": {},
            "children": [
                {
                    "id": 12384,
                    "name": "RecordCardList",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Scrollable list of record cards.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {RecordCardList} from '@airtable/blocks/ui';\nimport React, {useState} from 'react';\n\nfunction Block() {\n    const base = useBase();\n    const [selectedRecord, setSelectedRecord] = useState(null);\n    const table = base.getTableByName('Table 1');\n    const view = table ? table.getViewByName('View 1') : null;\n    const queryResult = table ? table.selectRecords() : null;\n    const records = useRecords(queryResult);\n\n    return (\n        <RecordCardList\n            records={records}\n            view={view}\n            onRecordClick={record => {setSelectedRecord(record)}}\n        />\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/RecordCardList"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 12451,
                            "name": "SS",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/record_card_list.tsx",
                            "line": 300,
                            "character": 27
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Component",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "RecordCardListProps",
                                    "id": 12327
                                },
                                {
                                    "type": "reference",
                                    "name": "RecordCardListState"
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 12327,
                    "name": "RecordCardListProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link RecordCardList} component. Also accepts:\n* {@link RecordCardListStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/RecordCardList\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 12350,
                            "name": "attachmentCoverField",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Attachment field to display as an image in the square preview for each record card. If omitted or not an attachment field, it uses for the first attachment field in `fields`. If `fields` is not defined, it uses the first attachment field in the view."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 234,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Field",
                                "id": 1927
                            }
                        },
                        {
                            "id": 12351,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the record card list."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 236,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12348,
                            "name": "fields",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Fields to display in each record card. The primary field is always displayed."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 230,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "Field",
                                        "id": 1927
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12333,
                            "name": "onRecordClick",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Click event handler for an individual record card. If undefined, uses default behavior to expand record. If null, no operation is performed."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 224,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 12334,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 12335,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 12336,
                                                            "name": "record",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "Record",
                                                                        "id": 1779
                                                                    },
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "RecordDef",
                                                                        "id": 646
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "id": 12337,
                                                            "name": "index",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "number"
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ],
                                            "sources": [
                                                {
                                                    "fileName": "src/ui/record_card_list.tsx",
                                                    "line": 224,
                                                    "character": 26
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12338,
                            "name": "onRecordMouseEnter",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Mouse enter event handler for an individual record card."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 226,
                                    "character": 22
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 12339,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 12340,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 12341,
                                                            "name": "record",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "Record",
                                                                        "id": 1779
                                                                    },
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "RecordDef",
                                                                        "id": 646
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "id": 12342,
                                                            "name": "index",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "number"
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12343,
                            "name": "onRecordMouseLeave",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Mouse leave event handler for an individual record card."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 228,
                                    "character": 22
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 12344,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 12345,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 12346,
                                                            "name": "record",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "Record",
                                                                        "id": 1779
                                                                    },
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "RecordDef",
                                                                        "id": 646
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "id": 12347,
                                                            "name": "index",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "number"
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12329,
                            "name": "onScroll",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Scroll event handler for the list window."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 222,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 12330,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 12331,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 12332,
                                                            "name": "scrollEvent",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "reference",
                                                                "name": "RecordCardListScrollEvent",
                                                                "id": 12323
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12328,
                            "name": "records",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "Records to display in card list."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 220,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Record",
                                                "id": 1779
                                            }
                                        ]
                                    },
                                    {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "RecordDef",
                                                "id": 646
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12352,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the record card list."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 238,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 12349,
                            "name": "view",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The view model to use for field order and record coloring."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 232,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "View",
                                "id": 2280
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                12350,
                                12351,
                                12348,
                                12333,
                                12338,
                                12343,
                                12329,
                                12328,
                                12352,
                                12349
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/record_card_list.tsx",
                            "line": 218,
                            "character": 29
                        }
                    ]
                },
                {
                    "id": 12323,
                    "name": "RecordCardListScrollEvent",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Scroll event for {@link RecordCardList}."
                    },
                    "children": [
                        {
                            "id": 12324,
                            "name": "scrollDirection",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The direction of the scroll event."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 203,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "stringLiteral",
                                        "value": "forward"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "backward"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12325,
                            "name": "scrollOffset",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The vertical offset of the scrollable area."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 205,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "number"
                            }
                        },
                        {
                            "id": 12326,
                            "name": "scrollUpdateWasRequested",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "`true` for programmatic scrolling and `false` if the scroll was the result of a user interaction in the browser."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/record_card_list.tsx",
                                    "line": 207,
                                    "character": 28
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "boolean"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [12324, 12325, 12326]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/record_card_list.tsx",
                            "line": 201,
                            "character": 35
                        }
                    ]
                },
                {
                    "id": 12353,
                    "name": "RecordCardListStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Style props for the {@link RecordCardList} component. Accepts:\n* {@link DimensionsSetProps}\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link PositionSetProps}"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/record_card_list.tsx",
                            "line": 250,
                            "character": 34
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "DimensionsSetProps",
                            "id": 7730
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7856
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7940
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7951
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [12384]
                },
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [12327, 12323, 12353]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/record_card_list.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 9087,
            "name": "@airtable/blocks/ui: Select",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/select_and_select_buttons_helpers.ts",
            "comment": {},
            "children": [
                {
                    "id": 9088,
                    "name": "SelectOption",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A select option for {@link Select}, {@link TablePicker}, {@link ViewPicker}, {@link FieldPicker}, and their `Synced` counterparts."
                    },
                    "children": [
                        {
                            "id": 9091,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, this option will not be selectable."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_and_select_buttons_helpers.ts",
                                    "line": 32,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9090,
                            "name": "label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The label for the select option."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_and_select_buttons_helpers.ts",
                                    "line": 30,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.ReactNode"
                            }
                        },
                        {
                            "id": 9089,
                            "name": "value",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The value for the select option."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_and_select_buttons_helpers.ts",
                                    "line": 28,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "SelectOptionValue",
                                "id": 9092
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [9091, 9090, 9089]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select_and_select_buttons_helpers.ts",
                            "line": 26,
                            "character": 29
                        }
                    ]
                },
                {
                    "id": 9277,
                    "name": "SelectProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props for the {@link Select} component. Also accepts:\n* {@link SelectStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Select\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 9294,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-describedby']",
                                "id": 9185
                            }
                        },
                        {
                            "id": 9292,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-label']",
                                "id": 9183
                            }
                        },
                        {
                            "id": 9293,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-labelledby']",
                                "id": 9184
                            }
                        },
                        {
                            "id": 9286,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.autoFocus",
                                "id": 9177
                            }
                        },
                        {
                            "id": 9285,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.className",
                                "id": 9176
                            }
                        },
                        {
                            "id": 9290,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.disabled",
                                "id": 9181
                            }
                        },
                        {
                            "id": 9287,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.id",
                                "id": 9178
                            }
                        },
                        {
                            "id": 9288,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.name",
                                "id": 9179
                            }
                        },
                        {
                            "id": 9280,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected option changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 156,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 9281,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 9282,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 9283,
                                                            "name": "value",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "reference",
                                                                "name": "SelectOptionValue",
                                                                "id": 9092
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectProps.onChange",
                                "id": 9225
                            }
                        },
                        {
                            "id": 9279,
                            "name": "options",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The list of select options."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 154,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "SelectOption",
                                        "id": 9088
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectProps.options",
                                "id": 9224
                            }
                        },
                        {
                            "id": 9284,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9130
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.size",
                                "id": 9175
                            }
                        },
                        {
                            "id": 9291,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.style",
                                "id": 9182
                            }
                        },
                        {
                            "id": 9289,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.tabIndex",
                                "id": 9180
                            }
                        },
                        {
                            "id": 9278,
                            "name": "value",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The value of the selected option."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 181,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "SelectOptionValue",
                                "id": 9092
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                9294,
                                9292,
                                9293,
                                9286,
                                9285,
                                9290,
                                9287,
                                9288,
                                9280,
                                9279,
                                9284,
                                9291,
                                9289,
                                9278
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select.tsx",
                            "line": 179,
                            "character": 28
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedSelectProps",
                            "id": 9223
                        }
                    ]
                },
                {
                    "id": 9149,
                    "name": "SelectStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Style props shared between the following components.\n* {@link Select}, {@link SelectSynced}\n* {@link TablePicker}, {@link TablePickerSynced}\n* {@link ViewPicker}, {@link ViewPickerSynced}\n* {@link FieldPicker}, {@link FieldPickerSynced}",
                        "text": "Also accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link MaxWidthProps}\n"
                    },
                    "children": [
                        {
                            "id": 9150,
                            "name": "display",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 84,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "stringLiteral",
                                                "value": "inline-flex"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "flex"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "none"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [9150]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select.tsx",
                            "line": 76,
                            "character": 26
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "MaxWidthProps",
                            "id": 7690
                        },
                        {
                            "type": "reference",
                            "name": "MinWidthProps",
                            "id": 7710
                        },
                        {
                            "type": "reference",
                            "name": "WidthProps",
                            "id": 7720
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7856
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7940
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7951
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "SharedSelectBaseProps",
                            "id": 9174
                        }
                    ]
                },
                {
                    "id": 12536,
                    "name": "SelectSyncedProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link SelectSynced} component. Also accepts:\n* {@link SelectStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/SelectSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/Select\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 12553,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-describedby']",
                                "id": 9185
                            }
                        },
                        {
                            "id": 12551,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-label']",
                                "id": 9183
                            }
                        },
                        {
                            "id": 12552,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-labelledby']",
                                "id": 9184
                            }
                        },
                        {
                            "id": 12545,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.autoFocus",
                                "id": 9177
                            }
                        },
                        {
                            "id": 12544,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.className",
                                "id": 9176
                            }
                        },
                        {
                            "id": 12549,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.disabled",
                                "id": 9181
                            }
                        },
                        {
                            "id": 12537,
                            "name": "globalConfigKey",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "A string key or array key path in {@link GlobalConfig}. The selected option will always reflect the value stored in {@link GlobalConfig} for this key. Selecting a new option will update {@link GlobalConfig}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_synced.tsx",
                                    "line": 18,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "GlobalConfigKey",
                                "id": 14893
                            }
                        },
                        {
                            "id": 12546,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.id",
                                "id": 9178
                            }
                        },
                        {
                            "id": 12547,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.name",
                                "id": 9179
                            }
                        },
                        {
                            "id": 12539,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected option changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 156,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 12540,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 12541,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 12542,
                                                            "name": "value",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "reference",
                                                                "name": "SelectOptionValue",
                                                                "id": 9092
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectProps.onChange",
                                "id": 9225
                            }
                        },
                        {
                            "id": 12538,
                            "name": "options",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The list of select options."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 154,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "SelectOption",
                                        "id": 9088
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectProps.options",
                                "id": 9224
                            }
                        },
                        {
                            "id": 12543,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9130
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.size",
                                "id": 9175
                            }
                        },
                        {
                            "id": 12550,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.style",
                                "id": 9182
                            }
                        },
                        {
                            "id": 12548,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.tabIndex",
                                "id": 9180
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                12553,
                                12551,
                                12552,
                                12545,
                                12544,
                                12549,
                                12537,
                                12546,
                                12547,
                                12539,
                                12538,
                                12543,
                                12550,
                                12548
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select_synced.tsx",
                            "line": 16,
                            "character": 27
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedSelectProps",
                            "id": 9223
                        }
                    ]
                },
                {
                    "id": 9174,
                    "name": "SharedSelectBaseProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props shared between the following components:\n* {@link Select}, {@link SelectSynced}\n* {@link TablePicker}, {@link TablePickerSynced}\n* {@link ViewPicker}, {@link ViewPickerSynced}\n* {@link FieldPicker}, {@link FieldPickerSynced}"
                    },
                    "children": [
                        {
                            "id": 9185,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9183,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9184,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9177,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9176,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9181,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9178,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9179,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9175,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9130
                            }
                        },
                        {
                            "id": 9182,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 9180,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                9185,
                                9183,
                                9184,
                                9177,
                                9176,
                                9181,
                                9178,
                                9179,
                                9175,
                                9182,
                                9180
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select.tsx",
                            "line": 96,
                            "character": 38
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "HTMLSelectElement"
                                }
                            ]
                        },
                        {
                            "type": "reference",
                            "name": "SelectStyleProps",
                            "id": 9149
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "SharedSelectProps",
                            "id": 9223
                        },
                        {
                            "type": "reference",
                            "name": "SharedTablePickerProps",
                            "id": 9438
                        },
                        {
                            "type": "reference",
                            "name": "SharedFieldPickerProps",
                            "id": 9638
                        },
                        {
                            "type": "reference",
                            "name": "SharedViewPickerProps",
                            "id": 9832
                        }
                    ]
                },
                {
                    "id": 9223,
                    "name": "SharedSelectProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props shared between the {@link Select} and {@link SelectSynced} components."
                    },
                    "children": [
                        {
                            "id": 9239,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-describedby']",
                                "id": 9185
                            }
                        },
                        {
                            "id": 9237,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-label']",
                                "id": 9183
                            }
                        },
                        {
                            "id": 9238,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-labelledby']",
                                "id": 9184
                            }
                        },
                        {
                            "id": 9231,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.autoFocus",
                                "id": 9177
                            }
                        },
                        {
                            "id": 9230,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.className",
                                "id": 9176
                            }
                        },
                        {
                            "id": 9235,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.disabled",
                                "id": 9181
                            }
                        },
                        {
                            "id": 9232,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.id",
                                "id": 9178
                            }
                        },
                        {
                            "id": 9233,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.name",
                                "id": 9179
                            }
                        },
                        {
                            "id": 9225,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected option changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 156,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 9226,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 9227,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 9228,
                                                            "name": "value",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "reference",
                                                                "name": "SelectOptionValue",
                                                                "id": 9092
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9224,
                            "name": "options",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The list of select options."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 154,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "SelectOption",
                                        "id": 9088
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9229,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9130
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.size",
                                "id": 9175
                            }
                        },
                        {
                            "id": 9236,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.style",
                                "id": 9182
                            }
                        },
                        {
                            "id": 9234,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.tabIndex",
                                "id": 9180
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                9239,
                                9237,
                                9238,
                                9231,
                                9230,
                                9235,
                                9232,
                                9233,
                                9225,
                                9224,
                                9229,
                                9236,
                                9234
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select.tsx",
                            "line": 152,
                            "character": 34
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedSelectBaseProps",
                            "id": 9174
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "SelectProps",
                            "id": 9277
                        },
                        {
                            "type": "reference",
                            "name": "SelectSyncedProps",
                            "id": 12536
                        }
                    ]
                },
                {
                    "id": 9092,
                    "name": "SelectOptionValue",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Supported value types for {@link SelectOption}."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/select_and_select_buttons_helpers.ts",
                            "line": 10,
                            "character": 29
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "intrinsic",
                                "name": "string"
                            },
                            {
                                "type": "intrinsic",
                                "name": "number"
                            },
                            {
                                "type": "intrinsic",
                                "name": "boolean"
                            },
                            {
                                "type": "intrinsic",
                                "name": "null"
                            },
                            {
                                "type": "intrinsic",
                                "name": "undefined"
                            }
                        ]
                    }
                },
                {
                    "id": 9361,
                    "name": "Select",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "Dropdown menu component. A wrapper around `<select>` that fits in with Airtable's user interface.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {Select} from '@airtable/blocks/ui';\nimport React, {useState} from 'react';\n\nfunction ColorPicker() {\n    const [value, setValue] = useState(null);\n    return (\n        <label>\n            <div style={{marginBottom: 8, fontWeight: 500}}>Color</div>\n            <Select\n                onChange={newValue => setValue(newValue)}\n                value={value}\n                options={[\n                    {value: null, label: 'Pick a color...', disabled: true},\n                    {value: 'red', label: 'red'},\n                    {value: 'green', label: 'green'},\n                    {value: 'blue', label: 'blue'},\n                ]}\n            />\n        </label>\n    );\n}\n```"
                            },
                            {
                                "tag": "component",
                                "text": ""
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/Select\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 9362,
                            "name": "Select",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Dropdown menu component. A wrapper around `<select>` that fits in with Airtable's user interface."
                            },
                            "parameters": [
                                {
                                    "id": 9363,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "SelectProps",
                                        "id": 9277
                                    }
                                },
                                {
                                    "id": 9364,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLSelectElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select.tsx",
                            "line": 216,
                            "character": 12
                        }
                    ]
                },
                {
                    "id": 12591,
                    "name": "SelectSynced",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A wrapper around the {@link Select} component that syncs with {@link GlobalConfig}.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {SelectSynced} from '@airtable/blocks/ui';\nimport React from 'react';\n\nfunction ColorPickerSynced() {\n    return (\n        <label>\n            <div style={{marginBottom: 8, fontWeight: 500}}>Color</div>\n            <SelectSynced\n                globalConfigKey='color'\n                options={[\n                    {value: null, label: 'Pick a color...', disabled: true},\n                    {value: 'red', label: 'red'},\n                    {value: 'green', label: 'green'},\n                    {value: 'blue', label: 'blue'},\n                ]}\n            />\n        </label>\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/SelectSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/Select"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 12592,
                            "name": "SelectSynced",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A wrapper around the {@link Select} component that syncs with {@link GlobalConfig}."
                            },
                            "parameters": [
                                {
                                    "id": 12593,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "SelectSyncedProps",
                                        "id": 12536
                                    }
                                },
                                {
                                    "id": 12594,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLSelectElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select_synced.tsx",
                            "line": 50,
                            "character": 18
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [9088, 9277, 9149, 12536, 9174, 9223]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [9092]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [9361, 12591]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/select_and_select_buttons_helpers.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 12596,
            "name": "@airtable/blocks/ui: SelectButtons",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/select_buttons.tsx",
            "comment": {},
            "children": [
                {
                    "id": 12671,
                    "name": "SelectButtonsProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link SelectButtons} component. Also accepts:\n* {@link SelectButtonsStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/SelectButtons\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 12708,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 12684,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 109,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.['aria-describedby']",
                                "id": 12633
                            }
                        },
                        {
                            "id": 12682,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 105,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.['aria-label']",
                                "id": 12631
                            }
                        },
                        {
                            "id": 12683,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 107,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.['aria-labelledby']",
                                "id": 12632
                            }
                        },
                        {
                            "id": 12679,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 99,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.className",
                                "id": 12628
                            }
                        },
                        {
                            "id": 12678,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 97,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.disabled",
                                "id": 12627
                            }
                        },
                        {
                            "id": 12674,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected option changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 95,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 12675,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 12676,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 12677,
                                                            "name": "value",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "reference",
                                                                "name": "SelectOptionValue",
                                                                "id": 9092
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.onChange",
                                "id": 12623
                            }
                        },
                        {
                            "id": 12673,
                            "name": "options",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The list of select options."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 93,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "SelectOption",
                                        "id": 9088
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.options",
                                "id": 12622
                            }
                        },
                        {
                            "id": 12680,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select buttons."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 101,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9130
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.size",
                                "id": 12629
                            }
                        },
                        {
                            "id": 12681,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 103,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.style",
                                "id": 12630
                            }
                        },
                        {
                            "id": 12672,
                            "name": "value",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The value of the selected option."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 141,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "SelectOptionValue",
                                "id": 9092
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                12684,
                                12682,
                                12683,
                                12679,
                                12678,
                                12674,
                                12673,
                                12680,
                                12681,
                                12672
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select_buttons.tsx",
                            "line": 139,
                            "character": 28
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedSelectButtonsProps",
                            "id": 12621
                        }
                    ]
                },
                {
                    "id": 12597,
                    "name": "SelectButtonsStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props shared between the {@link SelectButtons} and {@link SelectButtonsSynced} components. Accepts:\n* {@link FlexItemSetProps}\n* {@link MarginProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link WidthProps}"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/select_buttons.tsx",
                            "line": 67,
                            "character": 40
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "MaxWidthProps",
                            "id": 7690
                        },
                        {
                            "type": "reference",
                            "name": "MinWidthProps",
                            "id": 7710
                        },
                        {
                            "type": "reference",
                            "name": "WidthProps",
                            "id": 7720
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7856
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7940
                        },
                        {
                            "type": "reference",
                            "name": "MarginProps",
                            "id": 7951
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "SharedSelectButtonsProps",
                            "id": 12621
                        }
                    ]
                },
                {
                    "id": 12754,
                    "name": "SelectButtonsSyncedProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link SelectButtonsSynced} component. Also accepts:\n* {@link SelectButtonsStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/SelectButtonsSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/SelectButtons\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 12791,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 12767,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 109,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.['aria-describedby']",
                                "id": 12633
                            }
                        },
                        {
                            "id": 12765,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 105,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.['aria-label']",
                                "id": 12631
                            }
                        },
                        {
                            "id": 12766,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 107,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.['aria-labelledby']",
                                "id": 12632
                            }
                        },
                        {
                            "id": 12762,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 99,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.className",
                                "id": 12628
                            }
                        },
                        {
                            "id": 12761,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 97,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.disabled",
                                "id": 12627
                            }
                        },
                        {
                            "id": 12755,
                            "name": "globalConfigKey",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "A string key or array key path in {@link GlobalConfig}. The selected option will always reflect the value stored in {@link GlobalConfig} for this key. Selecting a new option will update {@link GlobalConfig}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons_synced.tsx",
                                    "line": 21,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "GlobalConfigKey",
                                "id": 14893
                            }
                        },
                        {
                            "id": 12757,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected option changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 95,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 12758,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 12759,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 12760,
                                                            "name": "value",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "reference",
                                                                "name": "SelectOptionValue",
                                                                "id": 9092
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.onChange",
                                "id": 12623
                            }
                        },
                        {
                            "id": 12756,
                            "name": "options",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The list of select options."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 93,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "SelectOption",
                                        "id": 9088
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.options",
                                "id": 12622
                            }
                        },
                        {
                            "id": 12763,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select buttons."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 101,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9130
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.size",
                                "id": 12629
                            }
                        },
                        {
                            "id": 12764,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 103,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectButtonsProps.style",
                                "id": 12630
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                12767,
                                12765,
                                12766,
                                12762,
                                12761,
                                12755,
                                12757,
                                12756,
                                12763,
                                12764
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select_buttons_synced.tsx",
                            "line": 19,
                            "character": 34
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedSelectButtonsProps",
                            "id": 12621
                        }
                    ]
                },
                {
                    "id": 12621,
                    "name": "SharedSelectButtonsProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props shared between the {@link SelectButtons} and {@link SelectButtonsSynced} components."
                    },
                    "typeParameter": [
                        {
                            "id": 12657,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 12633,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 109,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12631,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 105,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12632,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 107,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12628,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 99,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12627,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 97,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12623,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected option changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 95,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 12624,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 12625,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 12626,
                                                            "name": "value",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "reference",
                                                                "name": "SelectOptionValue",
                                                                "id": 9092
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12622,
                            "name": "options",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The list of select options."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 93,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "SelectOption",
                                        "id": 9088
                                    }
                                ]
                            }
                        },
                        {
                            "id": 12629,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select buttons."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 101,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9130
                            }
                        },
                        {
                            "id": 12630,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select_buttons.tsx",
                                    "line": 103,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                12633,
                                12631,
                                12632,
                                12628,
                                12627,
                                12623,
                                12622,
                                12629,
                                12630
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select_buttons.tsx",
                            "line": 91,
                            "character": 41
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SelectButtonsStyleProps",
                            "id": 12597
                        },
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps"
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "SelectButtonsProps",
                            "id": 12671
                        },
                        {
                            "type": "reference",
                            "name": "SelectButtonsSyncedProps",
                            "id": 12754
                        }
                    ]
                },
                {
                    "id": 12748,
                    "name": "SelectButtons",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": " A segmented control for selecting one value from a set of options.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {SelectButtons} from '@airtable/blocks/ui';\nimport React from 'react';\n\nfunction ChartTypePicker() {\n    const [chartType, setChartType] = useState('bar');\n    return (\n        <SelectButtons\n            value={chartType}\n            options={[\n                {value: 'bar', label: 'Bar'},\n                {value: 'line', label: 'Line'},\n                {value: 'scatter', label: 'Scatter'},\n            ]}\n            onChange={setChartType}\n        />\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/SelectButtons"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 12749,
                            "name": "SelectButtons",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": " A segmented control for selecting one value from a set of options."
                            },
                            "parameters": [
                                {
                                    "id": 12750,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "SelectButtonsProps",
                                        "id": 12671
                                    }
                                },
                                {
                                    "id": 12751,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLDivElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select_buttons.tsx",
                            "line": 170,
                            "character": 19
                        }
                    ]
                },
                {
                    "id": 12805,
                    "name": "SelectButtonsSynced",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": " A wrapper around the {@link SelectButtons} component that syncs with {@link GlobalConfig}.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {SelectButtonsSynced} from '@airtable/blocks/ui';\nimport React from 'react';\n\nfunction ChartTypePicker() {\n    return (\n        <SelectButtonsSynced\n            globalConfigKey=\"chartType\"\n            options={[\n                {value: 'bar', label: 'Bar'},\n                {value: 'line', label: 'Line'},\n                {value: 'scatter', label: 'Scatter'},\n            ]}\n        />\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/SelectButtonsSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/SelectButtons"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 12806,
                            "name": "SelectButtonsSynced",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": " A wrapper around the {@link SelectButtons} component that syncs with {@link GlobalConfig}."
                            },
                            "parameters": [
                                {
                                    "id": 12807,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "SelectButtonsSyncedProps",
                                        "id": 12754
                                    }
                                },
                                {
                                    "id": 12808,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLDivElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/select_buttons_synced.tsx",
                            "line": 49,
                            "character": 25
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [12671, 12597, 12754, 12621]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [12748, 12805]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/select_buttons.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 13437,
            "name": "@airtable/blocks/ui: Switch",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/switch.tsx",
            "comment": {},
            "children": [
                {
                    "id": 13438,
                    "name": "SharedSwitchProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props shared between the {@link Switch} and {@link SwitchSynced} components."
                    },
                    "typeParameter": [
                        {
                            "id": 13454,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 13453,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 88,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13451,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The label for the switch. Use this if the switch lacks a visible text label."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 84,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13452,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 86,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13439,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the switch."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 66,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13440,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the switch."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 68,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13449,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The ID of the switch element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 80,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13441,
                            "name": "label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The label node for the switch."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 70,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "React.ReactNode"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13442,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the switch is toggled."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 72,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 13443,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 13444,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 13445,
                                                            "name": "newValue",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "boolean"
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13448,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the switch. Defaults to `default`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 78,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9130
                            }
                        },
                        {
                            "id": 13450,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the switch."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 82,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 13446,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Indicates if the switch can be focused and if/where it participates in sequential keyboard navigation."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 74,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13447,
                            "name": "variant",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The variant of the switch. Defaults to `default` (green)."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 76,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "SwitchVariant",
                                "id": 13596
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                13453,
                                13451,
                                13452,
                                13439,
                                13440,
                                13449,
                                13441,
                                13442,
                                13448,
                                13450,
                                13446,
                                13447
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/switch.tsx",
                            "line": 64,
                            "character": 34
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps"
                        },
                        {
                            "type": "reference",
                            "name": "SwitchStyleProps",
                            "id": 13563
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "SwitchProps",
                            "id": 13500
                        },
                        {
                            "type": "reference",
                            "name": "SwitchSyncedProps",
                            "id": 13630
                        }
                    ]
                },
                {
                    "id": 13500,
                    "name": "SwitchProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link Switch} component. Also accepts:\n* {@link SwitchStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Switch\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 13517,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 13516,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 88,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.['aria-describedby']",
                                "id": 13453
                            }
                        },
                        {
                            "id": 13514,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The label for the switch. Use this if the switch lacks a visible text label."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 84,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.['aria-label']",
                                "id": 13451
                            }
                        },
                        {
                            "id": 13515,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 86,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.['aria-labelledby']",
                                "id": 13452
                            }
                        },
                        {
                            "id": 13502,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the switch."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 66,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.className",
                                "id": 13439
                            }
                        },
                        {
                            "id": 13503,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the switch."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 68,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.disabled",
                                "id": 13440
                            }
                        },
                        {
                            "id": 13512,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The ID of the switch element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 80,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.id",
                                "id": 13449
                            }
                        },
                        {
                            "id": 13504,
                            "name": "label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The label node for the switch."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 70,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "React.ReactNode"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.label",
                                "id": 13441
                            }
                        },
                        {
                            "id": 13505,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the switch is toggled."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 72,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 13506,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 13507,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 13508,
                                                            "name": "newValue",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "boolean"
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.onChange",
                                "id": 13442
                            }
                        },
                        {
                            "id": 13511,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the switch. Defaults to `default`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 78,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9130
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.size",
                                "id": 13448
                            }
                        },
                        {
                            "id": 13513,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the switch."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 82,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.style",
                                "id": 13450
                            }
                        },
                        {
                            "id": 13509,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Indicates if the switch can be focused and if/where it participates in sequential keyboard navigation."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 74,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.tabIndex",
                                "id": 13446
                            }
                        },
                        {
                            "id": 13501,
                            "name": "value",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "If set to `true`, the switch will be switchd on."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 99,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "boolean"
                            }
                        },
                        {
                            "id": 13510,
                            "name": "variant",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The variant of the switch. Defaults to `default` (green)."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 76,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "SwitchVariant",
                                "id": 13596
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.variant",
                                "id": 13447
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                13516,
                                13514,
                                13515,
                                13502,
                                13503,
                                13512,
                                13504,
                                13505,
                                13511,
                                13513,
                                13509,
                                13501,
                                13510
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/switch.tsx",
                            "line": 97,
                            "character": 21
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedSwitchProps",
                            "id": 13438
                        }
                    ]
                },
                {
                    "id": 13563,
                    "name": "SwitchStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props for the {@link Switch} component. Also accepts:\n* {@link BackgroundColorProps}\n* {@link FlexItemSetProps}\n* {@link MinWidthProps}\n* {@link MaxWidthProps}\n* {@link PositionSetProps}\n* {@link SpacingSetProps}\n* {@link WidthProps}"
                    },
                    "children": [
                        {
                            "id": 13564,
                            "name": "display",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 151,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "stringLiteral",
                                                "value": "flex"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "inline-flex"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [13564]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/switch.tsx",
                            "line": 142,
                            "character": 33
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "MaxWidthProps",
                            "id": 7690
                        },
                        {
                            "type": "reference",
                            "name": "MinWidthProps",
                            "id": 7710
                        },
                        {
                            "type": "reference",
                            "name": "WidthProps",
                            "id": 7720
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7856
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7940
                        },
                        {
                            "type": "reference",
                            "name": "SpacingSetProps",
                            "id": 8033
                        },
                        {
                            "type": "reference",
                            "name": "BackgroundColorProps",
                            "id": 7565
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "SharedSwitchProps",
                            "id": 13438
                        }
                    ]
                },
                {
                    "id": 13630,
                    "name": "SwitchSyncedProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link SwitchSynced} component. Also accepts:\n* {@link SwitchStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/SwitchSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/Switch\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 13647,
                            "name": "T",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "children": [
                        {
                            "id": 13646,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 88,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.['aria-describedby']",
                                "id": 13453
                            }
                        },
                        {
                            "id": 13644,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The label for the switch. Use this if the switch lacks a visible text label."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 84,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.['aria-label']",
                                "id": 13451
                            }
                        },
                        {
                            "id": 13645,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 86,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.['aria-labelledby']",
                                "id": 13452
                            }
                        },
                        {
                            "id": 13632,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the switch."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 66,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.className",
                                "id": 13439
                            }
                        },
                        {
                            "id": 13633,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the switch."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 68,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.disabled",
                                "id": 13440
                            }
                        },
                        {
                            "id": 13631,
                            "name": "globalConfigKey",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "A string key or array key path in {@link GlobalConfig}. The switch option will always reflect the boolean value stored in `globalConfig` for this key. Toggling the switch will update `globalConfig`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch_synced.tsx",
                                    "line": 17,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "GlobalConfigKey",
                                "id": 14893
                            }
                        },
                        {
                            "id": 13642,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The ID of the switch element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 80,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.id",
                                "id": 13449
                            }
                        },
                        {
                            "id": 13634,
                            "name": "label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The label node for the switch."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 70,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "React.ReactNode"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.label",
                                "id": 13441
                            }
                        },
                        {
                            "id": 13635,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the switch is toggled."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 72,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 13636,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 13637,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 13638,
                                                            "name": "newValue",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "boolean"
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.onChange",
                                "id": 13442
                            }
                        },
                        {
                            "id": 13641,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the switch. Defaults to `default`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 78,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9130
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.size",
                                "id": 13448
                            }
                        },
                        {
                            "id": 13643,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the switch."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 82,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.style",
                                "id": 13450
                            }
                        },
                        {
                            "id": 13639,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Indicates if the switch can be focused and if/where it participates in sequential keyboard navigation."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 74,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.tabIndex",
                                "id": 13446
                            }
                        },
                        {
                            "id": 13640,
                            "name": "variant",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The variant of the switch. Defaults to `default` (green)."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/switch.tsx",
                                    "line": 76,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "SwitchVariant",
                                "id": 13596
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSwitchProps.variant",
                                "id": 13447
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                13646,
                                13644,
                                13645,
                                13632,
                                13633,
                                13631,
                                13642,
                                13634,
                                13635,
                                13641,
                                13643,
                                13639,
                                13640
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/switch_synced.tsx",
                            "line": 15,
                            "character": 27
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedSwitchProps",
                            "id": 13438
                        }
                    ]
                },
                {
                    "id": 13596,
                    "name": "SwitchVariant",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Variants for the {@link Switch} component:",
                        "text": "• **default**\n\nGreen switch for toggling a setting or other boolean property.\n\n• **danger**\n\nRed switch for toggling a dangerous or infrequently-used setting.\n"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/switch.tsx",
                            "line": 49,
                            "character": 18
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "default"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "danger"
                            }
                        ]
                    }
                },
                {
                    "id": 13624,
                    "name": "Switch",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A toggle switch for controlling boolean values. Similar to a checkbox.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport React, {useState} from 'react';\nimport {Switch} from '@airtable/blocks/ui';\n\nfunction Block() {\n    const [isShowingImage, setIsShowingImage] = useState(false);\n    return (\n        <div>\n            <Switch\n                value={isShowingImage}\n                onChange={setIsShowingImage}\n                label=\"Show image\"\n            />\n            {isShowingImage && (\n                <img src=\"cat.png\" />\n            )}\n        </div>\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/Switch"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 13625,
                            "name": "Switch",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A toggle switch for controlling boolean values. Similar to a checkbox."
                            },
                            "parameters": [
                                {
                                    "id": 13626,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "SwitchProps",
                                        "id": 13500
                                    }
                                },
                                {
                                    "id": 13627,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLDivElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/switch.tsx",
                            "line": 192,
                            "character": 12
                        }
                    ]
                },
                {
                    "id": 13693,
                    "name": "SwitchSynced",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A toggleable switch for controlling boolean values, synced with {@link GlobalConfig}. Similar to a checkbox.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport React from 'react';\nimport {SwitchSynced, useGlobalConfig} from '@airtable/blocks/ui';\n\nfunction Block() {\n    const globalConfig = useGlobalConfig();\n    return (\n        <div>\n            <SwitchSynced globalConfigKey=\"isShowingImage\" label=\"Show image\" />\n            {globalConfig.get(\"isShowingImage\") && (\n                <img src=\"cat.png\" />\n            )}\n        </div>\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/SwitchSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/Switch"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 13694,
                            "name": "SwitchSynced",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A toggleable switch for controlling boolean values, synced with {@link GlobalConfig}. Similar to a checkbox."
                            },
                            "parameters": [
                                {
                                    "id": 13695,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "SwitchSyncedProps",
                                        "id": 13630
                                    }
                                },
                                {
                                    "id": 13696,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLDivElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/switch_synced.tsx",
                            "line": 44,
                            "character": 18
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [13438, 13500, 13563, 13630]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [13596]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [13624, 13693]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/switch.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 9437,
            "name": "@airtable/blocks/ui: TablePicker",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/table_picker.tsx",
            "comment": {},
            "children": [
                {
                    "id": 9438,
                    "name": "SharedTablePickerProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props shared between the {@link TablePicker} and {@link TablePickerSynced} components."
                    },
                    "children": [
                        {
                            "id": 9455,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-describedby']",
                                "id": 9185
                            }
                        },
                        {
                            "id": 9453,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-label']",
                                "id": 9183
                            }
                        },
                        {
                            "id": 9454,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-labelledby']",
                                "id": 9184
                            }
                        },
                        {
                            "id": 9447,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.autoFocus",
                                "id": 9177
                            }
                        },
                        {
                            "id": 9446,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.className",
                                "id": 9176
                            }
                        },
                        {
                            "id": 9451,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.disabled",
                                "id": 9181
                            }
                        },
                        {
                            "id": 9448,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.id",
                                "id": 9178
                            }
                        },
                        {
                            "id": 9449,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.name",
                                "id": 9179
                            }
                        },
                        {
                            "id": 9441,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected table changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/table_picker.tsx",
                                    "line": 19,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 9442,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 9443,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 9444,
                                                            "name": "tableModel",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "Table",
                                                                        "id": 2370
                                                                    },
                                                                    {
                                                                        "type": "intrinsic",
                                                                        "name": "null"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9440,
                            "name": "placeholder",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The placeholder text when no table is selected."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/table_picker.tsx",
                                    "line": 17,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9439,
                            "name": "shouldAllowPickingNone",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user can unset the selected table."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/table_picker.tsx",
                                    "line": 15,
                                    "character": 26
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9445,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9130
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.size",
                                "id": 9175
                            }
                        },
                        {
                            "id": 9452,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.style",
                                "id": 9182
                            }
                        },
                        {
                            "id": 9450,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.tabIndex",
                                "id": 9180
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                9455,
                                9453,
                                9454,
                                9447,
                                9446,
                                9451,
                                9448,
                                9449,
                                9441,
                                9440,
                                9439,
                                9445,
                                9452,
                                9450
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/table_picker.tsx",
                            "line": 13,
                            "character": 39
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedSelectBaseProps",
                            "id": 9174
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TablePickerProps",
                            "id": 9493
                        },
                        {
                            "type": "reference",
                            "name": "TablePickerSyncedProps",
                            "id": 9573
                        }
                    ]
                },
                {
                    "id": 9493,
                    "name": "TablePickerProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link TablePicker} component. Also accepts:\n* {@link SelectStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/TablePicker\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 9511,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-describedby']",
                                "id": 9185
                            }
                        },
                        {
                            "id": 9509,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-label']",
                                "id": 9183
                            }
                        },
                        {
                            "id": 9510,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-labelledby']",
                                "id": 9184
                            }
                        },
                        {
                            "id": 9503,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.autoFocus",
                                "id": 9177
                            }
                        },
                        {
                            "id": 9502,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.className",
                                "id": 9176
                            }
                        },
                        {
                            "id": 9507,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.disabled",
                                "id": 9181
                            }
                        },
                        {
                            "id": 9504,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.id",
                                "id": 9178
                            }
                        },
                        {
                            "id": 9505,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.name",
                                "id": 9179
                            }
                        },
                        {
                            "id": 9497,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected table changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/table_picker.tsx",
                                    "line": 19,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 9498,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 9499,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 9500,
                                                            "name": "tableModel",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "Table",
                                                                        "id": 2370
                                                                    },
                                                                    {
                                                                        "type": "intrinsic",
                                                                        "name": "null"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedTablePickerProps.onChange",
                                "id": 9441
                            }
                        },
                        {
                            "id": 9496,
                            "name": "placeholder",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The placeholder text when no table is selected."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/table_picker.tsx",
                                    "line": 17,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedTablePickerProps.placeholder",
                                "id": 9440
                            }
                        },
                        {
                            "id": 9495,
                            "name": "shouldAllowPickingNone",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user can unset the selected table."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/table_picker.tsx",
                                    "line": 15,
                                    "character": 26
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedTablePickerProps.shouldAllowPickingNone",
                                "id": 9439
                            }
                        },
                        {
                            "id": 9501,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9130
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.size",
                                "id": 9175
                            }
                        },
                        {
                            "id": 9508,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.style",
                                "id": 9182
                            }
                        },
                        {
                            "id": 9506,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.tabIndex",
                                "id": 9180
                            }
                        },
                        {
                            "id": 9494,
                            "name": "table",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The selected table model."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/table_picker.tsx",
                                    "line": 38,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Table",
                                        "id": 2370
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                9511,
                                9509,
                                9510,
                                9503,
                                9502,
                                9507,
                                9504,
                                9505,
                                9497,
                                9496,
                                9495,
                                9501,
                                9508,
                                9506,
                                9494
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/table_picker.tsx",
                            "line": 36,
                            "character": 26
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedTablePickerProps",
                            "id": 9438
                        }
                    ]
                },
                {
                    "id": 9573,
                    "name": "TablePickerSyncedProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link TablePickerSynced} component. Also accepts:\n* {@link SelectStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/TablePickerSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/TablePicker\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 9591,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-describedby']",
                                "id": 9185
                            }
                        },
                        {
                            "id": 9589,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-label']",
                                "id": 9183
                            }
                        },
                        {
                            "id": 9590,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-labelledby']",
                                "id": 9184
                            }
                        },
                        {
                            "id": 9583,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.autoFocus",
                                "id": 9177
                            }
                        },
                        {
                            "id": 9582,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.className",
                                "id": 9176
                            }
                        },
                        {
                            "id": 9587,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.disabled",
                                "id": 9181
                            }
                        },
                        {
                            "id": 9574,
                            "name": "globalConfigKey",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "A string key or array key path in {@link GlobalConfig}. The selected table will always reflect the table id stored in {@link GlobalConfig} for this key. Selecting a new table will update {@link GlobalConfig}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/table_picker_synced.tsx",
                                    "line": 20,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "GlobalConfigKey",
                                "id": 14893
                            }
                        },
                        {
                            "id": 9584,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.id",
                                "id": 9178
                            }
                        },
                        {
                            "id": 9585,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.name",
                                "id": 9179
                            }
                        },
                        {
                            "id": 9577,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected table changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/table_picker.tsx",
                                    "line": 19,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 9578,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 9579,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 9580,
                                                            "name": "tableModel",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "Table",
                                                                        "id": 2370
                                                                    },
                                                                    {
                                                                        "type": "intrinsic",
                                                                        "name": "null"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedTablePickerProps.onChange",
                                "id": 9441
                            }
                        },
                        {
                            "id": 9576,
                            "name": "placeholder",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The placeholder text when no table is selected."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/table_picker.tsx",
                                    "line": 17,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedTablePickerProps.placeholder",
                                "id": 9440
                            }
                        },
                        {
                            "id": 9575,
                            "name": "shouldAllowPickingNone",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user can unset the selected table."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/table_picker.tsx",
                                    "line": 15,
                                    "character": 26
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedTablePickerProps.shouldAllowPickingNone",
                                "id": 9439
                            }
                        },
                        {
                            "id": 9581,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9130
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.size",
                                "id": 9175
                            }
                        },
                        {
                            "id": 9588,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.style",
                                "id": 9182
                            }
                        },
                        {
                            "id": 9586,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.tabIndex",
                                "id": 9180
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                9591,
                                9589,
                                9590,
                                9583,
                                9582,
                                9587,
                                9574,
                                9584,
                                9585,
                                9577,
                                9576,
                                9575,
                                9581,
                                9588,
                                9586
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/table_picker_synced.tsx",
                            "line": 18,
                            "character": 32
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedTablePickerProps",
                            "id": 9438
                        }
                    ]
                },
                {
                    "id": 9556,
                    "name": "TablePicker",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "Dropdown menu component for selecting tables.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {TablePicker, useBase, useRecords} from '@airtable/blocks/ui';\nimport React, {Fragment, useState} from 'react';\n\nfunction Block() {\n    useBase();\n    const [table, setTable] = useState(null);\n    const queryResult = table ? table.selectRecords() : null;\n    const records = useRecords(queryResult);\n\n    const summaryText = table ? `${table.name} has ${records.length} record(s).` : 'No table selected.';\n    return (\n        <Fragment>\n            <p style={{marginBottom: 16}}>{summaryText}</p>\n            <label>\n                <div style={{marginBottom: 8, fontWeight: 500}}>Table</div>\n                <TablePicker\n                    table={table}\n                    onChange={newTable => setTable(newTable)}\n                    shouldAllowPickingNone={true}\n                />\n            </label>\n        </Fragment>\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/TablePicker"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 9557,
                            "name": "TablePicker",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Dropdown menu component for selecting tables."
                            },
                            "parameters": [
                                {
                                    "id": 9558,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "TablePickerProps",
                                        "id": 9493
                                    }
                                },
                                {
                                    "id": 9559,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLSelectElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/table_picker.tsx",
                            "line": 74,
                            "character": 17
                        }
                    ]
                },
                {
                    "id": 9632,
                    "name": "TablePickerSynced",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A wrapper around the {@link TablePicker} component that syncs with {@link GlobalConfig}.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {TablePickerSynced, useBase, useRecords, useWatchable} from '@airtable/blocks/ui';\nimport {globalConfig} from '@airtable/blocks';\nimport React, {Fragment} from 'react';\n\nfunction Block() {\n    const base = useBase();\n    const tableId = globalConfig.get('tableId');\n    const table = base.getTableByIdIfExists(tableId);\n    const queryResult = table ? table.selectRecords() : null;\n    const records = useRecords(queryResult);\n    useWatchable(globalConfig, ['tableId']);\n\n    const summaryText = table ? `${table.name} has ${records.length} record(s).` : 'No table selected.';\n    return (\n        <Fragment>\n            <p style={{marginBottom: 16}}>{summaryText}</p>\n            <label>\n                <div style={{marginBottom: 8, fontWeight: 500}}>Table</div>\n                <TablePickerSynced\n                    globalConfigKey=\"tableId\"\n                    shouldAllowPickingNone={true}\n                />\n            </label>\n        </Fragment>\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/TablePickerSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/TablePicker"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 9633,
                            "name": "TablePickerSynced",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A wrapper around the {@link TablePicker} component that syncs with {@link GlobalConfig}."
                            },
                            "parameters": [
                                {
                                    "id": 9634,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "TablePickerSyncedProps",
                                        "id": 9573
                                    }
                                },
                                {
                                    "id": 9635,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLSelectElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/table_picker_synced.tsx",
                            "line": 64,
                            "character": 23
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [9438, 9493, 9573]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [9556, 9632]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/table_picker.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 13810,
            "name": "@airtable/blocks/ui: Text",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/text.tsx",
            "comment": {},
            "children": [
                {
                    "id": 13811,
                    "name": "TextProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link Text} component. Also supports:\n* {@link AriaProps}\n* {@link AllStylesProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Text\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 13812,
                            "name": "as",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The element that is rendered. Defaults to `p`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text.tsx",
                                    "line": 69,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "stringLiteral",
                                        "value": "p"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "h1"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "h2"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "h3"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "h4"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "h5"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "h6"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "span"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "li"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "em"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "strong"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "kbd"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "mark"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "q"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "s"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "samp"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "small"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "sub"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "sup"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "time"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "var"
                                    },
                                    {
                                        "type": "stringLiteral",
                                        "value": "blockquote"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13814,
                            "name": "children",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The contents of the text."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text.tsx",
                                    "line": 95,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "React.ReactNode"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13818,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text.tsx",
                                    "line": 103,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13817,
                            "name": "dataAttributes",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Data attributes that are spread onto the element, e.g. `dataAttributes={{'data-*': '...'}}`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text.tsx",
                                    "line": 101,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "DataAttributesProp"
                            }
                        },
                        {
                            "id": 13815,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text.tsx",
                                    "line": 97,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13820,
                            "name": "role",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `role` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text.tsx",
                                    "line": 107,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13816,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the text. Defaults to `default`. Can be a responsive prop object."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text.tsx",
                                    "line": 99,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "TextSizeProp",
                                "id": 13903
                            }
                        },
                        {
                            "id": 13819,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text.tsx",
                                    "line": 105,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 13813,
                            "name": "variant",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The variant of the text. Defaults to `default`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text.tsx",
                                    "line": 93,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "TextVariant",
                                "id": 13896
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                13812,
                                13814,
                                13818,
                                13817,
                                13815,
                                13820,
                                13816,
                                13819,
                                13813
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/text.tsx",
                            "line": 67,
                            "character": 19
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "AriaProps",
                            "id": 11008
                        },
                        {
                            "type": "reference",
                            "name": "AllStylesProps",
                            "id": 8177
                        }
                    ]
                },
                {
                    "id": 13900,
                    "name": "TextSize",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Sizes for the {@link Text} component."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/text.tsx",
                            "line": 37,
                            "character": 20
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "small"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "default"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "large"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "xlarge"
                            }
                        ]
                    }
                },
                {
                    "id": 13903,
                    "name": "TextSizeProp",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/ui/text.tsx",
                            "line": 40,
                            "character": 24
                        }
                    ],
                    "type": {
                        "type": "reference",
                        "name": "ResponsiveProp",
                        "id": 7559,
                        "typeArguments": [
                            {
                                "type": "reference",
                                "name": "TextSize",
                                "id": 13900
                            }
                        ]
                    }
                },
                {
                    "id": 13896,
                    "name": "TextVariant",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Variants for the {@link Text} component:",
                        "text": "• **default**\n\nSingle-line text.\n\n• **paragraph**\n\nMulti-line text such as body copy.\n"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/text.tsx",
                            "line": 30,
                            "character": 23
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "default"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "paragraph"
                            }
                        ]
                    }
                },
                {
                    "id": 13909,
                    "name": "Text",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A text component with sizes and variants.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {Text} from '@airtable/blocks/ui';\nimport React, {Fragment} from 'react';\n\nfunction TextExample() {\n    return (\n        <Fragment>\n            <Text>Default text, for single line text</Text>\n            <Text size=\"small\" variant=\"paragraph\">Small paragraph, for multiline paragraphs</Text>\n            <Text\n                 size={{\n                     xsmallViewport: 'small',\n                     smallViewport: 'small',\n                     mediumViewport: 'default',\n                     largeViewport: 'large'\n                 }}\n             >Responsive text</Text>\n        </Fragment>\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/Text"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 13910,
                            "name": "Text",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A text component with sizes and variants."
                            },
                            "parameters": [
                                {
                                    "id": 13911,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "TextProps",
                                        "id": 13811
                                    }
                                },
                                {
                                    "id": 13912,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/text.tsx",
                            "line": 138,
                            "character": 10
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [13811]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [13900, 13903, 13896]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [13909]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/text.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 15175,
            "name": "@airtable/blocks/ui: TextButton",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/text_button.tsx",
            "comment": {},
            "children": [
                {
                    "id": 15208,
                    "name": "TextButtonProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link TextButton} component. Also supports:\n* {@link AriaProps}\n* {@link TextButtonStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/TextButton\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 15223,
                            "name": "aria-selected",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-selected` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 146,
                                    "character": 21
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 15213,
                            "name": "children",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The contents of the button."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 129,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "React.ReactNode"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 15220,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 140,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 15222,
                            "name": "dataAttributes",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Data attributes that are spread onto the element, e.g. `dataAttributes={{'data-*': '...'}}`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 144,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "DataAttributesProp"
                            }
                        },
                        {
                            "id": 15212,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Indicates whether or not the user can interact with the button."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 127,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 15211,
                            "name": "icon",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The name of the icon or a react node. For more details, see the [list of supported icons](/packages/sdk/docs/icons.md)."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 125,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "IconName"
                                    },
                                    {
                                        "type": "reference",
                                        "name": "ReactElement"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 15218,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 136,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 15214,
                            "name": "onClick",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Click event handler. Also handles Space and Enter keypress events."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 132,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 15215,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 15216,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 15217,
                                                            "name": "e",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "MouseEvent",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "reference",
                                                                                "name": "HTMLSpanElement"
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "KeyboardEvent",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "reference",
                                                                                "name": "HTMLSpanElement"
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "unknown"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "overwrites": {
                                "type": "reference",
                                "name": "TooltipAnchorProps.onClick"
                            }
                        },
                        {
                            "id": 15209,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the button. Defaults to `default`. Can be a responsive prop object."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 121,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "TextSizeProp",
                                "id": 13903
                            }
                        },
                        {
                            "id": 15221,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 142,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        },
                        {
                            "id": 15219,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabIndex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 138,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 15210,
                            "name": "variant",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The variant of the button, which defines the color. Defaults to `default`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 123,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "TextButtonVariant",
                                "id": 15275
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                15223,
                                15213,
                                15220,
                                15222,
                                15212,
                                15211,
                                15218,
                                15214,
                                15209,
                                15221,
                                15219,
                                15210
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/text_button.tsx",
                            "line": 116,
                            "character": 25
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "TooltipAnchorProps",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "HTMLSpanElement"
                                }
                            ]
                        },
                        {
                            "type": "reference",
                            "name": "AriaProps",
                            "id": 11008
                        },
                        {
                            "type": "reference",
                            "name": "TextButtonStyleProps",
                            "id": 15176
                        }
                    ]
                },
                {
                    "id": 15176,
                    "name": "TextButtonStyleProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Style props for the {@link TextButton} component. Also accepts:\n* {@link FlexItemSetProps}\n* {@link MaxWidthProps}\n* {@link MinWidthProps}\n* {@link PositionSetProps}\n* {@link SpacingSetProps}\n* {@link WidthProps}"
                    },
                    "children": [
                        {
                            "id": 15177,
                            "name": "display",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Defines the display type of an element, which consists of the two basic qualities of how an element generates boxes — the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/text_button.tsx",
                                    "line": 60,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "OptionalResponsiveProp",
                                "id": 7561,
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "stringLiteral",
                                                "value": "inline-flex"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "flex"
                                            },
                                            {
                                                "type": "stringLiteral",
                                                "value": "none"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [15177]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/text_button.tsx",
                            "line": 52,
                            "character": 37
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "MaxWidthProps",
                            "id": 7690
                        },
                        {
                            "type": "reference",
                            "name": "MinWidthProps",
                            "id": 7710
                        },
                        {
                            "type": "reference",
                            "name": "WidthProps",
                            "id": 7720
                        },
                        {
                            "type": "reference",
                            "name": "FlexItemSetProps",
                            "id": 7856
                        },
                        {
                            "type": "reference",
                            "name": "PositionSetProps",
                            "id": 7940
                        },
                        {
                            "type": "reference",
                            "name": "SpacingSetProps",
                            "id": 8033
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "TextButtonProps",
                            "id": 15208
                        }
                    ]
                },
                {
                    "id": 15275,
                    "name": "TextButtonVariant",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Variants for the {@link TextButton} component:",
                        "text": "• **default**\n\nBlue text.\n\n• **dark**\n\nDark gray text.\n\n• **light**\n\nLight gray text.\n"
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/text_button.tsx",
                            "line": 98,
                            "character": 22
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "default"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "dark"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "light"
                            }
                        ]
                    }
                },
                {
                    "id": 15282,
                    "name": "TextButton",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A text button component with sizes and variants.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {TextButton} from '@airtable/blocks/ui';\nimport React, {Fragment} from 'react';\n\nfunction TextButtonExample() {\n    return (\n        <Fragment>\n            <TextButton>Default text, for single line text</TextButton>\n            <TextButton size=\"small\">Small text button</TextButton>\n            <TextButton\n                 size={{\n                     xsmallViewport: 'small',\n                     smallViewport: 'small',\n                     mediumViewport: 'default',\n                     largeViewport: 'large'\n                 }}\n             >Responsive text button</TextButton>\n        </Fragment>\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/TextButton"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 15283,
                            "name": "TextButton",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A text button component with sizes and variants."
                            },
                            "parameters": [
                                {
                                    "id": 15284,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "TextButtonProps",
                                        "id": 15208
                                    }
                                },
                                {
                                    "id": 15285,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLSpanElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/text_button.tsx",
                            "line": 177,
                            "character": 16
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [15208, 15176]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [15275]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [15282]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/text_button.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 11138,
            "name": "@airtable/blocks/ui: Tooltip",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/tooltip.tsx",
            "comment": {},
            "children": [
                {
                    "id": 11155,
                    "name": "Tooltip",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A component that renders a tooltip on hover. Wraps its children.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {Button, Tooltip} from '@airtable/blocks';\n\nfunction MyComponent() {\n    return (\n        <Tooltip\n            content=\"Clicking this button will be a lot of fun!\"\n            placementX={Tooltip.placements.CENTER}\n            placementY={Tooltip.placements.TOP}\n        >\n            <Button onClick={() => alert('Clicked!')}>\n                Click here!\n            </Button>\n        </Tooltip>\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/Tooltip"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 11199,
                            "name": "SS",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/tooltip.tsx",
                            "line": 72,
                            "character": 13
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Component",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "TooltipProps",
                                    "id": 11139
                                },
                                {
                                    "type": "reference",
                                    "name": "TooltipState"
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 11139,
                    "name": "TooltipProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link Tooltip} component.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/Tooltip\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 11140,
                            "name": "children",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "Child components to render."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/tooltip.tsx",
                                    "line": 20,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ReactElement",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "TooltipAnchorProps"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11151,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to attach to the tooltip, separated by spaces."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/tooltip.tsx",
                                    "line": 38,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11145,
                            "name": "content",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A string representing the contents. Alternatively, you can include a function that returns a React node to place into the tooltip, which is useful for things like italicization in the tooltip."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/tooltip.tsx",
                                    "line": 30,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 11146,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 11147,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "type": {
                                                        "type": "reference",
                                                        "name": "ReactElement",
                                                        "typeArguments": [
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "any"
                                                            }
                                                        ]
                                                    }
                                                }
                                            ],
                                            "sources": [
                                                {
                                                    "fileName": "src/ui/tooltip.tsx",
                                                    "line": 30,
                                                    "character": 22
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11150,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, this tooltip will not be shown. Useful when trying to disable the tooltip dynamically."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/tooltip.tsx",
                                    "line": 36,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11148,
                            "name": "fitInWindowMode",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Dictates the behavior when the \"normal\" placement of the tooltip would be outside of the viewport. Defaults to {@link FitInWindowModes.FLIP}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/tooltip.tsx",
                                    "line": 32,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "FitInWindowMode",
                                "id": 11006
                            }
                        },
                        {
                            "id": 11143,
                            "name": "placementOffsetX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The horizontal offset, in pixels, of the tooltip. If `placementX` is set to {@link PopoverPlacements.LEFT}, a higher number will move the tooltip to the left. If `placementX` is set to {@link PopoverPlacements.RIGHT}, a higher number moves the tooltip to the right. If `placementX` is set to {@link PopoverPlacements.CENTER}, this value has no effect. Defaults to 12."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/tooltip.tsx",
                                    "line": 26,
                                    "character": 20
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11144,
                            "name": "placementOffsetY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The vertical offset, in pixels, of the tooltip. If `placementY` is set to {@link PopoverPlacements.TOP}, a higher number will move the tooltip upward. If `placementY` is set to {@link PopoverPlacements.BOTTOM}, a higher number moves the tooltip downard. If `placementY` is set to {@link PopoverPlacements.CENTER}, this value has no effect. Defaults to 0."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/tooltip.tsx",
                                    "line": 28,
                                    "character": 20
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11141,
                            "name": "placementX",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The horizontal placement of the tooltip. Defaults to {@link PopoverPlacements.RIGHT}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/tooltip.tsx",
                                    "line": 22,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "PopoverPlacementX",
                                "id": 11004
                            }
                        },
                        {
                            "id": 11142,
                            "name": "placementY",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The vertical placement of the tooltip. Defaults to {@link PopoverPlacements.CENTER}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/tooltip.tsx",
                                    "line": 24,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "PopoverPlacementY",
                                "id": 11005
                            }
                        },
                        {
                            "id": 11149,
                            "name": "shouldHideTooltipOnClick",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Should the tooltip be hidden when clicked? Defaults to `false`."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/tooltip.tsx",
                                    "line": 34,
                                    "character": 28
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 11152,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles names to attach to the tooltip."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/tooltip.tsx",
                                    "line": 40,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                11140,
                                11151,
                                11145,
                                11150,
                                11148,
                                11143,
                                11144,
                                11141,
                                11142,
                                11149,
                                11152
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/tooltip.tsx",
                            "line": 18,
                            "character": 22
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [11155]
                },
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [11139]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/tooltip.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 9831,
            "name": "@airtable/blocks/ui: ViewPicker",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/view_picker.tsx",
            "comment": {},
            "children": [
                {
                    "id": 9832,
                    "name": "SharedViewPickerProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Props shared between the {@link ViewPicker} and {@link ViewPickerSynced} components."
                    },
                    "children": [
                        {
                            "id": 9834,
                            "name": "allowedTypes",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "An array indicating which view types can be selected."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 20,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "ViewType",
                                        "id": 665
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9851,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-describedby']",
                                "id": 9185
                            }
                        },
                        {
                            "id": 9849,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-label']",
                                "id": 9183
                            }
                        },
                        {
                            "id": 9850,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-labelledby']",
                                "id": 9184
                            }
                        },
                        {
                            "id": 9843,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.autoFocus",
                                "id": 9177
                            }
                        },
                        {
                            "id": 9842,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.className",
                                "id": 9176
                            }
                        },
                        {
                            "id": 9847,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.disabled",
                                "id": 9181
                            }
                        },
                        {
                            "id": 9844,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.id",
                                "id": 9178
                            }
                        },
                        {
                            "id": 9845,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.name",
                                "id": 9179
                            }
                        },
                        {
                            "id": 9837,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected view changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 26,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 9838,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 9839,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 9840,
                                                            "name": "viewModel",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "View",
                                                                        "id": 2280
                                                                    },
                                                                    {
                                                                        "type": "intrinsic",
                                                                        "name": "null"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9836,
                            "name": "placeholder",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The placeholder text when no view is selected. Defaults to `'Pick a view...'`"
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 24,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9835,
                            "name": "shouldAllowPickingNone",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user can unset the selected view."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 22,
                                    "character": 26
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 9841,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9130
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.size",
                                "id": 9175
                            }
                        },
                        {
                            "id": 9848,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.style",
                                "id": 9182
                            }
                        },
                        {
                            "id": 9846,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.tabIndex",
                                "id": 9180
                            }
                        },
                        {
                            "id": 9833,
                            "name": "table",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The parent table model to select views from. If `null` or `undefined`, the picker won't render."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 18,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Table",
                                        "id": 2370
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                9834,
                                9851,
                                9849,
                                9850,
                                9843,
                                9842,
                                9847,
                                9844,
                                9845,
                                9837,
                                9836,
                                9835,
                                9841,
                                9848,
                                9846,
                                9833
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/view_picker.tsx",
                            "line": 16,
                            "character": 38
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedSelectBaseProps",
                            "id": 9174
                        }
                    ],
                    "extendedBy": [
                        {
                            "type": "reference",
                            "name": "ViewPickerProps",
                            "id": 9889
                        },
                        {
                            "type": "reference",
                            "name": "ViewPickerSyncedProps",
                            "id": 9962
                        }
                    ]
                },
                {
                    "id": 9889,
                    "name": "ViewPickerProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link ViewPicker} component. Also accepts:\n* {@link SelectStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/ViewPicker\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 9892,
                            "name": "allowedTypes",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "An array indicating which view types can be selected."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 20,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "ViewType",
                                        "id": 665
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedViewPickerProps.allowedTypes",
                                "id": 9834
                            }
                        },
                        {
                            "id": 9909,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-describedby']",
                                "id": 9185
                            }
                        },
                        {
                            "id": 9907,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-label']",
                                "id": 9183
                            }
                        },
                        {
                            "id": 9908,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-labelledby']",
                                "id": 9184
                            }
                        },
                        {
                            "id": 9901,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.autoFocus",
                                "id": 9177
                            }
                        },
                        {
                            "id": 9900,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.className",
                                "id": 9176
                            }
                        },
                        {
                            "id": 9905,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.disabled",
                                "id": 9181
                            }
                        },
                        {
                            "id": 9902,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.id",
                                "id": 9178
                            }
                        },
                        {
                            "id": 9903,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.name",
                                "id": 9179
                            }
                        },
                        {
                            "id": 9895,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected view changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 26,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 9896,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 9897,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 9898,
                                                            "name": "viewModel",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "View",
                                                                        "id": 2280
                                                                    },
                                                                    {
                                                                        "type": "intrinsic",
                                                                        "name": "null"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedViewPickerProps.onChange",
                                "id": 9837
                            }
                        },
                        {
                            "id": 9894,
                            "name": "placeholder",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The placeholder text when no view is selected. Defaults to `'Pick a view...'`"
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 24,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedViewPickerProps.placeholder",
                                "id": 9836
                            }
                        },
                        {
                            "id": 9893,
                            "name": "shouldAllowPickingNone",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user can unset the selected view."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 22,
                                    "character": 26
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedViewPickerProps.shouldAllowPickingNone",
                                "id": 9835
                            }
                        },
                        {
                            "id": 9899,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9130
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.size",
                                "id": 9175
                            }
                        },
                        {
                            "id": 9906,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.style",
                                "id": 9182
                            }
                        },
                        {
                            "id": 9904,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.tabIndex",
                                "id": 9180
                            }
                        },
                        {
                            "id": 9891,
                            "name": "table",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The parent table model to select views from. If `null` or `undefined`, the picker won't render."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 18,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Table",
                                        "id": 2370
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedViewPickerProps.table",
                                "id": 9833
                            }
                        },
                        {
                            "id": 9890,
                            "name": "view",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The selected view model."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 47,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "View",
                                        "id": 2280
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                9892,
                                9909,
                                9907,
                                9908,
                                9901,
                                9900,
                                9905,
                                9902,
                                9903,
                                9895,
                                9894,
                                9893,
                                9899,
                                9906,
                                9904,
                                9891,
                                9890
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/view_picker.tsx",
                            "line": 45,
                            "character": 25
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedViewPickerProps",
                            "id": 9832
                        }
                    ]
                },
                {
                    "id": 9962,
                    "name": "ViewPickerSyncedProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link ViewPickerSynced} component. Also accepts:\n* {@link SelectStyleProps}",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/ViewPickerSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/ViewPicker\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 9965,
                            "name": "allowedTypes",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "An array indicating which view types can be selected."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 20,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "ViewType",
                                        "id": 665
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedViewPickerProps.allowedTypes",
                                "id": 9834
                            }
                        },
                        {
                            "id": 9982,
                            "name": "aria-describedby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of description element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 120,
                                    "character": 24
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-describedby']",
                                "id": 9185
                            }
                        },
                        {
                            "id": 9980,
                            "name": "aria-label",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `aria-label` attribute. Use this if the select is not referenced by a label element."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 116,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-label']",
                                "id": 9183
                            }
                        },
                        {
                            "id": 9981,
                            "name": "aria-labelledby",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A space separated list of label element IDs."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 118,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.['aria-labelledby']",
                                "id": 9184
                            }
                        },
                        {
                            "id": 9974,
                            "name": "autoFocus",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `autoFocus` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 104,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.autoFocus",
                                "id": 9177
                            }
                        },
                        {
                            "id": 9973,
                            "name": "className",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional class names to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 102,
                                    "character": 13
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.className",
                                "id": 9176
                            }
                        },
                        {
                            "id": 9978,
                            "name": "disabled",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user cannot interact with the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 112,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.disabled",
                                "id": 9181
                            }
                        },
                        {
                            "id": 9963,
                            "name": "globalConfigKey",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "A string key or array key path in {@link GlobalConfig}. The selected view will always reflect the view id stored in {@link GlobalConfig} for this key. Selecting a new view will update {@link GlobalConfig}."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker_synced.tsx",
                                    "line": 20,
                                    "character": 19
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "GlobalConfigKey",
                                "id": 14893
                            }
                        },
                        {
                            "id": 9975,
                            "name": "id",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `id` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 106,
                                    "character": 6
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.id",
                                "id": 9178
                            }
                        },
                        {
                            "id": 9976,
                            "name": "name",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `name` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 108,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.name",
                                "id": 9179
                            }
                        },
                        {
                            "id": 9968,
                            "name": "onChange",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "A function to be called when the selected view changes."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 26,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 9969,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {},
                                            "signatures": [
                                                {
                                                    "id": 9970,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "parameters": [
                                                        {
                                                            "id": 9971,
                                                            "name": "viewModel",
                                                            "kind": 32768,
                                                            "kindString": "Parameter",
                                                            "flags": {},
                                                            "type": {
                                                                "type": "union",
                                                                "types": [
                                                                    {
                                                                        "type": "reference",
                                                                        "name": "View",
                                                                        "id": 2280
                                                                    },
                                                                    {
                                                                        "type": "intrinsic",
                                                                        "name": "null"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "void"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedViewPickerProps.onChange",
                                "id": 9837
                            }
                        },
                        {
                            "id": 9967,
                            "name": "placeholder",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The placeholder text when no view is selected. Defaults to `'Pick a view...'`"
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 24,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedViewPickerProps.placeholder",
                                "id": 9836
                            }
                        },
                        {
                            "id": 9966,
                            "name": "shouldAllowPickingNone",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to `true`, the user can unset the selected view."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 22,
                                    "character": 26
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedViewPickerProps.shouldAllowPickingNone",
                                "id": 9835
                            }
                        },
                        {
                            "id": 9972,
                            "name": "size",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The size of the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 100,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ControlSizeProp",
                                "id": 9130
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.size",
                                "id": 9175
                            }
                        },
                        {
                            "id": 9979,
                            "name": "style",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Additional styles to apply to the select."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 114,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.CSSProperties"
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.style",
                                "id": 9182
                            }
                        },
                        {
                            "id": 9977,
                            "name": "tabIndex",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The `tabindex` attribute."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/select.tsx",
                                    "line": 110,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedSelectBaseProps.tabIndex",
                                "id": 9180
                            }
                        },
                        {
                            "id": 9964,
                            "name": "table",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The parent table model to select views from. If `null` or `undefined`, the picker won't render."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/view_picker.tsx",
                                    "line": 18,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Table",
                                        "id": 2370
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            },
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "SharedViewPickerProps.table",
                                "id": 9833
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [
                                9965,
                                9982,
                                9980,
                                9981,
                                9974,
                                9973,
                                9978,
                                9963,
                                9975,
                                9976,
                                9968,
                                9967,
                                9966,
                                9972,
                                9979,
                                9977,
                                9964
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/view_picker_synced.tsx",
                            "line": 18,
                            "character": 31
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "SharedViewPickerProps",
                            "id": 9832
                        }
                    ]
                },
                {
                    "id": 9956,
                    "name": "ViewPicker",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "Dropdown menu component for selecting views.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {TablePicker, ViewPicker, useBase, useRecords} from '@airtable/blocks/ui';\nimport {viewTypes} from '@airtable/blocks/models';\nimport React, {Fragment, useState} from 'react';\n\nfunction Block() {\n    useBase();\n    const [table, setTable] = useState(null);\n    const [view, setView] = useState(null);\n    const queryResult = view ? view.selectRecords() : null;\n    const records = useRecords(queryResult);\n\n    const summaryText = view ? `${view.name} has ${records.length} record(s).` : 'No view selected.';\n    return (\n        <Fragment>\n            <p style={{marginBottom: 16}}>{summaryText}</p>\n            <label style={{display: 'block', marginBottom: 16}}>\n                <div style={{marginBottom: 8, fontWeight: 500}}>Table</div>\n                <TablePicker\n                    table={table}\n                    onChange={newTable => {\n                        setTable(newTable);\n                        setView(null);\n                    }}\n                    shouldAllowPickingNone={true}\n                />\n            </label>\n            {table && (\n                <label>\n                    <div style={{marginBottom: 8, fontWeight: 500}}>View</div>\n                    <ViewPicker\n                        table={table}\n                        view={view}\n                        onChange={newView => setView(newView)}\n                        allowedTypes={[viewTypes.GRID]}\n                        shouldAllowPickingNone={true}\n                    />\n                </label>\n            )}\n        </Fragment>\n    );\n}\n```"
                            },
                            {
                                "tag": "component",
                                "text": ""
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/ViewPicker\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 9957,
                            "name": "ViewPicker",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Dropdown menu component for selecting views."
                            },
                            "parameters": [
                                {
                                    "id": 9958,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "ViewPickerProps",
                                        "id": 9889
                                    }
                                },
                                {
                                    "id": 9959,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLSelectElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    },
                                    {
                                        "type": "reference",
                                        "name": "Element"
                                    }
                                ]
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/view_picker.tsx",
                            "line": 100,
                            "character": 16
                        }
                    ]
                },
                {
                    "id": 10020,
                    "name": "ViewPickerSynced",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A wrapper around the {@link ViewPicker} component that syncs with {@link GlobalConfig}.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {TablePickerSynced, ViewPickerSynced, useBase, useRecords, useWatchable} from '@airtable/blocks/ui';\nimport {viewTypes} from '@airtable/blocks/models';\nimport {globalConfig} from '@airtable/blocks';\nimport React, {Fragment} from 'react';\n\nfunction Block() {\n    const base = useBase();\n    const tableId = globalConfig.get('tableId');\n    const table = base.getTableByIdIfExists(tableId);\n    const viewId = globalConfig.get('viewId');\n    const view = table.getViewByIdIfExists(viewId);\n    const queryResult = view ? view.selectRecords() : null;\n    const records = useRecords(queryResult);\n    useWatchable(globalConfig, ['tableId', 'viewId']);\n\n    const summaryText = view ? `${view.name} has ${records.length} record(s).` : 'No view selected.';\n    return (\n        <Fragment>\n            <p style={{marginBottom: 16}}>{summaryText}</p>\n            <label style={{display: 'block', marginBottom: 16}}>\n                <div style={{marginBottom: 8, fontWeight: 500}}>Table</div>\n                <TablePickerSynced\n                    globalConfigKey='tableId'\n                    shouldAllowPickingNone={true}\n                />\n            </label>\n            {table && (\n                <label>\n                    <div style={{marginBottom: 8, fontWeight: 500}}>View</div>\n                    <ViewPickerSynced\n                        table={table}\n                        globalConfigKey='viewId'\n                        allowedTypes={[viewTypes.GRID]}\n                        shouldAllowPickingNone={true}\n                    />\n                </label>\n            )}\n        </Fragment>\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/ViewPickerSynced"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/components/ViewPicker"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 10021,
                            "name": "ViewPickerSynced",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A wrapper around the {@link ViewPicker} component that syncs with {@link GlobalConfig}."
                            },
                            "parameters": [
                                {
                                    "id": 10022,
                                    "name": "props",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "ViewPickerSyncedProps",
                                        "id": 9962
                                    }
                                },
                                {
                                    "id": 10023,
                                    "name": "ref",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "reference",
                                        "name": "React.Ref",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "HTMLSelectElement"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Element"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/view_picker_synced.tsx",
                            "line": 73,
                            "character": 22
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [9832, 9889, 9962]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [9956, 10020]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/view_picker.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 13698,
            "name": "@airtable/blocks/ui: ViewportConstraint",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/viewport_constraint.tsx",
            "comment": {
                "tags": [
                    {
                        "tag": "docspath",
                        "text": "UI/components/ViewportConstraint\n"
                    }
                ]
            },
            "children": [
                {
                    "id": 13703,
                    "name": "ViewportConstraint",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "When mounted, this wrapper component applies size constraints to the {@link Viewport}.\nLike {@link addMinSize}, this will fullscreen the block if necessary and possible when\n`minSize` is updated.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {ViewportConstraint} from '@airtable/blocks/ui';\n<ViewportConstraint minSize={{width: 400}} />\n```\n"
                            },
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {ViewportConstraint} from '@airtable/blocks/ui';\n<ViewportConstraint maxFullScreenSize={{width: 600, height: 400}}>\n     <div>I need a max fullscreen size!</div>\n</ViewportConstraint>\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/components/ViewportConstraint"
                            },
                            {
                                "tag": "component",
                                "text": "\n"
                            }
                        ]
                    },
                    "typeParameter": [
                        {
                            "id": 13738,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 13739,
                            "name": "SS",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        },
                        {
                            "id": 13770,
                            "name": "S",
                            "kind": 131072,
                            "kindString": "Type parameter",
                            "flags": {}
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/viewport_constraint.tsx",
                            "line": 55,
                            "character": 24
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Component",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "ViewportConstraintProps",
                                    "id": 13699
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 13699,
                    "name": "ViewportConstraintProps",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Props for the {@link ViewportConstraint} component.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/components/ViewportConstraint\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 13702,
                            "name": "children",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The contents of the viewport constraint."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/viewport_constraint.tsx",
                                    "line": 24,
                                    "character": 12
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "React.ReactNode"
                            }
                        },
                        {
                            "id": 13701,
                            "name": "maxFullscreenSize",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The maximum viewport size of the block when it is in fullscreen mode."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/viewport_constraint.tsx",
                                    "line": 22,
                                    "character": 21
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ViewportSizeConstraintProp",
                                "id": 13805
                            }
                        },
                        {
                            "id": 13700,
                            "name": "minSize",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The minimum viewport size of the block."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/viewport_constraint.tsx",
                                    "line": 20,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ViewportSizeConstraintProp",
                                "id": 13805
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [13702, 13701, 13700]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/viewport_constraint.tsx",
                            "line": 18,
                            "character": 33
                        }
                    ]
                },
                {
                    "id": 13805,
                    "name": "ViewportSizeConstraintProp",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "An object specifying a width and/or height for the block's viewport."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/viewport_constraint.tsx",
                            "line": 11,
                            "character": 31
                        }
                    ],
                    "type": {
                        "type": "reference",
                        "name": "Partial",
                        "typeArguments": [
                            {
                                "type": "reference",
                                "name": "ViewportSizeConstraint",
                                "id": 2963
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [13703]
                },
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [13699]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [13805]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/viewport_constraint.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 559,
            "name": "@airtable/blocks/ui: colorUtils",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/color_utils.ts",
            "comment": {},
            "children": [
                {
                    "id": 564,
                    "name": "ColorUtils",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Utilities for working with {@link Color} names from the {@link colors} enum.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/utils/ColorUtils"
                            },
                            {
                                "tag": "grouppath",
                                "text": "UI/utils/Colors\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 565,
                            "name": "getHexForColor",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {},
                            "comment": {
                                "shortText": "Given a {@link Color}, return the hex color value for that color, or null if the value isn't a {@link Color}",
                                "returns": "the color hex string or null",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {colorUtils, colors} from '@airtable/blocks/ui';\n\ncolorUtils.getHexForColor(colors.RED);\n// => '#ef3061'\n\ncolorUtils.getHexForColor('uncomfortable beige');\n// => null\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 566,
                                    "name": "getHexForColor",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Given a {@link Color}, return the hex color value for that color, or null if the value isn't a {@link Color}",
                                        "returns": "the color hex string or null",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {colorUtils, colors} from '@airtable/blocks/ui';\n\ncolorUtils.getHexForColor(colors.RED);\n// => '#ef3061'\n\ncolorUtils.getHexForColor('uncomfortable beige');\n// => null\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 567,
                                            "name": "colorString",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {},
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "id": 568,
                                    "name": "getHexForColor",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Given a {@link Color}, return the hex color value for that color, or null if the value isn't a {@link Color}",
                                        "returns": "the color hex string or null"
                                    },
                                    "parameters": [
                                        {
                                            "id": 569,
                                            "name": "colorString",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "Color",
                                                "id": 556
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/color_utils.ts",
                                    "line": 38,
                                    "character": 18
                                },
                                {
                                    "fileName": "src/color_utils.ts",
                                    "line": 40,
                                    "character": 18
                                }
                            ]
                        },
                        {
                            "id": 570,
                            "name": "getRgbForColor",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {},
                            "comment": {
                                "shortText": "Given a {@link Color}, return an {@link RGB} object representing it, or null if the value isn't a {@link Color}",
                                "returns": "the color object or null",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {colorUtils, colors} from '@airtable/blocks/ui';\n\ncolorUtils.getRgbForColor(colors.PURPLE_DARK_1);\n// => {r: 107, g: 28, b: 176}\n\ncolorUtils.getRgbForColor('disgruntled pink');\n// => null\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 571,
                                    "name": "getRgbForColor",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Given a {@link Color}, return an {@link RGB} object representing it, or null if the value isn't a {@link Color}",
                                        "returns": "the color object or null",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {colorUtils, colors} from '@airtable/blocks/ui';\n\ncolorUtils.getRgbForColor(colors.PURPLE_DARK_1);\n// => {r: 107, g: 28, b: 176}\n\ncolorUtils.getRgbForColor('disgruntled pink');\n// => null\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 572,
                                            "name": "colorString",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {},
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "RGB",
                                                "id": 560
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "id": 573,
                                    "name": "getRgbForColor",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Given a {@link Color}, return an {@link RGB} object representing it, or null if the value isn't a {@link Color}",
                                        "returns": "the color object or null"
                                    },
                                    "parameters": [
                                        {
                                            "id": 574,
                                            "name": "colorString",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {},
                                            "type": {
                                                "type": "reference",
                                                "name": "Color",
                                                "id": 556
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "RGB",
                                        "id": 560
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/color_utils.ts",
                                    "line": 58,
                                    "character": 18
                                },
                                {
                                    "fileName": "src/color_utils.ts",
                                    "line": 60,
                                    "character": 18
                                }
                            ]
                        },
                        {
                            "id": 575,
                            "name": "shouldUseLightTextOnColor",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {},
                            "comment": {
                                "shortText": "Given a {@link Color}, returns true or false to indicate whether that color should have light text on top of it when used as a background color.",
                                "returns": "boolean",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {colorUtils, colors} from '@airtable/blocks/ui';\n\ncolorUtils.shouldUseLightTextOnColor(colors.PINK_LIGHT_1);\n// => false\n\ncolorUtils.shouldUseLightTextOnColor(colors.PINK_DARK_1);\n// => true\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 576,
                                    "name": "shouldUseLightTextOnColor",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Given a {@link Color}, returns true or false to indicate whether that color should have light text on top of it when used as a background color.",
                                        "returns": "boolean",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {colorUtils, colors} from '@airtable/blocks/ui';\n\ncolorUtils.shouldUseLightTextOnColor(colors.PINK_LIGHT_1);\n// => false\n\ncolorUtils.shouldUseLightTextOnColor(colors.PINK_DARK_1);\n// => true\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 577,
                                            "name": "colorString",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {},
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/color_utils.ts",
                                    "line": 78,
                                    "character": 29
                                }
                            ]
                        }
                    ],
                    "groups": [
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [565, 570, 575]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/color_utils.ts",
                            "line": 21,
                            "character": 20
                        }
                    ]
                },
                {
                    "id": 560,
                    "name": "RGB",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "A red/green/blue color object. Each property is a number from 0 to 255."
                    },
                    "children": [
                        {
                            "id": 563,
                            "name": "b",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The blue component."
                            },
                            "sources": [
                                {
                                    "fileName": "src/color_utils.ts",
                                    "line": 12,
                                    "character": 5
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "number"
                            }
                        },
                        {
                            "id": 562,
                            "name": "g",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The green component."
                            },
                            "sources": [
                                {
                                    "fileName": "src/color_utils.ts",
                                    "line": 10,
                                    "character": 5
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "number"
                            }
                        },
                        {
                            "id": 561,
                            "name": "r",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {},
                            "comment": {
                                "shortText": "The red component."
                            },
                            "sources": [
                                {
                                    "fileName": "src/color_utils.ts",
                                    "line": 8,
                                    "character": 5
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "number"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [563, 562, 561]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/color_utils.ts",
                            "line": 6,
                            "character": 13
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [564, 560]
                }
            ],
            "sources": [
                {
                    "fileName": "src/color_utils.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 504,
            "name": "@airtable/blocks/ui: colors",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/colors.ts",
            "comment": {},
            "children": [
                {
                    "id": 556,
                    "name": "Color",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A color name from the list of {@link Colors}."
                    },
                    "sources": [
                        {
                            "fileName": "src/colors.ts",
                            "line": 125,
                            "character": 17
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "blueBright"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "blueDark1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "blueLight1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "blueLight2"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "blue"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "cyanBright"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "cyanDark1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "cyanLight1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "cyanLight2"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "cyan"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "grayBright"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "grayDark1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "grayLight1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "grayLight2"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "gray"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "greenBright"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "greenDark1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "greenLight1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "greenLight2"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "green"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "orangeBright"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "orangeDark1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "orangeLight1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "orangeLight2"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "orange"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "pinkBright"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "pinkDark1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "pinkLight1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "pinkLight2"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "pink"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "purpleBright"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "purpleDark1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "purpleLight1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "purpleLight2"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "purple"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "redBright"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "redDark1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "redLight1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "redLight2"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "red"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "tealBright"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "tealDark1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "tealLight1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "tealLight2"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "teal"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "yellowBright"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "yellowDark1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "yellowLight1"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "yellowLight2"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "yellow"
                            }
                        ]
                    }
                },
                {
                    "id": 505,
                    "name": "Colors",
                    "kind": 2097152,
                    "kindString": "Object literal",
                    "flags": {
                        "isExported": true,
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "Airtable color names.",
                        "tags": [
                            {
                                "tag": "docspath",
                                "text": "UI/utils/Colors\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 510,
                            "name": "BLUE",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 18,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "blue"
                            },
                            "defaultValue": " 'blue' as const"
                        },
                        {
                            "id": 506,
                            "name": "BLUE_BRIGHT",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 10,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "blueBright"
                            },
                            "defaultValue": " 'blueBright' as const"
                        },
                        {
                            "id": 507,
                            "name": "BLUE_DARK_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 12,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "blueDark1"
                            },
                            "defaultValue": " 'blueDark1' as const"
                        },
                        {
                            "id": 508,
                            "name": "BLUE_LIGHT_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 14,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "blueLight1"
                            },
                            "defaultValue": " 'blueLight1' as const"
                        },
                        {
                            "id": 509,
                            "name": "BLUE_LIGHT_2",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 16,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "blueLight2"
                            },
                            "defaultValue": " 'blueLight2' as const"
                        },
                        {
                            "id": 515,
                            "name": "CYAN",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 29,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "cyan"
                            },
                            "defaultValue": " 'cyan' as const"
                        },
                        {
                            "id": 511,
                            "name": "CYAN_BRIGHT",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 21,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "cyanBright"
                            },
                            "defaultValue": " 'cyanBright' as const"
                        },
                        {
                            "id": 512,
                            "name": "CYAN_DARK_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 23,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "cyanDark1"
                            },
                            "defaultValue": " 'cyanDark1' as const"
                        },
                        {
                            "id": 513,
                            "name": "CYAN_LIGHT_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 25,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "cyanLight1"
                            },
                            "defaultValue": " 'cyanLight1' as const"
                        },
                        {
                            "id": 514,
                            "name": "CYAN_LIGHT_2",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 27,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "cyanLight2"
                            },
                            "defaultValue": " 'cyanLight2' as const"
                        },
                        {
                            "id": 520,
                            "name": "GRAY",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 40,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "gray"
                            },
                            "defaultValue": " 'gray' as const"
                        },
                        {
                            "id": 516,
                            "name": "GRAY_BRIGHT",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 32,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "grayBright"
                            },
                            "defaultValue": " 'grayBright' as const"
                        },
                        {
                            "id": 517,
                            "name": "GRAY_DARK_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 34,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "grayDark1"
                            },
                            "defaultValue": " 'grayDark1' as const"
                        },
                        {
                            "id": 518,
                            "name": "GRAY_LIGHT_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 36,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "grayLight1"
                            },
                            "defaultValue": " 'grayLight1' as const"
                        },
                        {
                            "id": 519,
                            "name": "GRAY_LIGHT_2",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 38,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "grayLight2"
                            },
                            "defaultValue": " 'grayLight2' as const"
                        },
                        {
                            "id": 525,
                            "name": "GREEN",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 51,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "green"
                            },
                            "defaultValue": " 'green' as const"
                        },
                        {
                            "id": 521,
                            "name": "GREEN_BRIGHT",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 43,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "greenBright"
                            },
                            "defaultValue": " 'greenBright' as const"
                        },
                        {
                            "id": 522,
                            "name": "GREEN_DARK_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 45,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "greenDark1"
                            },
                            "defaultValue": " 'greenDark1' as const"
                        },
                        {
                            "id": 523,
                            "name": "GREEN_LIGHT_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 47,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "greenLight1"
                            },
                            "defaultValue": " 'greenLight1' as const"
                        },
                        {
                            "id": 524,
                            "name": "GREEN_LIGHT_2",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 49,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "greenLight2"
                            },
                            "defaultValue": " 'greenLight2' as const"
                        },
                        {
                            "id": 530,
                            "name": "ORANGE",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 62,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "orange"
                            },
                            "defaultValue": " 'orange' as const"
                        },
                        {
                            "id": 526,
                            "name": "ORANGE_BRIGHT",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 54,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "orangeBright"
                            },
                            "defaultValue": " 'orangeBright' as const"
                        },
                        {
                            "id": 527,
                            "name": "ORANGE_DARK_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 56,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "orangeDark1"
                            },
                            "defaultValue": " 'orangeDark1' as const"
                        },
                        {
                            "id": 528,
                            "name": "ORANGE_LIGHT_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 58,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "orangeLight1"
                            },
                            "defaultValue": " 'orangeLight1' as const"
                        },
                        {
                            "id": 529,
                            "name": "ORANGE_LIGHT_2",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 60,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "orangeLight2"
                            },
                            "defaultValue": " 'orangeLight2' as const"
                        },
                        {
                            "id": 535,
                            "name": "PINK",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 73,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "pink"
                            },
                            "defaultValue": " 'pink' as const"
                        },
                        {
                            "id": 531,
                            "name": "PINK_BRIGHT",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 65,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "pinkBright"
                            },
                            "defaultValue": " 'pinkBright' as const"
                        },
                        {
                            "id": 532,
                            "name": "PINK_DARK_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 67,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "pinkDark1"
                            },
                            "defaultValue": " 'pinkDark1' as const"
                        },
                        {
                            "id": 533,
                            "name": "PINK_LIGHT_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 69,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "pinkLight1"
                            },
                            "defaultValue": " 'pinkLight1' as const"
                        },
                        {
                            "id": 534,
                            "name": "PINK_LIGHT_2",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 71,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "pinkLight2"
                            },
                            "defaultValue": " 'pinkLight2' as const"
                        },
                        {
                            "id": 540,
                            "name": "PURPLE",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 84,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "purple"
                            },
                            "defaultValue": " 'purple' as const"
                        },
                        {
                            "id": 536,
                            "name": "PURPLE_BRIGHT",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 76,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "purpleBright"
                            },
                            "defaultValue": " 'purpleBright' as const"
                        },
                        {
                            "id": 537,
                            "name": "PURPLE_DARK_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 78,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "purpleDark1"
                            },
                            "defaultValue": " 'purpleDark1' as const"
                        },
                        {
                            "id": 538,
                            "name": "PURPLE_LIGHT_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 80,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "purpleLight1"
                            },
                            "defaultValue": " 'purpleLight1' as const"
                        },
                        {
                            "id": 539,
                            "name": "PURPLE_LIGHT_2",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 82,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "purpleLight2"
                            },
                            "defaultValue": " 'purpleLight2' as const"
                        },
                        {
                            "id": 545,
                            "name": "RED",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 95,
                                    "character": 7
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "red"
                            },
                            "defaultValue": " 'red' as const"
                        },
                        {
                            "id": 541,
                            "name": "RED_BRIGHT",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 87,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "redBright"
                            },
                            "defaultValue": " 'redBright' as const"
                        },
                        {
                            "id": 542,
                            "name": "RED_DARK_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 89,
                                    "character": 14
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "redDark1"
                            },
                            "defaultValue": " 'redDark1' as const"
                        },
                        {
                            "id": 543,
                            "name": "RED_LIGHT_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 91,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "redLight1"
                            },
                            "defaultValue": " 'redLight1' as const"
                        },
                        {
                            "id": 544,
                            "name": "RED_LIGHT_2",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 93,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "redLight2"
                            },
                            "defaultValue": " 'redLight2' as const"
                        },
                        {
                            "id": 550,
                            "name": "TEAL",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 106,
                                    "character": 8
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "teal"
                            },
                            "defaultValue": " 'teal' as const"
                        },
                        {
                            "id": 546,
                            "name": "TEAL_BRIGHT",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 98,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "tealBright"
                            },
                            "defaultValue": " 'tealBright' as const"
                        },
                        {
                            "id": 547,
                            "name": "TEAL_DARK_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 100,
                                    "character": 15
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "tealDark1"
                            },
                            "defaultValue": " 'tealDark1' as const"
                        },
                        {
                            "id": 548,
                            "name": "TEAL_LIGHT_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 102,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "tealLight1"
                            },
                            "defaultValue": " 'tealLight1' as const"
                        },
                        {
                            "id": 549,
                            "name": "TEAL_LIGHT_2",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 104,
                                    "character": 16
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "tealLight2"
                            },
                            "defaultValue": " 'tealLight2' as const"
                        },
                        {
                            "id": 555,
                            "name": "YELLOW",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 117,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "yellow"
                            },
                            "defaultValue": " 'yellow' as const"
                        },
                        {
                            "id": 551,
                            "name": "YELLOW_BRIGHT",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 109,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "yellowBright"
                            },
                            "defaultValue": " 'yellowBright' as const"
                        },
                        {
                            "id": 552,
                            "name": "YELLOW_DARK_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 111,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "yellowDark1"
                            },
                            "defaultValue": " 'yellowDark1' as const"
                        },
                        {
                            "id": 553,
                            "name": "YELLOW_LIGHT_1",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 113,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "yellowLight1"
                            },
                            "defaultValue": " 'yellowLight1' as const"
                        },
                        {
                            "id": 554,
                            "name": "YELLOW_LIGHT_2",
                            "kind": 32,
                            "kindString": "Variable",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "tags": [
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/Colors"
                                    }
                                ]
                            },
                            "sources": [
                                {
                                    "fileName": "src/colors.ts",
                                    "line": 115,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "stringLiteral",
                                "value": "yellowLight2"
                            },
                            "defaultValue": " 'yellowLight2' as const"
                        }
                    ],
                    "groups": [
                        {
                            "title": "Variables",
                            "kind": 32,
                            "children": [
                                510,
                                506,
                                507,
                                508,
                                509,
                                515,
                                511,
                                512,
                                513,
                                514,
                                520,
                                516,
                                517,
                                518,
                                519,
                                525,
                                521,
                                522,
                                523,
                                524,
                                530,
                                526,
                                527,
                                528,
                                529,
                                535,
                                531,
                                532,
                                533,
                                534,
                                540,
                                536,
                                537,
                                538,
                                539,
                                545,
                                541,
                                542,
                                543,
                                544,
                                550,
                                546,
                                547,
                                548,
                                549,
                                555,
                                551,
                                552,
                                553,
                                554
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/colors.ts",
                            "line": 8,
                            "character": 12
                        }
                    ],
                    "type": {
                        "type": "intrinsic",
                        "name": "object"
                    }
                }
            ],
            "groups": [
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [556]
                },
                {
                    "title": "Object literals",
                    "kind": 2097152,
                    "children": [505]
                }
            ],
            "sources": [
                {
                    "fileName": "src/colors.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 10488,
            "name": "@airtable/blocks/ui: expandRecord",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/expand_record.ts",
            "comment": {},
            "children": [
                {
                    "id": 10489,
                    "name": "ExpandRecordOpts",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Options object for expanding a record."
                    },
                    "children": [
                        {
                            "id": 10490,
                            "name": "records",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If `records` is provided, the list will be used to page through records from the expanded record dialog."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/expand_record.ts",
                                    "line": 10,
                                    "character": 11
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "Record",
                                        "id": 1779
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [10490]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/expand_record.ts",
                            "line": 8,
                            "character": 33
                        }
                    ]
                },
                {
                    "id": 10491,
                    "name": "expandRecord",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Expands the given record in the Airtable UI.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {expandRecord} from '@airtable/blocks/ui';\nexpandRecord(record1, {\n    records: [record1, record2, record3],\n});\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/utils/expandRecord\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 10492,
                            "name": "expandRecord",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Expands the given record in the Airtable UI.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {expandRecord} from '@airtable/blocks/ui';\nexpandRecord(record1, {\n    records: [record1, record2, record3],\n});\n```"
                                    },
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/expandRecord\n"
                                    }
                                ]
                            },
                            "parameters": [
                                {
                                    "id": 10493,
                                    "name": "record",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The record to expand."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Record",
                                        "id": 1779
                                    }
                                },
                                {
                                    "id": 10494,
                                    "name": "opts",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {
                                        "isOptional": true
                                    },
                                    "comment": {
                                        "shortText": "An optional options object.\n"
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "ExpandRecordOpts",
                                        "id": 10489
                                    }
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "void"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/expand_record.ts",
                            "line": 28,
                            "character": 21
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [10489]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [10491]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/expand_record.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 10495,
            "name": "@airtable/blocks/ui: expandRecordList",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/expand_record_list.ts",
            "comment": {},
            "children": [
                {
                    "id": 10496,
                    "name": "ExpandRecordListOpts",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Options object for expanding a record list."
                    },
                    "children": [
                        {
                            "id": 10497,
                            "name": "fields",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The fields to include in the record cards. The primary field will always be shown. Duplicate fields will be removed."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/expand_record_list.ts",
                                    "line": 12,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "Field",
                                        "id": 1927
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [10497]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/expand_record_list.ts",
                            "line": 10,
                            "character": 30
                        }
                    ]
                },
                {
                    "id": 10498,
                    "name": "expandRecordList",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Expands a list of records in the Airtable UI.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {expandRecordList} from '@airtable/blocks/ui';\nexpandRecordList([record1, record2, record3]);\n\nexpandRecordList([record1, record2], {\n    fields: [field1, field2],\n});\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/utils/expandRecordList\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 10499,
                            "name": "expandRecordList",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Expands a list of records in the Airtable UI.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {expandRecordList} from '@airtable/blocks/ui';\nexpandRecordList([record1, record2, record3]);\n\nexpandRecordList([record1, record2], {\n    fields: [field1, field2],\n});\n```"
                                    },
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/expandRecordList\n"
                                    }
                                ]
                            },
                            "parameters": [
                                {
                                    "id": 10500,
                                    "name": "records",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The records to expand. Duplicate records will be removed."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Record",
                                                "id": 1779
                                            }
                                        ]
                                    }
                                },
                                {
                                    "id": 10501,
                                    "name": "opts",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {
                                        "isOptional": true
                                    },
                                    "comment": {
                                        "shortText": "An optional options object.\n"
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "ExpandRecordListOpts",
                                        "id": 10496
                                    }
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "void"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/expand_record_list.ts",
                            "line": 32,
                            "character": 25
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [10496]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [10498]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/expand_record_list.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 10502,
            "name": "@airtable/blocks/ui: expandRecordPickerAsync",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/expand_record_picker_async.ts",
            "comment": {},
            "children": [
                {
                    "id": 10503,
                    "name": "ExpandRecordPickerOpts",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Options object for expanding a record picker."
                    },
                    "children": [
                        {
                            "id": 10504,
                            "name": "fields",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The fields to include in the record cards. The primary field will always be shown. Duplicate fields will be removed."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/expand_record_picker_async.ts",
                                    "line": 12,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "Field",
                                        "id": 1927
                                    }
                                ]
                            }
                        },
                        {
                            "id": 10505,
                            "name": "shouldAllowCreatingRecord",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "If set to true, the user will be able to create an empty new record from the record picker."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/expand_record_picker_async.ts",
                                    "line": 14,
                                    "character": 29
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [10504, 10505]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/expand_record_picker_async.ts",
                            "line": 10,
                            "character": 32
                        }
                    ]
                },
                {
                    "id": 10506,
                    "name": "expandRecordPickerAsync",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Expands a list of records in the Airtable UI, and prompts the user to pick\none. The selected record is returned to the block, and the modal is\nautomatically closed.",
                        "text": "If the user dismisses the modal, or another one is opened before this one\nhas been closed, it will return null.\n",
                        "returns": "A Promise that resolves to the record chosen by the user or null.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {expandRecordPickerAsync} from '@airtable/blocks/ui';\n\nasync function pickRecordsAsync() {\n    const recordA = await expandRecordPickerAsync([record1, record2, record3]);\n    if (recordA !== null) {\n        alert(recordA.primaryCellValueAsString);\n    } else {\n        alert('no record picked');\n    }\n\n    const recordB = await expandRecordPickerAsync([record1, record2], {\n        fields: [field1, field2],\n    });\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/utils/expandRecordPickerAsync\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 10507,
                            "name": "expandRecordPickerAsync",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Expands a list of records in the Airtable UI, and prompts the user to pick\none. The selected record is returned to the block, and the modal is\nautomatically closed.",
                                "text": "If the user dismisses the modal, or another one is opened before this one\nhas been closed, it will return null.\n",
                                "returns": "A Promise that resolves to the record chosen by the user or null.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {expandRecordPickerAsync} from '@airtable/blocks/ui';\n\nasync function pickRecordsAsync() {\n    const recordA = await expandRecordPickerAsync([record1, record2, record3]);\n    if (recordA !== null) {\n        alert(recordA.primaryCellValueAsString);\n    } else {\n        alert('no record picked');\n    }\n\n    const recordB = await expandRecordPickerAsync([record1, record2], {\n        fields: [field1, field2],\n    });\n}\n```"
                                    },
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/expandRecordPickerAsync\n"
                                    }
                                ]
                            },
                            "parameters": [
                                {
                                    "id": 10508,
                                    "name": "records",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "the records the user can pick from. Duplicate records will be removed."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "Record",
                                                "id": 1779
                                            }
                                        ]
                                    }
                                },
                                {
                                    "id": 10509,
                                    "name": "opts",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {
                                        "isOptional": true
                                    },
                                    "comment": {
                                        "shortText": "An optional options object."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "ExpandRecordPickerOpts",
                                        "id": 10503
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Promise",
                                "typeArguments": [
                                    {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Record",
                                                "id": 1779
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/expand_record_picker_async.ts",
                            "line": 48,
                            "character": 38
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [10503]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [10506]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/expand_record_picker_async.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 14406,
            "name": "@airtable/blocks/ui: initializeBlock",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/initialize_block.tsx",
            "comment": {},
            "children": [
                {
                    "id": 14408,
                    "name": "initializeBlock",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "`initializeBlock` takes the top-level React component in your tree and renders it. It is conceptually similar to `ReactDOM.render`, but takes care of some Blocks-specific things.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {initializeBlock} from '@airtable/blocks/ui';\nimport React from 'react';\n\nfunction App() {\n    return (\n        <div>Hello world 🚀</div>\n    );\n}\n\ninitializeBlock(() => <App />);\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/utils/initializeBlock\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14409,
                            "name": "initializeBlock",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "`initializeBlock` takes the top-level React component in your tree and renders it. It is conceptually similar to `ReactDOM.render`, but takes care of some Blocks-specific things.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {initializeBlock} from '@airtable/blocks/ui';\nimport React from 'react';\n\nfunction App() {\n    return (\n        <div>Hello world 🚀</div>\n    );\n}\n\ninitializeBlock(() => <App />);\n```"
                                    },
                                    {
                                        "tag": "docspath",
                                        "text": "UI/utils/initializeBlock\n"
                                    }
                                ]
                            },
                            "parameters": [
                                {
                                    "id": 14410,
                                    "name": "getEntryElement",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "A function that returns your React Node.\n"
                                    },
                                    "type": {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 14411,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {
                                                "isExported": true
                                            },
                                            "signatures": [
                                                {
                                                    "id": 14412,
                                                    "name": "__call",
                                                    "kind": 4096,
                                                    "kindString": "Call signature",
                                                    "flags": {},
                                                    "type": {
                                                        "type": "reference",
                                                        "name": "React.ReactNode"
                                                    }
                                                }
                                            ],
                                            "sources": [
                                                {
                                                    "fileName": "src/ui/initialize_block.tsx",
                                                    "line": 30,
                                                    "character": 41
                                                }
                                            ]
                                        }
                                    }
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "void"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/initialize_block.tsx",
                            "line": 30,
                            "character": 24
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [14408]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/initialize_block.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 11273,
            "name": "@airtable/blocks/ui: useBase",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/use_base.ts",
            "comment": {},
            "children": [
                {
                    "id": 11274,
                    "name": "useBase",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true,
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A hook for connecting a React component to your base's schema. This returns a {@link Base}\ninstance and will re-render your component whenever the base's schema changes. That means any\nchange to your base like tables being added or removed, fields getting renamed, etc. It excludes\nany change to the actual records in the base.",
                        "text": "`useBase` should meet most of your needs for working with base schema. If you need more granular\ncontrol of when your component updates or want to do anything other than re-render, the lower\nlevel {@link useWatchable} hook might help.\n",
                        "returns": "The current base.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {useBase} from '@airtable/blocks/ui';\n\n// renders a list of tables and automatically updates\nfunction TableList() {\n     const base = useBase();\n\n     const tables = base.tables.map(table => {\n         return <li key={table.id}>{table.name}</li>;\n     });\n\n     return <ul>{tables}</ul>;\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/hooks/useBase"
                            },
                            {
                                "tag": "hook",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 11275,
                            "name": "useBase",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A hook for connecting a React component to your base's schema. This returns a {@link Base}\ninstance and will re-render your component whenever the base's schema changes. That means any\nchange to your base like tables being added or removed, fields getting renamed, etc. It excludes\nany change to the actual records in the base.",
                                "text": "`useBase` should meet most of your needs for working with base schema. If you need more granular\ncontrol of when your component updates or want to do anything other than re-render, the lower\nlevel {@link useWatchable} hook might help.\n",
                                "returns": "The current base.\n"
                            },
                            "type": {
                                "type": "reference",
                                "name": "Base",
                                "id": 2597
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/use_base.ts",
                            "line": 36,
                            "character": 13
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [11274]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/use_base.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 14439,
            "name": "@airtable/blocks/ui: useGlobalConfig",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/use_global_config.ts",
            "comment": {},
            "children": [
                {
                    "id": 14440,
                    "name": "useGlobalConfig",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Returns the {@link GlobalConfig} and updates whenever any key in {@link GlobalConfig} changes.",
                        "returns": "The block's global config.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {useGlobalConfig} from '@airtable/blocks/ui';\n\nfunction SyncedCounter() {\n    const globalConfig = useGlobalConfig();\n    const count = globalConfig.get('count');\n\n    const increment = () => globalConfig.setAsync('count', count + 1);\n    const decrement = () => globalConfig.setAsync('count', count - 1);\n    const isEnabled = globalConfig.hasPermissionToSet('count');\n\n    return (\n        <React.Fragment>\n            <button onClick={decrement} disabled={!isEnabled}>-</button>\n            {count}\n            <button onClick={increment} disabled={!isEnabled}>+</button>\n        </React.Fragment>\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/hooks/useGlobalConfig"
                            },
                            {
                                "tag": "hook",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14441,
                            "name": "useGlobalConfig",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Returns the {@link GlobalConfig} and updates whenever any key in {@link GlobalConfig} changes.",
                                "returns": "The block's global config.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {useGlobalConfig} from '@airtable/blocks/ui';\n\nfunction SyncedCounter() {\n    const globalConfig = useGlobalConfig();\n    const count = globalConfig.get('count');\n\n    const increment = () => globalConfig.setAsync('count', count + 1);\n    const decrement = () => globalConfig.setAsync('count', count - 1);\n    const isEnabled = globalConfig.hasPermissionToSet('count');\n\n    return (\n        <React.Fragment>\n            <button onClick={decrement} disabled={!isEnabled}>-</button>\n            {count}\n            <button onClick={increment} disabled={!isEnabled}>+</button>\n        </React.Fragment>\n    );\n}\n```"
                                    },
                                    {
                                        "tag": "docspath",
                                        "text": "UI/hooks/useGlobalConfig"
                                    },
                                    {
                                        "tag": "hook",
                                        "text": "\n"
                                    }
                                ]
                            },
                            "type": {
                                "type": "reference",
                                "name": "GlobalConfig",
                                "id": 14805
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/use_global_config.ts",
                            "line": 35,
                            "character": 39
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [14440]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/use_global_config.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 12001,
            "name": "@airtable/blocks/ui: useLoadable",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/use_loadable.ts",
            "comment": {},
            "children": [
                {
                    "id": 12002,
                    "name": "LoadableModel",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "A model that can be loaded.\nUsually a {@link Cursor}, {@link RecordQueryResult}, or a {@link ViewMetadataQueryResult}."
                    },
                    "sources": [
                        {
                            "fileName": "src/ui/use_loadable.ts",
                            "line": 14,
                            "character": 23
                        }
                    ]
                },
                {
                    "id": 12020,
                    "name": "UseLoadableOpts",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {},
                    "comment": {
                        "shortText": "Options object for the {@link useLoadable} hook."
                    },
                    "children": [
                        {
                            "id": 12021,
                            "name": "shouldSuspend",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "Whether suspense mode is enabled. If suspense is disabled, you need to manually check `model.isDataLoaded` so you don't use your model before it's ready."
                            },
                            "sources": [
                                {
                                    "fileName": "src/ui/use_loadable.ts",
                                    "line": 34,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "false"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "true"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [12021]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/use_loadable.ts",
                            "line": 32,
                            "character": 25
                        }
                    ]
                },
                {
                    "id": 12023,
                    "name": "useLoadable",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "When you're writing a block, not all of the data in your base is available to work with straight\naway. We need to load it from Airtable first. This hook is a low-level tool for managing that.\nYou might not need to use it directly though - if you're working with a {@link RecordQueryResult}, try\n{@link useRecords}, {@link useRecordIds}, or {@link useRecordById} first.",
                        "text": "When you need to use a loadable model, `useLoadable(theModel)` will make sure that the model is\nloaded when your component mounts, and unloaded when your component unmounts. By default, you\ndon't need to worry about waiting for the data to load - the hook uses React Suspense to make\nsure the rest of your component doesn't run until the data is loaded. Whilst the data is\nloading, the entire block will show a loading indicator. If you want to change where that\nindicator shows or how it looks, use {@link https://reactjs.org/docs/react-api.html#reactsuspense|`<React.Suspense />`}\naround the component that uses the hook.\n\nYou can pass several models to `useLoadable` in an array - it will load all of them simultaneously.\nWe'll memoize this array using shallow equality, so there's no need to use `useMemo`.\n\nIf you need more control, you can pass `{shouldSuspend: false}` as a second argument to\nthe hook. In that case though, `useLoadable` will cause your component to re-render whenever the\nload-state of any model you passed in changes, and you should check each model's `.isDataLoaded`\n property before trying to use the data you loaded.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {cursor} from '@airtable/blocks';\nimport {useLoadable, useWatchable} from '@airtable/blocks/ui';\n\n function SelectedRecordIds() {\n     // load selected records\n     useLoadable(cursor);\n\n     // re-render whenever the list of selected records changes\n     useWatchable(cursor, ['selectedRecordIds']);\n\n     // render the list of selected record ids\n     return <div>Selected records: {cursor.selectedRecordIds.join(', ')}</div>;\n }\n```\n"
                            },
                            {
                                "tag": "example",
                                "text": "\n```js\n import {useLoadable} from '@airtable/blocks/ui';\n\n function LoadTwoQueryResults({queryResultA, queryResultB}) {\n     // load the queryResults:\n     useLoadable([queryResultA, queryResultB]);\n\n     // now, we can use the data\n     return <SomeFancyComponent />;\n }\n```\n"
                            },
                            {
                                "tag": "example",
                                "text": "\n```js\n import {useLoadable, useBase} from '@airtable/blocks/ui';\n\n function LoadAllRecords() {\n     const base = useBase();\n\n     // get a query result for every table in the base:\n     const queryResults = base.tables.map(table => table.selectRecords());\n\n     // load them all:\n     useLoadable(queryResults);\n\n     // use the data:\n     return <SomeFancyComponent queryResults={queryResults} />;\n }\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/hooks/useLoadable"
                            },
                            {
                                "tag": "hook",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 12024,
                            "name": "useLoadable",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "When you're writing a block, not all of the data in your base is available to work with straight\naway. We need to load it from Airtable first. This hook is a low-level tool for managing that.\nYou might not need to use it directly though - if you're working with a {@link RecordQueryResult}, try\n{@link useRecords}, {@link useRecordIds}, or {@link useRecordById} first.",
                                "text": "When you need to use a loadable model, `useLoadable(theModel)` will make sure that the model is\nloaded when your component mounts, and unloaded when your component unmounts. By default, you\ndon't need to worry about waiting for the data to load - the hook uses React Suspense to make\nsure the rest of your component doesn't run until the data is loaded. Whilst the data is\nloading, the entire block will show a loading indicator. If you want to change where that\nindicator shows or how it looks, use {@link https://reactjs.org/docs/react-api.html#reactsuspense|`<React.Suspense />`}\naround the component that uses the hook.\n\nYou can pass several models to `useLoadable` in an array - it will load all of them simultaneously.\nWe'll memoize this array using shallow equality, so there's no need to use `useMemo`.\n\nIf you need more control, you can pass `{shouldSuspend: false}` as a second argument to\nthe hook. In that case though, `useLoadable` will cause your component to re-render whenever the\nload-state of any model you passed in changes, and you should check each model's `.isDataLoaded`\n property before trying to use the data you loaded.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {cursor} from '@airtable/blocks';\nimport {useLoadable, useWatchable} from '@airtable/blocks/ui';\n\n function SelectedRecordIds() {\n     // load selected records\n     useLoadable(cursor);\n\n     // re-render whenever the list of selected records changes\n     useWatchable(cursor, ['selectedRecordIds']);\n\n     // render the list of selected record ids\n     return <div>Selected records: {cursor.selectedRecordIds.join(', ')}</div>;\n }\n```\n"
                                    },
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n import {useLoadable} from '@airtable/blocks/ui';\n\n function LoadTwoQueryResults({queryResultA, queryResultB}) {\n     // load the queryResults:\n     useLoadable([queryResultA, queryResultB]);\n\n     // now, we can use the data\n     return <SomeFancyComponent />;\n }\n```\n"
                                    },
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n import {useLoadable, useBase} from '@airtable/blocks/ui';\n\n function LoadAllRecords() {\n     const base = useBase();\n\n     // get a query result for every table in the base:\n     const queryResults = base.tables.map(table => table.selectRecords());\n\n     // load them all:\n     useLoadable(queryResults);\n\n     // use the data:\n     return <SomeFancyComponent queryResults={queryResults} />;\n }\n```"
                                    },
                                    {
                                        "tag": "docspath",
                                        "text": "UI/hooks/useLoadable"
                                    },
                                    {
                                        "tag": "hook",
                                        "text": "\n"
                                    }
                                ]
                            },
                            "parameters": [
                                {
                                    "id": 12025,
                                    "name": "models",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The models to load."
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "reference",
                                                                "name": "LoadableModel",
                                                                "id": 12002
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "null"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "reference",
                                                "name": "LoadableModel",
                                                "id": 12002
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "id": 12026,
                                    "name": "opts",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Optional options to control how the hook works.\n"
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "UseLoadableOpts",
                                        "id": 12020
                                    },
                                    "defaultValue": " {shouldSuspend: true}"
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "void"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/use_loadable.ts",
                            "line": 112,
                            "character": 35
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [12002, 12020]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [12023]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/use_loadable.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 14413,
            "name": "@airtable/blocks/ui: useRecords",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/use_records.ts",
            "comment": {},
            "children": [
                {
                    "id": 14414,
                    "name": "AnyQueryResult",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/ui/use_records.ts",
                            "line": 10,
                            "character": 19
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "reference",
                                "name": "TableOrViewQueryResult",
                                "id": 1321
                            },
                            {
                                "type": "reference",
                                "name": "LinkedRecordsQueryResult",
                                "id": 1546
                            }
                        ]
                    }
                },
                {
                    "id": 14425,
                    "name": "useRecordById",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A hook for working with a single record from a query result. Automatically handles loading data\nin the query result and updating your component when the records cell values etc. change.",
                        "text": "Often used with {@link useRecordIds} to render a list of records where each list item only\nupdates when the specific record it concerns changes.\n",
                        "returns": "The record, or null if no query result was passed in or no record with\nthat ID exists in the query result.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\n import {useRecordById, useRecordIds, useBase} from '@airtable/blocks';\n\n // this component concerns a single record - it only updates when that specific record updates\n function RecordListItem({queryResult, recordId}) {\n     const record = useRecordById(queryResult, recordId);\n     return <li>{record.primaryCellValueAsString}</li>;\n }\n\n // this component renders a list of records, but doesn't update when their cell values change -\n // that's left up to RecordListItem\n function RecordList() {\n     // get a query result for the records in the first table\n     const base = useBase();\n     const table = base.tables[0];\n     const queryResult = table.selectRecords();\n\n     // grab all the record ids from that query result\n     const recordIds = useRecordIds(queryResult);\n\n     // render a list of records:\n     return (\n         <ul>\n             {recordsIds.map(recordId => {\n                 return <RecordListItem key={recordId} recordId={recordId} queryResult={queryResult} />\n             })}\n         </ul>\n     );\n }\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/hooks/useRecordById"
                            },
                            {
                                "tag": "hook",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14426,
                            "name": "useRecordById",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A hook for working with a single record from a query result. Automatically handles loading data\nin the query result and updating your component when the records cell values etc. change.",
                                "text": "Often used with {@link useRecordIds} to render a list of records where each list item only\nupdates when the specific record it concerns changes.\n",
                                "returns": "The record, or null if no query result was passed in or no record with\nthat ID exists in the query result.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n import {useRecordById, useRecordIds, useBase} from '@airtable/blocks';\n\n // this component concerns a single record - it only updates when that specific record updates\n function RecordListItem({queryResult, recordId}) {\n     const record = useRecordById(queryResult, recordId);\n     return <li>{record.primaryCellValueAsString}</li>;\n }\n\n // this component renders a list of records, but doesn't update when their cell values change -\n // that's left up to RecordListItem\n function RecordList() {\n     // get a query result for the records in the first table\n     const base = useBase();\n     const table = base.tables[0];\n     const queryResult = table.selectRecords();\n\n     // grab all the record ids from that query result\n     const recordIds = useRecordIds(queryResult);\n\n     // render a list of records:\n     return (\n         <ul>\n             {recordsIds.map(recordId => {\n                 return <RecordListItem key={recordId} recordId={recordId} queryResult={queryResult} />\n             })}\n         </ul>\n     );\n }\n```"
                                    },
                                    {
                                        "tag": "docspath",
                                        "text": "UI/hooks/useRecordById"
                                    },
                                    {
                                        "tag": "hook",
                                        "text": "\n"
                                    }
                                ]
                            },
                            "parameters": [
                                {
                                    "id": 14427,
                                    "name": "queryResult",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The query result you want a record from."
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "AnyQueryResult",
                                                "id": 14414
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "id": 14428,
                                    "name": "recordId",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The ID of the record you want from the query result."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "RecordId",
                                        "id": 645
                                    }
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "Record",
                                        "id": 1779
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/use_records.ts",
                            "line": 152,
                            "character": 29
                        }
                    ]
                },
                {
                    "id": 14415,
                    "name": "useRecordIds",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A hook for working with the set of record IDs in a particular query result. Automatically\nhandles loading data in the query result and updating your component when the underlying\ndata changes.",
                        "text": "This hook doesn't re-render when the data _inside_ the records changes - only when records are\nadded, removed, or re-ordered.\n",
                        "returns": "The array of record IDs in the query result, or null if no\nquery result was passed in.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\n import {useRecordIds, useBase} from '@airtable/blocks/ui';\n\n function RecordCount() {\n     // get a query result for the records in the first table\n     const base = useBase();\n     const table = base.tables[0];\n     const queryResult = table.selectRecords();\n\n     // grab all the record ids from that QueryResult\n     const recordIds = useRecordIds(queryResult);\n\n     // return the count\n     return <span>record count in {table.name}: {recordIds.length}</span>;\n }\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/hooks/useRecordIds"
                            },
                            {
                                "tag": "hook",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14416,
                            "name": "useRecordIds",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A hook for working with the set of record IDs in a particular query result. Automatically\nhandles loading data in the query result and updating your component when the underlying\ndata changes.",
                                "text": "This hook doesn't re-render when the data _inside_ the records changes - only when records are\nadded, removed, or re-ordered.\n",
                                "returns": "The array of record IDs in the query result, or null if no\nquery result was passed in.\n"
                            },
                            "parameters": [
                                {
                                    "id": 14417,
                                    "name": "queryResult",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The query result you want the record ids from."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "AnyQueryResult",
                                        "id": 14414
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "RecordId",
                                        "id": 645
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14418,
                            "name": "useRecordIds",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A hook for working with the set of record IDs in a particular query result. Automatically\nhandles loading data in the query result and updating your component when the underlying\ndata changes.",
                                "text": "This hook doesn't re-render when the data _inside_ the records changes - only when records are\nadded, removed, or re-ordered.\n",
                                "returns": "The array of record IDs in the query result, or null if no\nquery result was passed in.\n"
                            },
                            "parameters": [
                                {
                                    "id": 14419,
                                    "name": "queryResult",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The query result you want the record ids from."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "null"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/use_records.ts",
                            "line": 13,
                            "character": 28
                        },
                        {
                            "fileName": "src/ui/use_records.ts",
                            "line": 15,
                            "character": 28
                        },
                        {
                            "fileName": "src/ui/use_records.ts",
                            "line": 49,
                            "character": 28
                        }
                    ]
                },
                {
                    "id": 14420,
                    "name": "useRecords",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A hook for working with all the records (including their colors and cell values) in a\nparticular query result. Automatically handles loading data in the query result and updating\nyour component when the underlying data changes.",
                        "text": "This hook re-renders when any data concerning the records changing - that's useful, but can\ncause re-renders quite often, meaning {@link useRecordIds} or {@link useRecordById} could be\nmore appropriate depending on your use case.\n",
                        "returns": "The records in the query result, or null if no query result was\npassed in.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\n import {useRecords, useBase} from '@airtable/blocks';\n\n function RecordList() {\n     // get a query result for the records in the first table\n     const base = useBase();\n     const table = base.tables[0];\n     const queryResult = table.selectRecords();\n\n     // grab all the records from that query result\n     const records = useRecords(queryResult);\n\n     // render a list of records:\n     return (\n         <ul>\n             {records.map(record => {\n                 return <li key={record.id}>{record.primaryCellValueAsString}</li>\n             })}\n         </ul>\n     );\n }\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/hooks/useRecords"
                            },
                            {
                                "tag": "hook",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14421,
                            "name": "useRecords",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A hook for working with all the records (including their colors and cell values) in a\nparticular query result. Automatically handles loading data in the query result and updating\nyour component when the underlying data changes.",
                                "text": "This hook re-renders when any data concerning the records changing - that's useful, but can\ncause re-renders quite often, meaning {@link useRecordIds} or {@link useRecordById} could be\nmore appropriate depending on your use case.\n",
                                "returns": "The records in the query result, or null if no query result was\npassed in.\n"
                            },
                            "parameters": [
                                {
                                    "id": 14422,
                                    "name": "queryResult",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The query result you want the records from."
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "AnyQueryResult",
                                        "id": 14414
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "Array",
                                "typeArguments": [
                                    {
                                        "type": "reference",
                                        "name": "Record",
                                        "id": 1779
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14423,
                            "name": "useRecords",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A hook for working with all the records (including their colors and cell values) in a\nparticular query result. Automatically handles loading data in the query result and updating\nyour component when the underlying data changes.",
                                "text": "This hook re-renders when any data concerning the records changing - that's useful, but can\ncause re-renders quite often, meaning {@link useRecordIds} or {@link useRecordById} could be\nmore appropriate depending on your use case.\n",
                                "returns": "The records in the query result, or null if no query result was\npassed in.\n"
                            },
                            "parameters": [
                                {
                                    "id": 14424,
                                    "name": "queryResult",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The query result you want the records from."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "null"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/use_records.ts",
                            "line": 56,
                            "character": 26
                        },
                        {
                            "fileName": "src/ui/use_records.ts",
                            "line": 58,
                            "character": 26
                        },
                        {
                            "fileName": "src/ui/use_records.ts",
                            "line": 99,
                            "character": 26
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [14414]
                },
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [14425, 14415, 14420]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/use_records.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 14429,
            "name": "@airtable/blocks/ui: useSession",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/use_session.ts",
            "comment": {},
            "children": [
                {
                    "id": 14430,
                    "name": "useSession",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true,
                        "isConst": true
                    },
                    "comment": {
                        "shortText": "A hook for connecting a React component to the current session. This returns a {@link Session}\ninstance and will re-render your component whenever the session changes (e.g. when the current user's\npermissions change or when the current user's name changes).",
                        "text": "`useSession` should meet most of your needs for working with {@link Session}. If you need more granular\ncontrol of when your component updates or want to do anything other than re-render, the lower\nlevel {@link useWatchable} hook might help.\n",
                        "returns": "The current session.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {CollaboratorToken, useSession} from '@airtable/blocks/ui';\n\n// Says hello to the current user and updates in realtime if the current user's\n// name or profile pic changes.\nfunction CurrentUserGreeter() {\n    const session = useSession();\n    return (\n        <React.Fragment>\n            Hello,\n            <CollaboratorToken collaborator={session.currentUser} />!\n        </React.Fragment>\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/hooks/useSession"
                            },
                            {
                                "tag": "hook",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14431,
                            "name": "useSession",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A hook for connecting a React component to the current session. This returns a {@link Session}\ninstance and will re-render your component whenever the session changes (e.g. when the current user's\npermissions change or when the current user's name changes).",
                                "text": "`useSession` should meet most of your needs for working with {@link Session}. If you need more granular\ncontrol of when your component updates or want to do anything other than re-render, the lower\nlevel {@link useWatchable} hook might help.\n",
                                "returns": "The current session.\n"
                            },
                            "type": {
                                "type": "reference",
                                "name": "Session",
                                "id": 2724
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/use_session.ts",
                            "line": 36,
                            "character": 16
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [14430]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/use_session.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 14432,
            "name": "@airtable/blocks/ui: useSettingsButton",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/use_settings_button.ts",
            "comment": {},
            "children": [
                {
                    "id": 14433,
                    "name": "useSettingsButton",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A hook for using the settings button that lives outside the block's viewport. It will show\nthe settings button (hidden by default) and call the provided callback whenever the settings\nbutton is clicked. It will also re-render your component when the settings button is clicked.",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {useSettingsButton} from '@airtable/blocks/ui';\nimport {useState} from 'react';\n\nfunction ComponentWithSettings() {\n     const [isShowingSettings, setIsShowingSettings] = useState(false);\n     useSettingsButton(function() {\n         setIsShowingSettings(!isShowingSettings);\n     });\n\n     if (isShowingSettings) {\n         return <SettingsComponent />\n     }\n     return <MainComponent />\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/hooks/useSettingsButton"
                            },
                            {
                                "tag": "hook",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14434,
                            "name": "useSettingsButton",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A hook for using the settings button that lives outside the block's viewport. It will show\nthe settings button (hidden by default) and call the provided callback whenever the settings\nbutton is clicked. It will also re-render your component when the settings button is clicked.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {useSettingsButton} from '@airtable/blocks/ui';\nimport {useState} from 'react';\n\nfunction ComponentWithSettings() {\n     const [isShowingSettings, setIsShowingSettings] = useState(false);\n     useSettingsButton(function() {\n         setIsShowingSettings(!isShowingSettings);\n     });\n\n     if (isShowingSettings) {\n         return <SettingsComponent />\n     }\n     return <MainComponent />\n}\n```"
                                    },
                                    {
                                        "tag": "docspath",
                                        "text": "UI/hooks/useSettingsButton"
                                    },
                                    {
                                        "tag": "hook",
                                        "text": "\n"
                                    }
                                ]
                            },
                            "parameters": [
                                {
                                    "id": 14435,
                                    "name": "onClickCallback",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "A callback to call when the button is clicked.\n"
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "FlowAnyFunction"
                                    }
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "void"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/use_settings_button.ts",
                            "line": 34,
                            "character": 41
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [14433]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/use_settings_button.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 12027,
            "name": "@airtable/blocks/ui: useViewMetadata",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/use_view_metadata.ts",
            "comment": {},
            "children": [
                {
                    "id": 12028,
                    "name": "useViewMetadata",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Returns a {@link ViewMetadataQueryResult} for the specified view and re-renders whenever the\nview metadata changes. Suspends if the view is not already loaded.",
                        "returns": "Metadata for the specified view.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {useBase, useViewMetadata} from '@airtable/blocks/ui';\n\nfunction ViewFields({view}) {\n    const viewMetadata = useViewMetadata(view);\n\n    return (\n        <ul>\n            {viewMetadata.visibleFields.map(field => (\n                <li key={field.id}>{field.name}</li>\n            ))}\n        </ul>\n    );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/hooks/useViewMetadata"
                            },
                            {
                                "tag": "hook",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 12029,
                            "name": "useViewMetadata",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Returns a {@link ViewMetadataQueryResult} for the specified view and re-renders whenever the\nview metadata changes. Suspends if the view is not already loaded.",
                                "returns": "Metadata for the specified view.\n"
                            },
                            "parameters": [
                                {
                                    "id": 12030,
                                    "name": "viewOrViewMetadataQueryResult",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The {@link View} or {@link ViewMetadataQueryResult} to watch and use metadata from."
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "View",
                                                "id": 2280
                                            },
                                            {
                                                "type": "reference",
                                                "name": "ViewMetadataQueryResult",
                                                "id": 2181
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "ViewMetadataQueryResult",
                                "id": 2181
                            }
                        },
                        {
                            "id": 12031,
                            "name": "useViewMetadata",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Returns a {@link ViewMetadataQueryResult} for the specified view and re-renders whenever the\nview metadata changes. Suspends if the view is not already loaded.",
                                "returns": "Metadata for the specified view.\n"
                            },
                            "parameters": [
                                {
                                    "id": 12032,
                                    "name": "viewOrViewMetadataQueryResult",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {
                                        "isOptional": true
                                    },
                                    "comment": {
                                        "shortText": "The {@link View} or {@link ViewMetadataQueryResult} to watch and use metadata from."
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "undefined"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "null"
                            }
                        },
                        {
                            "id": 12033,
                            "name": "useViewMetadata",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Returns a {@link ViewMetadataQueryResult} for the specified view and re-renders whenever the\nview metadata changes. Suspends if the view is not already loaded.",
                                "returns": "Metadata for the specified view.\n"
                            },
                            "parameters": [
                                {
                                    "id": 12034,
                                    "name": "viewOrViewMetadataQueryResult",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {
                                        "isOptional": true
                                    },
                                    "comment": {
                                        "shortText": "The {@link View} or {@link ViewMetadataQueryResult} to watch and use metadata from."
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "View",
                                                "id": 2280
                                            },
                                            {
                                                "type": "reference",
                                                "name": "ViewMetadataQueryResult",
                                                "id": 2181
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "undefined"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "ViewMetadataQueryResult",
                                        "id": 2181
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/use_view_metadata.ts",
                            "line": 8,
                            "character": 24
                        },
                        {
                            "fileName": "src/ui/use_view_metadata.ts",
                            "line": 12,
                            "character": 24
                        },
                        {
                            "fileName": "src/ui/use_view_metadata.ts",
                            "line": 14,
                            "character": 24
                        },
                        {
                            "fileName": "src/ui/use_view_metadata.ts",
                            "line": 44,
                            "character": 24
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [12028]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/use_view_metadata.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 14436,
            "name": "@airtable/blocks/ui: useViewport",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/use_viewport.ts",
            "comment": {},
            "children": [
                {
                    "id": 14437,
                    "name": "useViewport",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Returns the current {@link Viewport} object and updates whenever the viewport size, constraints,\nor fullscreen status changes.",
                        "returns": "The current viewport.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {useViewport} from '@airtable/blocks/ui';\n\nfunction ViewportSize() {\n     const viewport = useViewport();\n\n     const toggleFullscreen = () => {\n         if (viewport.isFullscreen) {\n             viewport.exitFullscreen();\n         } else {\n             viewport.enterFullscreenIfPossible();\n         }\n     };\n\n     return (\n         <Fragment>\n             <button onClick={toggleFullscreen}>Toggle fullscreen</button>\n\n             viewport size: {viewport.size.width}x{viewport.size.height}\n         </Fragment>\n     );\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/hooks/useViewport"
                            },
                            {
                                "tag": "hook",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 14438,
                            "name": "useViewport",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "Returns the current {@link Viewport} object and updates whenever the viewport size, constraints,\nor fullscreen status changes.",
                                "returns": "The current viewport.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {useViewport} from '@airtable/blocks/ui';\n\nfunction ViewportSize() {\n     const viewport = useViewport();\n\n     const toggleFullscreen = () => {\n         if (viewport.isFullscreen) {\n             viewport.exitFullscreen();\n         } else {\n             viewport.enterFullscreenIfPossible();\n         }\n     };\n\n     return (\n         <Fragment>\n             <button onClick={toggleFullscreen}>Toggle fullscreen</button>\n\n             viewport size: {viewport.size.width}x{viewport.size.height}\n         </Fragment>\n     );\n}\n```"
                                    },
                                    {
                                        "tag": "docspath",
                                        "text": "UI/hooks/useViewport"
                                    },
                                    {
                                        "tag": "hook",
                                        "text": "\n"
                                    }
                                ]
                            },
                            "type": {
                                "type": "reference",
                                "name": "Viewport",
                                "id": 2967
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/use_viewport.ts",
                            "line": 39,
                            "character": 35
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [14437]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/use_viewport.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 3228,
            "name": "@airtable/blocks/ui: useWatchable",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/use_watchable.ts",
            "comment": {},
            "children": [
                {
                    "id": 3229,
                    "name": "useWatchable",
                    "kind": 64,
                    "kindString": "Function",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A React hook for watching data in Airtable models like {@link Table} and {@link Record}. Each\nmodel has several watchable keys that can be used with this hook to have your component\nautomatically re-render when data in the models changes. You can also provide an optional\ncallback if you need to do anything other than re-render when the data changes.",
                        "text": "This is a low-level tool that you should only use when you specifically need it. There are more\nconvenient model-specific hooks available:\n\n* For {@link Base}, {@link Table}, {@link View}, or {@link Field}, use {@link useBase}.\n* For {@link RecordQueryResult} or {@link Record}, use {@link useRecords}, {@link useRecordIds}, or {@link useRecordById}.\n* For {@link Viewport}, use {@link useViewport}.\n\nIf you're writing a class component and still want to be able to use hooks, try {@link withHooks}.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {useWatchable} from '@airtable/blocks/ui';\n\nfunction TableName({table}) {\n    useWatchable(table, 'name');\n    return <span>The table name is {table.name}</span>;\n}\n\nfunction ViewNameAndType({view}) {\n    useWatchable(view, ['name', 'type']);\n    return <span>The view name is {view.name} and the type is {view.type}</span>;\n}\n```\n"
                            },
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {useWatchable} from '@airtable/blocks/ui';\n\nfunction ActiveView({cursor}) {\n    useWatchable(cursor, 'activeViewId', () => {\n         alert('active view changed!!!')\n    });\n\n    return <span>Active view id: {cursor.activeViewId}</span>;\n}\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "UI/hooks/useWatchable"
                            },
                            {
                                "tag": "hook",
                                "text": "\n"
                            }
                        ]
                    },
                    "signatures": [
                        {
                            "id": 3230,
                            "name": "useWatchable",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "comment": {
                                "shortText": "A React hook for watching data in Airtable models like {@link Table} and {@link Record}. Each\nmodel has several watchable keys that can be used with this hook to have your component\nautomatically re-render when data in the models changes. You can also provide an optional\ncallback if you need to do anything other than re-render when the data changes.",
                                "text": "This is a low-level tool that you should only use when you specifically need it. There are more\nconvenient model-specific hooks available:\n\n* For {@link Base}, {@link Table}, {@link View}, or {@link Field}, use {@link useBase}.\n* For {@link RecordQueryResult} or {@link Record}, use {@link useRecords}, {@link useRecordIds}, or {@link useRecordById}.\n* For {@link Viewport}, use {@link useViewport}.\n\nIf you're writing a class component and still want to be able to use hooks, try {@link withHooks}.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {useWatchable} from '@airtable/blocks/ui';\n\nfunction TableName({table}) {\n    useWatchable(table, 'name');\n    return <span>The table name is {table.name}</span>;\n}\n\nfunction ViewNameAndType({view}) {\n    useWatchable(view, ['name', 'type']);\n    return <span>The view name is {view.name} and the type is {view.type}</span>;\n}\n```\n"
                                    },
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {useWatchable} from '@airtable/blocks/ui';\n\nfunction ActiveView({cursor}) {\n    useWatchable(cursor, 'activeViewId', () => {\n         alert('active view changed!!!')\n    });\n\n    return <span>Active view id: {cursor.activeViewId}</span>;\n}\n```"
                                    },
                                    {
                                        "tag": "docspath",
                                        "text": "UI/hooks/useWatchable"
                                    },
                                    {
                                        "tag": "hook",
                                        "text": "\n"
                                    }
                                ]
                            },
                            "typeParameter": [
                                {
                                    "id": 3231,
                                    "name": "Keys",
                                    "kind": 131072,
                                    "kindString": "Type parameter",
                                    "flags": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                }
                            ],
                            "parameters": [
                                {
                                    "id": 3232,
                                    "name": "models",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The model or models to watch."
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "reference",
                                                "name": "Watchable",
                                                "id": 733,
                                                "typeArguments": [
                                                    {
                                                        "type": "typeParameter",
                                                        "name": "Keys",
                                                        "constraint": {
                                                            "type": "intrinsic",
                                                            "name": "string"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "reference",
                                                                "name": "Watchable",
                                                                "id": 733,
                                                                "typeArguments": [
                                                                    {
                                                                        "type": "typeParameter",
                                                                        "name": "Keys",
                                                                        "constraint": {
                                                                            "type": "intrinsic",
                                                                            "name": "string"
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "null"
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "undefined"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "undefined"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "id": 3233,
                                    "name": "keys",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The key or keys to watch."
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "typeParameter",
                                                "name": "Keys",
                                                "constraint": {
                                                    "type": "intrinsic",
                                                    "name": "string"
                                                }
                                            },
                                            {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "union",
                                                        "types": [
                                                            {
                                                                "type": "typeParameter",
                                                                "name": "Keys",
                                                                "constraint": {
                                                                    "type": "intrinsic",
                                                                    "name": "string"
                                                                }
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "null"
                                                            },
                                                            {
                                                                "type": "intrinsic",
                                                                "name": "undefined"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "null"
                                            },
                                            {
                                                "type": "intrinsic",
                                                "name": "undefined"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "id": 3234,
                                    "name": "callback",
                                    "kind": 32768,
                                    "kindString": "Parameter",
                                    "flags": {
                                        "isOptional": true
                                    },
                                    "comment": {
                                        "shortText": "An optional callback to call when any of the watch keys change.\n"
                                    },
                                    "type": {
                                        "type": "union",
                                        "types": [
                                            {
                                                "type": "intrinsic",
                                                "name": "undefined"
                                            },
                                            {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 3235,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {},
                                                    "signatures": [
                                                        {
                                                            "id": 3236,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 3237,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Watchable",
                                                                        "id": 733,
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "typeParameter",
                                                                                "name": "Keys",
                                                                                "constraint": {
                                                                                    "type": "intrinsic",
                                                                                    "name": "string"
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "id": 3238,
                                                                    "name": "keys",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "string"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 3239,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "void"
                            }
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/ui/use_watchable.ts",
                            "line": 57,
                            "character": 36
                        }
                    ]
                }
            ],
            "groups": [
                {
                    "title": "Functions",
                    "kind": 64,
                    "children": [3229]
                }
            ],
            "sources": [
                {
                    "fileName": "src/ui/use_watchable.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 3246,
            "name": "@airtable/blocks/ui: withHooks",
            "kind": 1,
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/with_hooks.tsx",
            "comment": {},
            "sources": [
                {
                    "fileName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/ui/with_hooks.tsx",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 14577,
            "name": "@airtable/blocks: globalConfig",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/global_config.ts",
            "comment": {},
            "children": [
                {
                    "id": 14805,
                    "name": "GlobalConfig",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A key-value store for persisting configuration options for a block installation.",
                        "text": "The contents will be synced in real-time to all logged-in users of the installation.\nContents will not be updated in real-time when the installation is running in\na publicly shared base.\n\nAny key can be watched to know when the value of the key changes.\n\nYou should not need to construct this object yourself.\n",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {globalConfig} from '@airtable/blocks';\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "models/GlobalConfig\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 14826,
                            "name": "checkPermissionsForSet",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Checks whether the current user has permission to set the given global config key.",
                                "text": "Accepts partial input, in the same format as {@link setAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                "returns": "PermissionCheckResult `{hasPermission: true}` if the current user can set the specified key, `{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be used to display an error message to the user.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can update a specific key and value.\nconst setCheckResult = globalConfig.checkPermissionsForSet('favoriteColor', 'purple');\nif (!setCheckResult.hasPermission) {\n    alert(setCheckResult.reasonDisplayString);\n}\n\n// Check if user can update a specific key, when you don't know the value yet.\nconst setKeyCheckResult = globalConfig.checkPermissionsForSet('favoriteColor');\n\n// Check if user could set globalConfig values, without knowing the specific key/value yet\nconst setUnknownKeyCheckResult = globalConfig.checkPermissionsForSet();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14827,
                                    "name": "checkPermissionsForSet",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Checks whether the current user has permission to set the given global config key.",
                                        "text": "Accepts partial input, in the same format as {@link setAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                        "returns": "PermissionCheckResult `{hasPermission: true}` if the current user can set the specified key, `{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be used to display an error message to the user.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can update a specific key and value.\nconst setCheckResult = globalConfig.checkPermissionsForSet('favoriteColor', 'purple');\nif (!setCheckResult.hasPermission) {\n    alert(setCheckResult.reasonDisplayString);\n}\n\n// Check if user can update a specific key, when you don't know the value yet.\nconst setKeyCheckResult = globalConfig.checkPermissionsForSet('favoriteColor');\n\n// Check if user could set globalConfig values, without knowing the specific key/value yet\nconst setUnknownKeyCheckResult = globalConfig.checkPermissionsForSet();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14828,
                                            "name": "key",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "A string for the top-level key, or an array of strings describing the path to set."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "PartialGlobalConfigKey",
                                                "id": 14895
                                            }
                                        },
                                        {
                                            "id": 14829,
                                            "name": "value",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "The value to set at the specified path. Use `undefined` to delete the value at the given path."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "GlobalConfigValue",
                                                "id": 14896
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "PermissionCheckResult",
                                        "id": 837
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/global_config.ts",
                                    "line": 197,
                                    "character": 26
                                }
                            ]
                        },
                        {
                            "id": 14838,
                            "name": "checkPermissionsForSetPaths",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Checks whether the current user has permission to perform the specified updates to global config.",
                                "text": "Accepts partial input, in the same format as {@link setPathsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                "returns": "PermissionCheckResult `{hasPermission: true}` if the current user can set the specified key, `{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be used to display an error message to the user.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can update a specific keys and values.\nconst setPathsCheckResult = globalConfig.checkPermissionsForSet([\n    {path: ['topLevelKey1', 'nestedKey1'], value: 'foo'},\n    {path: ['topLevelKey2', 'nestedKey2'], value: 'bar'},\n]);\nif (!setPathsCheckResult.hasPermission) {\n    alert(setPathsCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially set globalConfig values.\n// Equivalent to globalConfig.checkPermissionsForSet()\nconst setUnknownPathsCheckResult = globalConfig.checkPermissionsForSetPaths();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14839,
                                    "name": "checkPermissionsForSetPaths",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Checks whether the current user has permission to perform the specified updates to global config.",
                                        "text": "Accepts partial input, in the same format as {@link setPathsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                        "returns": "PermissionCheckResult `{hasPermission: true}` if the current user can set the specified key, `{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be used to display an error message to the user.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can update a specific keys and values.\nconst setPathsCheckResult = globalConfig.checkPermissionsForSet([\n    {path: ['topLevelKey1', 'nestedKey1'], value: 'foo'},\n    {path: ['topLevelKey2', 'nestedKey2'], value: 'bar'},\n]);\nif (!setPathsCheckResult.hasPermission) {\n    alert(setPathsCheckResult.reasonDisplayString);\n}\n\n// Check if user could potentially set globalConfig values.\n// Equivalent to globalConfig.checkPermissionsForSet()\nconst setUnknownPathsCheckResult = globalConfig.checkPermissionsForSetPaths();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14840,
                                            "name": "updates",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "The paths and values to set."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "PartialGlobalConfigUpdate",
                                                        "id": 14802
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "PermissionCheckResult",
                                        "id": 837
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/global_config.ts",
                                    "line": 297,
                                    "character": 31
                                }
                            ]
                        },
                        {
                            "id": 14823,
                            "name": "get",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get the value at a path. Throws an error if the path is invalid.",
                                "returns": "The value at the provided path, or `undefined` if no value exists at that path.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {globalConfig} from '@airtable/blocks';\n\nconst topLevelValue = globalConfig.get('topLevelKey');\nconst nestedValue = globalConfig.get(['topLevelKey', 'nested', 'deeply']);\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14824,
                                    "name": "get",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get the value at a path. Throws an error if the path is invalid.",
                                        "returns": "The value at the provided path, or `undefined` if no value exists at that path.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {globalConfig} from '@airtable/blocks';\n\nconst topLevelValue = globalConfig.get('topLevelKey');\nconst nestedValue = globalConfig.get(['topLevelKey', 'nested', 'deeply']);\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14825,
                                            "name": "key",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "A string for the top-level key, or an array of strings describing the path to the value."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "GlobalConfigKey",
                                                "id": 14893
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "unknown"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/global_config.ts",
                                    "line": 159,
                                    "character": 7
                                }
                            ]
                        },
                        {
                            "id": 14830,
                            "name": "hasPermissionToSet",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "An alias for `globalConfig.checkPermissionsForSet(key, value).hasPermission`.",
                                "text": "Checks whether the current user has permission to set the given global config key.\n\nAccepts partial input, in the same format as {@link setAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                "returns": "boolean Whether or not the user can set the specified key.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can update a specific key and value.\nconst canSetFavoriteColorToPurple = globalConfig.hasPermissionToSet('favoriteColor', 'purple');\nif (!canSetFavoriteColorToPurple) {\n    alert('Not allowed!');\n}\n\n// Check if user can update a specific key, when you don't know the value yet.\nconst canSetFavoriteColor = globalConfig.hasPermissionToSet('favoriteColor');\n\n// Check if user could set globalConfig values, without knowing the specific key/value yet\nconst canSetGlobalConfig = globalConfig.hasPermissionToSet();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14831,
                                    "name": "hasPermissionToSet",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "An alias for `globalConfig.checkPermissionsForSet(key, value).hasPermission`.",
                                        "text": "Checks whether the current user has permission to set the given global config key.\n\nAccepts partial input, in the same format as {@link setAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                        "returns": "boolean Whether or not the user can set the specified key.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can update a specific key and value.\nconst canSetFavoriteColorToPurple = globalConfig.hasPermissionToSet('favoriteColor', 'purple');\nif (!canSetFavoriteColorToPurple) {\n    alert('Not allowed!');\n}\n\n// Check if user can update a specific key, when you don't know the value yet.\nconst canSetFavoriteColor = globalConfig.hasPermissionToSet('favoriteColor');\n\n// Check if user could set globalConfig values, without knowing the specific key/value yet\nconst canSetGlobalConfig = globalConfig.hasPermissionToSet();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14832,
                                            "name": "key",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "A string for the top-level key, or an array of strings describing the path to set."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "PartialGlobalConfigKey",
                                                "id": 14895
                                            }
                                        },
                                        {
                                            "id": 14833,
                                            "name": "value",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "The value to set at the specified path. Use `undefined` to delete the value at the given path."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "GlobalConfigValue",
                                                "id": 14896
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/global_config.ts",
                                    "line": 232,
                                    "character": 22
                                }
                            ]
                        },
                        {
                            "id": 14841,
                            "name": "hasPermissionToSetPaths",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "An alias for `globalConfig.checkPermissionsForSetPaths(updates).hasPermission`.",
                                "text": "Checks whether the current user has permission to perform the specified updates to global config.\n\nAccepts partial input, in the same format as {@link setPathsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                "returns": "boolean Whether or not the user has permission to apply the specified updates to globalConfig.\n",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\n// Check if user can update a specific keys and values.\nconst canSetPaths = globalConfig.hasPermissionToSetPaths([\n    {path: ['topLevelKey1', 'nestedKey1'], value: 'foo'},\n    {path: ['topLevelKey2', 'nestedKey2'], value: 'bar'},\n]);\nif (!canSetPaths) {\n    alert('not allowed!');\n}\n\n// Check if user could potentially set globalConfig values.\n// Equivalent to globalConfig.hasPermissionToSet()\nconst canSetAnyPaths = globalConfig.hasPermissionToSetPaths();\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14842,
                                    "name": "hasPermissionToSetPaths",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "An alias for `globalConfig.checkPermissionsForSetPaths(updates).hasPermission`.",
                                        "text": "Checks whether the current user has permission to perform the specified updates to global config.\n\nAccepts partial input, in the same format as {@link setPathsAsync}.\nThe more information provided, the more accurate the permissions check will be.\n",
                                        "returns": "boolean Whether or not the user has permission to apply the specified updates to globalConfig.\n",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\n// Check if user can update a specific keys and values.\nconst canSetPaths = globalConfig.hasPermissionToSetPaths([\n    {path: ['topLevelKey1', 'nestedKey1'], value: 'foo'},\n    {path: ['topLevelKey2', 'nestedKey2'], value: 'bar'},\n]);\nif (!canSetPaths) {\n    alert('not allowed!');\n}\n\n// Check if user could potentially set globalConfig values.\n// Equivalent to globalConfig.hasPermissionToSet()\nconst canSetAnyPaths = globalConfig.hasPermissionToSetPaths();\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14843,
                                            "name": "updates",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "The paths and values to set."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "ReadonlyArray",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "PartialGlobalConfigUpdate",
                                                        "id": 14802
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/global_config.ts",
                                    "line": 334,
                                    "character": 27
                                }
                            ]
                        },
                        {
                            "id": 14834,
                            "name": "setAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Sets a value at a path. Throws an error if the path or value is invalid.",
                                "text": "This action is asynchronous: `await` the returned promise if you wish to wait for the\nupdate to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your change will be reflected in\n{@link GlobalConfig} before the promise resolves.\n",
                                "returns": "A promise that will resolve once the update is persisted to Airtable.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {globalConfig} from '@airtable/blocks';\n\nfunction updateFavoriteColorIfPossible(color) {\n    if (globalConfig.hasPermissionToSetPaths('favoriteColor', color)) {\n        globalConfig.setPathsAsync('favoriteColor', color);\n    }\n    // The update is now applied within your block (eg will be reflected in\n    // globalConfig) but are still being saved to Airtable servers (eg.\n    // may not be updated for other users yet)\n}\n\nasync function updateFavoriteColorIfPossibleAsync(color) {\n    if (globalConfig.hasPermissionToSet('favoriteColor', color)) {\n        await globalConfig.setAsync('favoriteColor', color);\n    }\n    // globalConfig updates have been saved to Airtable servers.\n    alert('favoriteColor has been updated');\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14835,
                                    "name": "setAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Sets a value at a path. Throws an error if the path or value is invalid.",
                                        "text": "This action is asynchronous: `await` the returned promise if you wish to wait for the\nupdate to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your change will be reflected in\n{@link GlobalConfig} before the promise resolves.\n",
                                        "returns": "A promise that will resolve once the update is persisted to Airtable.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {globalConfig} from '@airtable/blocks';\n\nfunction updateFavoriteColorIfPossible(color) {\n    if (globalConfig.hasPermissionToSetPaths('favoriteColor', color)) {\n        globalConfig.setPathsAsync('favoriteColor', color);\n    }\n    // The update is now applied within your block (eg will be reflected in\n    // globalConfig) but are still being saved to Airtable servers (eg.\n    // may not be updated for other users yet)\n}\n\nasync function updateFavoriteColorIfPossibleAsync(color) {\n    if (globalConfig.hasPermissionToSet('favoriteColor', color)) {\n        await globalConfig.setAsync('favoriteColor', color);\n    }\n    // globalConfig updates have been saved to Airtable servers.\n    alert('favoriteColor has been updated');\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14836,
                                            "name": "key",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "A string for the top-level key, or an array of strings describing the path to set."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "GlobalConfigKey",
                                                "id": 14893
                                            }
                                        },
                                        {
                                            "id": 14837,
                                            "name": "value",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "The value to set at the specified path. Use `undefined` to delete the value at the given path."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "GlobalConfigValue",
                                                "id": 14896
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/global_config.ts",
                                    "line": 268,
                                    "character": 18
                                }
                            ]
                        },
                        {
                            "id": 14844,
                            "name": "setPathsAsync",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Sets multiple values. Throws if any path or value is invalid.",
                                "text": "This action is asynchronous: `await` the returned promise if you wish to wait for the\nupdates to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in\n{@link GlobalConfig} before the promise resolves.\n",
                                "returns": "A promise that will resolve once the update is persisted to Airtable.",
                                "tags": [
                                    {
                                        "tag": "example",
                                        "text": "\n```js\nimport {globalConfig} from '@airtable/blocks';\n\nconst updates = [\n    {path: ['topLevelKey1', 'nestedKey1'], value: 'foo'},\n    {path: ['topLevelKey2', 'nestedKey2'], value: 'bar'},\n];\n\nfunction applyUpdatesIfPossible() {\n    if (globalConfig.hasPermissionToSetPaths(updates)) {\n        globalConfig.setPathsAsync(updates);\n    }\n    // The updates are now applied within your block (eg will be reflected in\n    // globalConfig) but are still being saved to Airtable servers (eg. they\n    // may not be updated for other users yet)\n}\n\nasync function applyUpdatesIfPossibleAsync() {\n    if (globalConfig.hasPermissionToSetPaths(updates)) {\n        await globalConfig.setPathsAsync(updates);\n    }\n    // globalConfig updates have been saved to Airtable servers.\n    alert('globalConfig has been updated');\n}\n```\n"
                                    }
                                ]
                            },
                            "signatures": [
                                {
                                    "id": 14845,
                                    "name": "setPathsAsync",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Sets multiple values. Throws if any path or value is invalid.",
                                        "text": "This action is asynchronous: `await` the returned promise if you wish to wait for the\nupdates to be persisted to Airtable servers.\nUpdates are applied optimistically locally, so your changes will be reflected in\n{@link GlobalConfig} before the promise resolves.\n",
                                        "returns": "A promise that will resolve once the update is persisted to Airtable.",
                                        "tags": [
                                            {
                                                "tag": "example",
                                                "text": "\n```js\nimport {globalConfig} from '@airtable/blocks';\n\nconst updates = [\n    {path: ['topLevelKey1', 'nestedKey1'], value: 'foo'},\n    {path: ['topLevelKey2', 'nestedKey2'], value: 'bar'},\n];\n\nfunction applyUpdatesIfPossible() {\n    if (globalConfig.hasPermissionToSetPaths(updates)) {\n        globalConfig.setPathsAsync(updates);\n    }\n    // The updates are now applied within your block (eg will be reflected in\n    // globalConfig) but are still being saved to Airtable servers (eg. they\n    // may not be updated for other users yet)\n}\n\nasync function applyUpdatesIfPossibleAsync() {\n    if (globalConfig.hasPermissionToSetPaths(updates)) {\n        await globalConfig.setPathsAsync(updates);\n    }\n    // globalConfig updates have been saved to Airtable servers.\n    alert('globalConfig has been updated');\n}\n```\n"
                                            }
                                        ]
                                    },
                                    "parameters": [
                                        {
                                            "id": 14846,
                                            "name": "updates",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The paths and values to set."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "Array",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "GlobalConfigUpdate",
                                                        "id": 14799
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Promise",
                                        "typeArguments": [
                                            {
                                                "type": "intrinsic",
                                                "name": "void"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/global_config.ts",
                                    "line": 374,
                                    "character": 23
                                }
                            ]
                        },
                        {
                            "id": 14876,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatch keys watched with `.watch`.",
                                "text": "Should be called with the same arguments given to `.watch`.\n",
                                "returns": "the array of keys that were unwatched\n"
                            },
                            "signatures": [
                                {
                                    "id": 14877,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatch keys watched with `.watch`.",
                                        "text": "Should be called with the same arguments given to `.watch`.\n",
                                        "returns": "the array of keys that were unwatched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 14878,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to unwatch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableGlobalConfigKey",
                                                        "id": 14897
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableGlobalConfigKey",
                                                                "id": 14897
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 14879,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the function passed to `.watch` for these keys"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 14880,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 14881,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 14882,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 14883,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableGlobalConfigKey",
                                                                        "id": 14897
                                                                    }
                                                                },
                                                                {
                                                                    "id": 14884,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 111,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 14885,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the context that was passed to `.watch` for this `callback`"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableGlobalConfigKey",
                                                "id": 14897
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 767
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 109,
                                    "character": 11
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 767
                            }
                        },
                        {
                            "id": 14866,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get notified of changes to the model.",
                                "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n",
                                "returns": "the array of keys that were watched\n"
                            },
                            "signatures": [
                                {
                                    "id": 14867,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get notified of changes to the model.",
                                        "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n",
                                        "returns": "the array of keys that were watched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 14868,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to watch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableGlobalConfigKey",
                                                        "id": 14897
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableGlobalConfigKey",
                                                                "id": 14897
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 14869,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "a function to call when those keys change"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 14870,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 14871,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 14872,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 14873,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableGlobalConfigKey",
                                                                        "id": 14897
                                                                    }
                                                                },
                                                                {
                                                                    "id": 14874,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 65,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 14875,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "an optional context for `this` in `callback`."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableGlobalConfigKey",
                                                "id": 14897
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 757
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 63,
                                    "character": 9
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 757
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [
                                14826,
                                14838,
                                14823,
                                14830,
                                14841,
                                14834,
                                14844,
                                14876,
                                14866
                            ]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/global_config.ts",
                            "line": 105,
                            "character": 18
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Watchable",
                            "id": 733,
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "WatchableGlobalConfigKey",
                                    "id": 14897
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 14578,
                    "name": "GlobalConfigArray",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "An array of {@link GlobalConfigValue}s"
                    },
                    "sources": [
                        {
                            "fileName": "src/global_config.ts",
                            "line": 25,
                            "character": 34
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "ReadonlyArray",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "GlobalConfigValue",
                                    "id": 14896
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 14793,
                    "name": "GlobalConfigObject",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "An object containing {@GlobalConfigValue}s"
                    },
                    "sources": [
                        {
                            "fileName": "src/global_config.ts",
                            "line": 27,
                            "character": 35
                        }
                    ]
                },
                {
                    "id": 14799,
                    "name": "GlobalConfigUpdate",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "An instruction to set `path` within globalConfig to `value`."
                    },
                    "children": [
                        {
                            "id": 14800,
                            "name": "path",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The path to update."
                            },
                            "sources": [
                                {
                                    "fileName": "src/global_config.ts",
                                    "line": 48,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "reference",
                                "name": "GlobalConfigPath",
                                "id": 14892
                            }
                        },
                        {
                            "id": 14801,
                            "name": "value",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The value at `path` after updating."
                            },
                            "sources": [
                                {
                                    "fileName": "src/global_config.ts",
                                    "line": 50,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalConfigValue",
                                        "id": 14896
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [14800, 14801]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/global_config.ts",
                            "line": 46,
                            "character": 35
                        }
                    ]
                },
                {
                    "id": 14802,
                    "name": "PartialGlobalConfigUpdate",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A version of {@link GlobalConfigUpdate} where not all values are yet known."
                    },
                    "children": [
                        {
                            "id": 14803,
                            "name": "path",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The path to update."
                            },
                            "sources": [
                                {
                                    "fileName": "src/global_config.ts",
                                    "line": 56,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "PartialGlobalConfigPath",
                                        "id": 14894
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 14804,
                            "name": "value",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true,
                                "isOptional": true
                            },
                            "comment": {
                                "shortText": "The value at `path` after updating."
                            },
                            "sources": [
                                {
                                    "fileName": "src/global_config.ts",
                                    "line": 58,
                                    "character": 18
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "reference",
                                        "name": "GlobalConfigValue",
                                        "id": 14896
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [14803, 14804]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/global_config.ts",
                            "line": 54,
                            "character": 42
                        }
                    ]
                },
                {
                    "id": 14893,
                    "name": "GlobalConfigKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A single top level key or a path into the global config object"
                    },
                    "sources": [
                        {
                            "fileName": "src/global_config.ts",
                            "line": 19,
                            "character": 27
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "reference",
                                "name": "GlobalConfigPath",
                                "id": 14892
                            },
                            {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        ]
                    }
                },
                {
                    "id": 14892,
                    "name": "GlobalConfigPath",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A path of keys indexing into the global config object"
                    },
                    "sources": [
                        {
                            "fileName": "src/global_config.ts",
                            "line": 17,
                            "character": 28
                        }
                    ],
                    "type": {
                        "type": "reference",
                        "name": "ReadonlyArray",
                        "typeArguments": [
                            {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        ]
                    }
                },
                {
                    "id": 14896,
                    "name": "GlobalConfigValue",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "The types of value that can be stored in globalConfig."
                    },
                    "sources": [
                        {
                            "fileName": "src/global_config.ts",
                            "line": 32,
                            "character": 29
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "intrinsic",
                                "name": "null"
                            },
                            {
                                "type": "intrinsic",
                                "name": "boolean"
                            },
                            {
                                "type": "intrinsic",
                                "name": "number"
                            },
                            {
                                "type": "intrinsic",
                                "name": "string"
                            },
                            {
                                "type": "reference",
                                "name": "GlobalConfigArray",
                                "id": 14578
                            },
                            {
                                "type": "reference",
                                "name": "GlobalConfigObject",
                                "id": 14793
                            }
                        ]
                    }
                },
                {
                    "id": 14895,
                    "name": "PartialGlobalConfigKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A {@link GlobalConfigKey} with some parts of the path/key unknown (`undefined`)"
                    },
                    "sources": [
                        {
                            "fileName": "src/global_config.ts",
                            "line": 23,
                            "character": 34
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "reference",
                                "name": "PartialGlobalConfigPath",
                                "id": 14894
                            },
                            {
                                "type": "intrinsic",
                                "name": "string"
                            },
                            {
                                "type": "intrinsic",
                                "name": "undefined"
                            }
                        ]
                    }
                },
                {
                    "id": 14894,
                    "name": "PartialGlobalConfigPath",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A {@link GlobalConfigPath}, with some parts of the path unknown (`undefined`)"
                    },
                    "sources": [
                        {
                            "fileName": "src/global_config.ts",
                            "line": 21,
                            "character": 35
                        }
                    ],
                    "type": {
                        "type": "reference",
                        "name": "ReadonlyArray",
                        "typeArguments": [
                            {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "undefined"
                                    }
                                ]
                            }
                        ]
                    }
                },
                {
                    "id": 14897,
                    "name": "WatchableGlobalConfigKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "You can watch any top-level key in global config. Use '*' to watch every change."
                    },
                    "sources": [
                        {
                            "fileName": "src/global_config.ts",
                            "line": 64,
                            "character": 29
                        }
                    ],
                    "type": {
                        "type": "intrinsic",
                        "name": "string"
                    }
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [14805]
                },
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [14578, 14793, 14799, 14802]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [14893, 14892, 14896, 14895, 14894, 14897]
                }
            ],
            "sources": [
                {
                    "fileName": "src/global_config.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 781,
            "name": "@airtable/blocks: mutations",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/types/mutations.ts",
            "comment": {},
            "children": [
                {
                    "id": 827,
                    "name": "SuccessfulPermissionCheckResult",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 828,
                            "name": "hasPermission",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/types/mutations.ts",
                                    "line": 105,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "true"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [828]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/types/mutations.ts",
                            "line": 103,
                            "character": 48
                        }
                    ]
                },
                {
                    "id": 829,
                    "name": "UnsuccessfulPermissionCheckResult",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {},
                    "children": [
                        {
                            "id": 830,
                            "name": "hasPermission",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {},
                            "sources": [
                                {
                                    "fileName": "src/types/mutations.ts",
                                    "line": 111,
                                    "character": 17
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "false"
                            }
                        },
                        {
                            "id": 831,
                            "name": "reasonDisplayString",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "A string explaining why the action is not permitted. These strings should only be used to\nshow to the user; you should not rely on the format of the string as it may change without\nnotice."
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/mutations.ts",
                                    "line": 117,
                                    "character": 23
                                }
                            ],
                            "type": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [830, 831]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/types/mutations.ts",
                            "line": 109,
                            "character": 50
                        }
                    ]
                },
                {
                    "id": 837,
                    "name": "PermissionCheckResult",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Indicates whether the user has permission to perform a particular action, and if not, why."
                    },
                    "sources": [
                        {
                            "fileName": "src/types/mutations.ts",
                            "line": 121,
                            "character": 33
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "reference",
                                "name": "SuccessfulPermissionCheckResult",
                                "id": 827
                            },
                            {
                                "type": "reference",
                                "name": "UnsuccessfulPermissionCheckResult",
                                "id": 829
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [827, 829]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [837]
                }
            ],
            "sources": [
                {
                    "fileName": "src/types/mutations.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 14444,
            "name": "@airtable/blocks: settingsButton",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/settings_button.ts",
            "comment": {},
            "children": [
                {
                    "id": 14445,
                    "name": "SettingsButton",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Interface to the settings button that lives outside the block's viewport.",
                        "text": "The {@link useSettingsButton} hook is the recommend way to watch the settings\nbutton, but you can also use it directly as per below example.\n\nWatch `click` to handle click events on the button.\n",
                        "tags": [
                            {
                                "tag": "alias",
                                "text": "settingsButton"
                            },
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {settingsButton} from '@airtable/blocks';\n// Button is not visible by default\nsettingsButton.show();\nsettingsButton.watch('click', () => {\n    alert('Clicked!');\n})\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "models/advanced/SettingsButton\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 14455,
                            "name": "isVisible",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Whether the settings button is being shown.\nCan be watched."
                            },
                            "getSignature": [
                                {
                                    "id": 14456,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Whether the settings button is being shown.\nCan be watched."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/settings_button.ts",
                                    "line": 61,
                                    "character": 17
                                }
                            ]
                        },
                        {
                            "id": 14459,
                            "name": "hide",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Hide the settings button.",
                                "text": "Note: A count of calls to `show()` and `hide()` is maintained internally. The button will\nstay visible if there are more calls to `show()` than `hide()`.\n"
                            },
                            "signatures": [
                                {
                                    "id": 14460,
                                    "name": "hide",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Hide the settings button.",
                                        "text": "Note: A count of calls to `show()` and `hide()` is maintained internally. The button will\nstay visible if there are more calls to `show()` than `hide()`.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "void"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/settings_button.ts",
                                    "line": 84,
                                    "character": 8
                                }
                            ]
                        },
                        {
                            "id": 14457,
                            "name": "show",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Show the settings button."
                            },
                            "signatures": [
                                {
                                    "id": 14458,
                                    "name": "show",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Show the settings button."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "void"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/settings_button.ts",
                                    "line": 68,
                                    "character": 8
                                }
                            ]
                        },
                        {
                            "id": 14489,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatch keys watched with `.watch`.",
                                "text": "Should be called with the same arguments given to `.watch`.\n",
                                "returns": "the array of keys that were unwatched\n"
                            },
                            "signatures": [
                                {
                                    "id": 14490,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatch keys watched with `.watch`.",
                                        "text": "Should be called with the same arguments given to `.watch`.\n",
                                        "returns": "the array of keys that were unwatched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 14491,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to unwatch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableSettingsButtonKey",
                                                        "id": 14505
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableSettingsButtonKey",
                                                                "id": 14505
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 14492,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the function passed to `.watch` for these keys"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 14493,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 14494,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 14495,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 14496,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableSettingsButtonKey",
                                                                        "id": 14505
                                                                    }
                                                                },
                                                                {
                                                                    "id": 14497,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 111,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 14498,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the context that was passed to `.watch` for this `callback`"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableSettingsButtonKey",
                                                "id": 14505
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 767
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 109,
                                    "character": 11
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 767
                            }
                        },
                        {
                            "id": 14479,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get notified of changes to the model.",
                                "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n",
                                "returns": "the array of keys that were watched\n"
                            },
                            "signatures": [
                                {
                                    "id": 14480,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get notified of changes to the model.",
                                        "text": "Every call to `.watch` should have a matching call to `.unwatch`.\n",
                                        "returns": "the array of keys that were watched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 14481,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to watch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableSettingsButtonKey",
                                                        "id": 14505
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableSettingsButtonKey",
                                                                "id": 14505
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 14482,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "a function to call when those keys change"
                                            },
                                            "type": {
                                                "type": "reflection",
                                                "declaration": {
                                                    "id": 14483,
                                                    "name": "__type",
                                                    "kind": 65536,
                                                    "kindString": "Type literal",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "signatures": [
                                                        {
                                                            "id": 14484,
                                                            "name": "__call",
                                                            "kind": 4096,
                                                            "kindString": "Call signature",
                                                            "flags": {},
                                                            "parameters": [
                                                                {
                                                                    "id": 14485,
                                                                    "name": "model",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "intrinsic",
                                                                        "name": "this"
                                                                    }
                                                                },
                                                                {
                                                                    "id": 14486,
                                                                    "name": "key",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {},
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "WatchableSettingsButtonKey",
                                                                        "id": 14505
                                                                    }
                                                                },
                                                                {
                                                                    "id": 14487,
                                                                    "name": "args",
                                                                    "kind": 32768,
                                                                    "kindString": "Parameter",
                                                                    "flags": {
                                                                        "isRest": true
                                                                    },
                                                                    "type": {
                                                                        "type": "reference",
                                                                        "name": "Array",
                                                                        "typeArguments": [
                                                                            {
                                                                                "type": "intrinsic",
                                                                                "name": "any"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            "type": {
                                                                "type": "intrinsic",
                                                                "name": "unknown"
                                                            }
                                                        }
                                                    ],
                                                    "sources": [
                                                        {
                                                            "fileName": "src/watchable.ts",
                                                            "line": 65,
                                                            "character": 17
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "id": 14488,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "an optional context for `this` in `callback`."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableSettingsButtonKey",
                                                "id": 14505
                                            }
                                        ]
                                    },
                                    "inheritedFrom": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 757
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/watchable.ts",
                                    "line": 63,
                                    "character": 9
                                }
                            ],
                            "inheritedFrom": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 757
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [14455]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [14459, 14457, 14489, 14479]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/settings_button.ts",
                            "line": 38,
                            "character": 20
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Watchable",
                            "id": 733,
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "WatchableSettingsButtonKey",
                                    "id": 14505
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 14505,
                    "name": "WatchableSettingsButtonKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "A watchable key in {@link SettingsButton}.\n- `isVisible`\n- `click`"
                    },
                    "sources": [
                        {
                            "fileName": "src/settings_button.ts",
                            "line": 16,
                            "character": 31
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "isVisible"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "click"
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [14445]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [14505]
                }
            ],
            "sources": [
                {
                    "fileName": "src/settings_button.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        },
        {
            "id": 2962,
            "name": "@airtable/blocks: viewport",
            "kind": 1,
            "kindString": "External module",
            "flags": {
                "isExported": true
            },
            "originalName": "/Users/billy/h/source/blocks-sdk/packages/sdk/src/types/viewport.ts",
            "comment": {},
            "children": [
                {
                    "id": 2967,
                    "name": "Viewport",
                    "kind": 128,
                    "kindString": "Class",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "Information about the current viewport",
                        "tags": [
                            {
                                "tag": "example",
                                "text": "\n```js\nimport {viewport} from '@airtable/blocks';\n```"
                            },
                            {
                                "tag": "docspath",
                                "text": "models/advanced/Viewport\n"
                            }
                        ]
                    },
                    "children": [
                        {
                            "id": 3000,
                            "name": "isFullscreen",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the block is fullscreen, `false` otherwise."
                            },
                            "getSignature": [
                                {
                                    "id": 3001,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the block is fullscreen, `false` otherwise."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/viewport.ts",
                                    "line": 255,
                                    "character": 20
                                }
                            ]
                        },
                        {
                            "id": 2998,
                            "name": "isSmallerThanMinSize",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "`true` if the block frame is smaller than `minSize`, `false` otherwise."
                            },
                            "getSignature": [
                                {
                                    "id": 2999,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "`true` if the block frame is smaller than `minSize`, `false` otherwise."
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/viewport.ts",
                                    "line": 246,
                                    "character": 28
                                }
                            ]
                        },
                        {
                            "id": 2988,
                            "name": "maxFullscreenSize",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The maximum dimensions of the block when it is in\nfullscreen mode. Returns the smallest set of dimensions added with\n{@link addMaxFullscreenSize}.",
                                "text": "If `width` or `height` is null, it means there is\nno max size constraint on that dimension. If `maxFullscreenSize` would be\nsmaller than {@link minSize}, it is constrained to be at least `minSize`.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 2989,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The maximum dimensions of the block when it is in\nfullscreen mode. Returns the smallest set of dimensions added with\n{@link addMaxFullscreenSize}.",
                                        "text": "If `width` or `height` is null, it means there is\nno max size constraint on that dimension. If `maxFullscreenSize` would be\nsmaller than {@link minSize}, it is constrained to be at least `minSize`.\n"
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "ViewportSizeConstraint",
                                        "id": 2963
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/viewport.ts",
                                    "line": 121,
                                    "character": 25
                                }
                            ]
                        },
                        {
                            "id": 2993,
                            "name": "minSize",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The minimum dimensions of the block - if the viewport gets smaller than this\nsize, an overlay will be shown asking the user to resize the block to be bigger.",
                                "text": "The largest set of dimensions added with addMinSize. If `width` or `height` is null, it means\nthere is no minSize constraint on that dimension.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 2994,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The minimum dimensions of the block - if the viewport gets smaller than this\nsize, an overlay will be shown asking the user to resize the block to be bigger.",
                                        "text": "The largest set of dimensions added with addMinSize. If `width` or `height` is null, it means\nthere is no minSize constraint on that dimension.\n"
                                    },
                                    "type": {
                                        "type": "reference",
                                        "name": "ViewportSizeConstraint",
                                        "id": 2963
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/viewport.ts",
                                    "line": 185,
                                    "character": 15
                                }
                            ]
                        },
                        {
                            "id": 3002,
                            "name": "size",
                            "kind": 262144,
                            "kindString": "Accessor",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "The current size of the block frame.",
                                "text": "Can be watched.\n"
                            },
                            "getSignature": [
                                {
                                    "id": 3003,
                                    "name": "__get",
                                    "kind": 524288,
                                    "kindString": "Get signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "The current size of the block frame.",
                                        "text": "Can be watched.\n"
                                    },
                                    "type": {
                                        "type": "reflection",
                                        "declaration": {
                                            "id": 3004,
                                            "name": "__type",
                                            "kind": 65536,
                                            "kindString": "Type literal",
                                            "flags": {
                                                "isExported": true
                                            },
                                            "children": [
                                                {
                                                    "id": 3006,
                                                    "name": "height",
                                                    "kind": 32,
                                                    "kindString": "Variable",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "sources": [
                                                        {
                                                            "fileName": "src/viewport.ts",
                                                            "line": 263,
                                                            "character": 38
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "number"
                                                    }
                                                },
                                                {
                                                    "id": 3005,
                                                    "name": "width",
                                                    "kind": 32,
                                                    "kindString": "Variable",
                                                    "flags": {
                                                        "isExported": true
                                                    },
                                                    "sources": [
                                                        {
                                                            "fileName": "src/viewport.ts",
                                                            "line": 263,
                                                            "character": 22
                                                        }
                                                    ],
                                                    "type": {
                                                        "type": "intrinsic",
                                                        "name": "number"
                                                    }
                                                }
                                            ],
                                            "groups": [
                                                {
                                                    "title": "Variables",
                                                    "kind": 32,
                                                    "children": [3006, 3005]
                                                }
                                            ],
                                            "sources": [
                                                {
                                                    "fileName": "src/viewport.ts",
                                                    "line": 263,
                                                    "character": 15
                                                }
                                            ]
                                        }
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/viewport.ts",
                                    "line": 263,
                                    "character": 12
                                }
                            ]
                        },
                        {
                            "id": 2990,
                            "name": "addMaxFullscreenSize",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Add a maximum fullscreen size constraint. Use `.maxFullscreenSize`` to get\nthe aggregate of all added constraints.",
                                "returns": "A function that can be called to remove the fullscreen\nsize constraint that was added.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2991,
                                    "name": "addMaxFullscreenSize",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Add a maximum fullscreen size constraint. Use `.maxFullscreenSize`` to get\nthe aggregate of all added constraints.",
                                        "returns": "A function that can be called to remove the fullscreen\nsize constraint that was added.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2992,
                                            "name": "sizeConstraint",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The width and height constraints to add. Both\n`width` and `height` are optional - if either is set to null, that means\nthere is no max size in that dimension."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "Partial",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "ViewportSizeConstraint",
                                                        "id": 2963
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "UnsetFn",
                                        "id": 3048
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/viewport.ts",
                                    "line": 157,
                                    "character": 24
                                }
                            ]
                        },
                        {
                            "id": 2995,
                            "name": "addMinSize",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Add a minimum frame size constraint. Use `.minSize`` to get the aggregate\nof all added constraints.",
                                "text": "Upon adding a constraint, if the block is focused and the frame is smaller than the\nminimum size, the block will enter fullscreen mode.\n",
                                "returns": "A function that can be called to remove the  size constraint\nthat was added.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2996,
                                    "name": "addMinSize",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Add a minimum frame size constraint. Use `.minSize`` to get the aggregate\nof all added constraints.",
                                        "text": "Upon adding a constraint, if the block is focused and the frame is smaller than the\nminimum size, the block will enter fullscreen mode.\n",
                                        "returns": "A function that can be called to remove the  size constraint\nthat was added.\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 2997,
                                            "name": "sizeConstraint",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "The width and height constraints to add. Both `width`\nand `height` are optional - if either is set to null, that means there is\nno min size in that dimension."
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "Partial",
                                                "typeArguments": [
                                                    {
                                                        "type": "reference",
                                                        "name": "ViewportSizeConstraint",
                                                        "id": 2963
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "UnsetFn",
                                        "id": 3048
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/viewport.ts",
                                    "line": 212,
                                    "character": 14
                                }
                            ]
                        },
                        {
                            "id": 2984,
                            "name": "enterFullscreenIfPossible",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Request to enter fullscreen mode.",
                                "text": "May fail if another block is fullscreen or this block doesn't have\npermission to fullscreen itself. Watch `isFullscreen` to know if the\nrequest succeeded.\n"
                            },
                            "signatures": [
                                {
                                    "id": 2985,
                                    "name": "enterFullscreenIfPossible",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Request to enter fullscreen mode.",
                                        "text": "May fail if another block is fullscreen or this block doesn't have\npermission to fullscreen itself. Watch `isFullscreen` to know if the\nrequest succeeded.\n"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "void"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/viewport.ts",
                                    "line": 104,
                                    "character": 29
                                }
                            ]
                        },
                        {
                            "id": 2986,
                            "name": "exitFullscreen",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Request to exit fullscreen mode"
                            },
                            "signatures": [
                                {
                                    "id": 2987,
                                    "name": "exitFullscreen",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Request to exit fullscreen mode"
                                    },
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "void"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/viewport.ts",
                                    "line": 108,
                                    "character": 18
                                }
                            ]
                        },
                        {
                            "id": 3012,
                            "name": "unwatch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Unwatch keys watched with `.watch`.",
                                "text": "Should be called with the same arguments given to `.watch`.\n",
                                "returns": "the array of keys that were unwatched\n"
                            },
                            "signatures": [
                                {
                                    "id": 3013,
                                    "name": "unwatch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Unwatch keys watched with `.watch`.",
                                        "text": "Should be called with the same arguments given to `.watch`.\n",
                                        "returns": "the array of keys that were unwatched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 3014,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to unwatch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableViewportKey",
                                                        "id": 3047
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableViewportKey",
                                                                "id": 3047
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 3015,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the function passed to `.watch` for these keys"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 3016,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "the context that was passed to `.watch` for this `callback`"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableViewportKey",
                                                "id": 3047
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "Watchable.unwatch",
                                        "id": 767
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/viewport.ts",
                                    "line": 311,
                                    "character": 11
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "Watchable.unwatch",
                                "id": 767
                            }
                        },
                        {
                            "id": 3007,
                            "name": "watch",
                            "kind": 2048,
                            "kindString": "Method",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Get notified of changes to the viewport.",
                                "text": "Watchable keys are:\n- `'isFullscreen'`\n- `'size'`\n- `'minSize'`\n- `'maxFullscreenSize'`\n\nEvery call to `.watch` should have a matching call to `.unwatch`.\n",
                                "returns": "the array of keys that were watched\n"
                            },
                            "signatures": [
                                {
                                    "id": 3008,
                                    "name": "watch",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "comment": {
                                        "shortText": "Get notified of changes to the viewport.",
                                        "text": "Watchable keys are:\n- `'isFullscreen'`\n- `'size'`\n- `'minSize'`\n- `'maxFullscreenSize'`\n\nEvery call to `.watch` should have a matching call to `.unwatch`.\n",
                                        "returns": "the array of keys that were watched\n"
                                    },
                                    "parameters": [
                                        {
                                            "id": 3009,
                                            "name": "keys",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "the keys to watch"
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "WatchableViewportKey",
                                                        "id": 3047
                                                    },
                                                    {
                                                        "type": "reference",
                                                        "name": "ReadonlyArray",
                                                        "typeArguments": [
                                                            {
                                                                "type": "reference",
                                                                "name": "WatchableViewportKey",
                                                                "id": 3047
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": 3010,
                                            "name": "callback",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {},
                                            "comment": {
                                                "shortText": "a function to call when those keys change"
                                            },
                                            "type": {
                                                "type": "reference",
                                                "name": "FlowAnyFunction"
                                            }
                                        },
                                        {
                                            "id": 3011,
                                            "name": "context",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                                "isOptional": true
                                            },
                                            "comment": {
                                                "shortText": "an optional context for `this` in `callback`."
                                            },
                                            "type": {
                                                "type": "union",
                                                "types": [
                                                    {
                                                        "type": "reference",
                                                        "name": "FlowAnyObject"
                                                    },
                                                    {
                                                        "type": "intrinsic",
                                                        "name": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "type": {
                                        "type": "reference",
                                        "name": "Array",
                                        "typeArguments": [
                                            {
                                                "type": "reference",
                                                "name": "WatchableViewportKey",
                                                "id": 3047
                                            }
                                        ]
                                    },
                                    "overwrites": {
                                        "type": "reference",
                                        "name": "Watchable.watch",
                                        "id": 757
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/viewport.ts",
                                    "line": 285,
                                    "character": 9
                                }
                            ],
                            "overwrites": {
                                "type": "reference",
                                "name": "Watchable.watch",
                                "id": 757
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Accessors",
                            "kind": 262144,
                            "children": [3000, 2998, 2988, 2993, 3002]
                        },
                        {
                            "title": "Methods",
                            "kind": 2048,
                            "children": [2990, 2995, 2984, 2986, 3012, 3007]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/viewport.ts",
                            "line": 51,
                            "character": 14
                        }
                    ],
                    "extendedTypes": [
                        {
                            "type": "reference",
                            "name": "Watchable",
                            "id": 733,
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "WatchableViewportKey",
                                    "id": 3047
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": 2963,
                    "name": "ViewportSizeConstraint",
                    "kind": 256,
                    "kindString": "Interface",
                    "flags": {
                        "isExported": true
                    },
                    "comment": {
                        "shortText": "A constraint on the size of the Block's viewport"
                    },
                    "children": [
                        {
                            "id": 2965,
                            "name": "height",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Height constraint in pixels, or null if no constraint"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/viewport.ts",
                                    "line": 8,
                                    "character": 10
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 2964,
                            "name": "width",
                            "kind": 1024,
                            "kindString": "Property",
                            "flags": {
                                "isExported": true
                            },
                            "comment": {
                                "shortText": "Width constraint in pixels, or null if no constraint"
                            },
                            "sources": [
                                {
                                    "fileName": "src/types/viewport.ts",
                                    "line": 6,
                                    "character": 9
                                }
                            ],
                            "type": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "number"
                                    },
                                    {
                                        "type": "intrinsic",
                                        "name": "null"
                                    }
                                ]
                            }
                        }
                    ],
                    "groups": [
                        {
                            "title": "Properties",
                            "kind": 1024,
                            "children": [2965, 2964]
                        }
                    ],
                    "sources": [
                        {
                            "fileName": "src/types/viewport.ts",
                            "line": 4,
                            "character": 39
                        }
                    ]
                },
                {
                    "id": 3048,
                    "name": "UnsetFn",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {},
                    "sources": [
                        {
                            "fileName": "src/viewport.ts",
                            "line": 24,
                            "character": 12
                        }
                    ],
                    "type": {
                        "type": "reflection",
                        "declaration": {
                            "id": 3049,
                            "name": "__type",
                            "kind": 65536,
                            "kindString": "Type literal",
                            "flags": {},
                            "signatures": [
                                {
                                    "id": 3050,
                                    "name": "__call",
                                    "kind": 4096,
                                    "kindString": "Call signature",
                                    "flags": {},
                                    "type": {
                                        "type": "intrinsic",
                                        "name": "void"
                                    }
                                }
                            ],
                            "sources": [
                                {
                                    "fileName": "src/viewport.ts",
                                    "line": 24,
                                    "character": 14
                                }
                            ]
                        }
                    }
                },
                {
                    "id": 3047,
                    "name": "WatchableViewportKey",
                    "kind": 4194304,
                    "kindString": "Type alias",
                    "flags": {},
                    "comment": {
                        "shortText": "Watchable keys in {@link Viewport}.\n- `isFullscreen`\n- `size`\n- `minSize`\n- `maxFullscreenSize`"
                    },
                    "sources": [
                        {
                            "fileName": "src/viewport.ts",
                            "line": 22,
                            "character": 25
                        }
                    ],
                    "type": {
                        "type": "union",
                        "types": [
                            {
                                "type": "stringLiteral",
                                "value": "isFullscreen"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "size"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "minSize"
                            },
                            {
                                "type": "stringLiteral",
                                "value": "maxFullscreenSize"
                            }
                        ]
                    }
                }
            ],
            "groups": [
                {
                    "title": "Classes",
                    "kind": 128,
                    "children": [2967]
                },
                {
                    "title": "Interfaces",
                    "kind": 256,
                    "children": [2963]
                },
                {
                    "title": "Type aliases",
                    "kind": 4194304,
                    "children": [3048, 3047]
                }
            ],
            "sources": [
                {
                    "fileName": "src/types/viewport.ts",
                    "line": 1,
                    "character": 0
                }
            ]
        }
    ],
    "groups": [
        {
            "title": "External modules",
            "kind": 1,
            "children": [
                732,
                584,
                692,
                2862,
                590,
                639,
                1056,
                1318,
                2719,
                667,
                647,
                8176,
                7564,
                9126,
                7669,
                8156,
                7740,
                7799,
                8164,
                7867,
                7551,
                7950,
                8051,
                11007,
                11034,
                11878,
                10320,
                11346,
                11276,
                11416,
                12953,
                10642,
                9637,
                14233,
                14033,
                10525,
                10025,
                14143,
                13914,
                10687,
                14310,
                10798,
                11796,
                12041,
                12288,
                9087,
                12596,
                13437,
                9437,
                13810,
                15175,
                11138,
                9831,
                13698,
                559,
                504,
                10488,
                10495,
                10502,
                14406,
                11273,
                14439,
                12001,
                14413,
                14429,
                14432,
                12027,
                14436,
                3228,
                3246,
                14577,
                781,
                14444,
                2962
            ]
        }
    ]
}
